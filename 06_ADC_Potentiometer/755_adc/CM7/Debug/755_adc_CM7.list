
755_adc_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800596c  0800596c  0001596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800597c  0800597c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800597c  0800597c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800597c  0800597c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800597c  0800597c  0001597c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  24000010  08005994  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000098  08005994  00020098  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e69a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d44  00000000  00000000  0002e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00030420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00031020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039ff2  00000000  00000000  00031b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db21  00000000  00000000  0006bb3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00187149  00000000  00000000  0007965b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002007a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a0  00000000  00000000  002007f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005954 	.word	0x08005954

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005954 	.word	0x08005954

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800040a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800040e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000410:	bf00      	nop
 8000412:	4b2a      	ldr	r3, [pc, #168]	; (80004bc <main+0xb8>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d004      	beq.n	8000428 <main+0x24>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	607a      	str	r2, [r7, #4]
 8000424:	2b00      	cmp	r3, #0
 8000426:	dcf4      	bgt.n	8000412 <main+0xe>
  if ( timeout < 0 )
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da01      	bge.n	8000432 <main+0x2e>
  {
  Error_Handler();
 800042e:	f000 f951 	bl	80006d4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 fa33 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f847 	bl	80004c8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800043a:	4b20      	ldr	r3, [pc, #128]	; (80004bc <main+0xb8>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000440:	4a1e      	ldr	r2, [pc, #120]	; (80004bc <main+0xb8>)
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <main+0xb8>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000458:	2000      	movs	r0, #0
 800045a:	f002 f8ad 	bl	80025b8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800045e:	2100      	movs	r1, #0
 8000460:	2000      	movs	r0, #0
 8000462:	f002 f8c3 	bl	80025ec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800046a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800046c:	bf00      	nop
 800046e:	4b13      	ldr	r3, [pc, #76]	; (80004bc <main+0xb8>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <main+0x80>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	1e5a      	subs	r2, r3, #1
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	dcf4      	bgt.n	800046e <main+0x6a>
if ( timeout < 0 )
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b00      	cmp	r3, #0
 8000488:	da01      	bge.n	800048e <main+0x8a>
{
Error_Handler();
 800048a:	f000 f923 	bl	80006d4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f907 	bl	80006a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000492:	f000 f88d 	bl	80005b0 <MX_ADC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  HAL_ADC_Start(&hadc1);
 8000496:	480a      	ldr	r0, [pc, #40]	; (80004c0 <main+0xbc>)
 8000498:	f000 fe46 	bl	8001128 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800049c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004a0:	4807      	ldr	r0, [pc, #28]	; (80004c0 <main+0xbc>)
 80004a2:	f000 ff0b 	bl	80012bc <HAL_ADC_PollForConversion>
		  data=HAL_ADC_GetValue(&hadc1);
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <main+0xbc>)
 80004a8:	f000 fffc 	bl	80014a4 <HAL_ADC_GetValue>
 80004ac:	4603      	mov	r3, r0
 80004ae:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <main+0xc0>)
 80004b0:	6013      	str	r3, [r2, #0]
	      HAL_Delay(100);
 80004b2:	2064      	movs	r0, #100	; 0x64
 80004b4:	f000 fa84 	bl	80009c0 <HAL_Delay>
		  HAL_ADC_Start(&hadc1);
 80004b8:	e7ed      	b.n	8000496 <main+0x92>
 80004ba:	bf00      	nop
 80004bc:	58024400 	.word	0x58024400
 80004c0:	2400002c 	.word	0x2400002c
 80004c4:	24000090 	.word	0x24000090

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b09c      	sub	sp, #112	; 0x70
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d2:	224c      	movs	r2, #76	; 0x4c
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f005 fa34 	bl	8005944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2220      	movs	r2, #32
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f005 fa2e 	bl	8005944 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004e8:	2004      	movs	r0, #4
 80004ea:	f002 f893 	bl	8002614 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004ee:	2300      	movs	r3, #0
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <SystemClock_Config+0xdc>)
 80004f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f6:	4a2b      	ldr	r2, [pc, #172]	; (80005a4 <SystemClock_Config+0xdc>)
 80004f8:	f023 0301 	bic.w	r3, r3, #1
 80004fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004fe:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <SystemClock_Config+0xdc>)
 8000500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <SystemClock_Config+0xe0>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000510:	4a25      	ldr	r2, [pc, #148]	; (80005a8 <SystemClock_Config+0xe0>)
 8000512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <SystemClock_Config+0xe0>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000520:	603b      	str	r3, [r7, #0]
 8000522:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000524:	bf00      	nop
 8000526:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <SystemClock_Config+0xe0>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000532:	d1f8      	bne.n	8000526 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <SystemClock_Config+0xe4>)
 8000536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000538:	4a1c      	ldr	r2, [pc, #112]	; (80005ac <SystemClock_Config+0xe4>)
 800053a:	f023 0303 	bic.w	r3, r3, #3
 800053e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	2302      	movs	r3, #2
 8000542:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000544:	2301      	movs	r3, #1
 8000546:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054c:	2300      	movs	r3, #0
 800054e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000550:	2300      	movs	r3, #0
 8000552:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000558:	4618      	mov	r0, r3
 800055a:	f002 f8b5 	bl	80026c8 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000564:	f000 f8b6 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	233f      	movs	r3, #63	; 0x3f
 800056a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2101      	movs	r1, #1
 800058c:	4618      	mov	r0, r3
 800058e:	f002 fcc9 	bl	8002f24 <HAL_RCC_ClockConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000598:	f000 f89c 	bl	80006d4 <Error_Handler>
  }
}
 800059c:	bf00      	nop
 800059e:	3770      	adds	r7, #112	; 0x70
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	58000400 	.word	0x58000400
 80005a8:	58024800 	.word	0x58024800
 80005ac:	58024400 	.word	0x58024400

080005b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
 80005d0:	615a      	str	r2, [r3, #20]
 80005d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d4:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <MX_ADC1_Init+0xe4>)
 80005d6:	4a30      	ldr	r2, [pc, #192]	; (8000698 <MX_ADC1_Init+0xe8>)
 80005d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_ADC1_Init+0xe4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <MX_ADC1_Init+0xe4>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e6:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <MX_ADC1_Init+0xe4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <MX_ADC1_Init+0xe4>)
 80005ee:	2204      	movs	r2, #4
 80005f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_ADC1_Init+0xe4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <MX_ADC1_Init+0xe4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_ADC1_Init+0xe4>)
 8000600:	2201      	movs	r2, #1
 8000602:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000604:	4b23      	ldr	r3, [pc, #140]	; (8000694 <MX_ADC1_Init+0xe4>)
 8000606:	2200      	movs	r2, #0
 8000608:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_ADC1_Init+0xe4>)
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_ADC1_Init+0xe4>)
 8000612:	2200      	movs	r2, #0
 8000614:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0xe4>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ADC1_Init+0xe4>)
 800061e:	2200      	movs	r2, #0
 8000620:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC1_Init+0xe4>)
 8000624:	2200      	movs	r2, #0
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC1_Init+0xe4>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000630:	4818      	ldr	r0, [pc, #96]	; (8000694 <MX_ADC1_Init+0xe4>)
 8000632:	f000 fbd7 	bl	8000de4 <HAL_ADC_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800063c:	f000 f84a 	bl	80006d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	4812      	ldr	r0, [pc, #72]	; (8000694 <MX_ADC1_Init+0xe4>)
 800064c:	f001 fc42 	bl	8001ed4 <HAL_ADCEx_MultiModeConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000656:	f000 f83d 	bl	80006d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_ADC1_Init+0xec>)
 800065c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065e:	2306      	movs	r3, #6
 8000660:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000666:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800066a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800066c:	2304      	movs	r3, #4
 800066e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_ADC1_Init+0xe4>)
 800067e:	f000 ff1f 	bl	80014c0 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000688:	f000 f824 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2400002c 	.word	0x2400002c
 8000698:	40022000 	.word	0x40022000
 800069c:	1d500080 	.word	0x1d500080

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_GPIO_Init+0x30>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ac:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <MX_GPIO_Init+0x30>)
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_GPIO_Init+0x30>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	58024400 	.word	0x58024400

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	e7fe      	b.n	80006dc <Error_Handler+0x8>
	...

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_MspInit+0x30>)
 80006e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006ec:	4a08      	ldr	r2, [pc, #32]	; (8000710 <HAL_MspInit+0x30>)
 80006ee:	f043 0302 	orr.w	r3, r3, #2
 80006f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_MspInit+0x30>)
 80006f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	58024400 	.word	0x58024400

08000714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0b8      	sub	sp, #224	; 0xe0
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	22bc      	movs	r2, #188	; 0xbc
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f005 f905 	bl	8005944 <memset>
  if(hadc->Instance==ADC1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <HAL_ADC_MspInit+0xd4>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d14d      	bne.n	80007e0 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000744:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000748:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800074a:	2304      	movs	r3, #4
 800074c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 800074e:	2309      	movs	r3, #9
 8000750:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000752:	2304      	movs	r3, #4
 8000754:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800075e:	23c0      	movs	r3, #192	; 0xc0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000762:	2320      	movs	r3, #32
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000766:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800076c:	2300      	movs	r3, #0
 800076e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4618      	mov	r0, r3
 8000778:	f002 ff34 	bl	80035e4 <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000782:	f7ff ffa7 	bl	80006d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_ADC_MspInit+0xd8>)
 8000788:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800078c:	4a17      	ldr	r2, [pc, #92]	; (80007ec <HAL_ADC_MspInit+0xd8>)
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_ADC_MspInit+0xd8>)
 8000798:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800079c:	f003 0320 	and.w	r3, r3, #32
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <HAL_ADC_MspInit+0xd8>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <HAL_ADC_MspInit+0xd8>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_ADC_MspInit+0xd8>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c8:	2303      	movs	r3, #3
 80007ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007d8:	4619      	mov	r1, r3
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <HAL_ADC_MspInit+0xdc>)
 80007dc:	f001 fd3c 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007e0:	bf00      	nop
 80007e2:	37e0      	adds	r7, #224	; 0xe0
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40022000 	.word	0x40022000
 80007ec:	58024400 	.word	0x58024400
 80007f0:	58020000 	.word	0x58020000

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <NMI_Handler+0x4>

080007fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <MemManage_Handler+0x4>

08000806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <UsageFault_Handler+0x4>

08000812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000840:	f000 f89e 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000880 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800084c:	f7ff fd44 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f005 f841 	bl	80058fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fdc3 	bl	8000404 <main>
  bx  lr
 800087e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000880:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000884:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000888:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800088c:	08005984 	.word	0x08005984
  ldr r2, =_sbss
 8000890:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000894:	24000098 	.word	0x24000098

08000898 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC3_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a2:	2003      	movs	r0, #3
 80008a4:	f001 fca6 	bl	80021f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008a8:	f002 fcf2 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 80008ac:	4602      	mov	r2, r0
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_Init+0x68>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	f003 030f 	and.w	r3, r3, #15
 80008b8:	4913      	ldr	r1, [pc, #76]	; (8000908 <HAL_Init+0x6c>)
 80008ba:	5ccb      	ldrb	r3, [r1, r3]
 80008bc:	f003 031f 	and.w	r3, r3, #31
 80008c0:	fa22 f303 	lsr.w	r3, r2, r3
 80008c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_Init+0x68>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_Init+0x6c>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	f003 031f 	and.w	r3, r3, #31
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	fa22 f303 	lsr.w	r3, r2, r3
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <HAL_Init+0x70>)
 80008de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <HAL_Init+0x74>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e6:	200f      	movs	r0, #15
 80008e8:	f000 f814 	bl	8000914 <HAL_InitTick>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e002      	b.n	80008fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008f6:	f7ff fef3 	bl	80006e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58024400 	.word	0x58024400
 8000908:	0800596c 	.word	0x0800596c
 800090c:	24000004 	.word	0x24000004
 8000910:	24000000 	.word	0x24000000

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_InitTick+0x60>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e021      	b.n	800096c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <HAL_InitTick+0x64>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_InitTick+0x60>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fc7d 	bl	800223e <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f001 fc55 	bl	800220a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_InitTick+0x68>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2400000c 	.word	0x2400000c
 8000978:	24000000 	.word	0x24000000
 800097c:	24000008 	.word	0x24000008

08000980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x20>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_IncTick+0x24>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_IncTick+0x24>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	2400000c 	.word	0x2400000c
 80009a4:	24000094 	.word	0x24000094

080009a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <HAL_GetTick+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	24000094 	.word	0x24000094

080009c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c8:	f7ff ffee 	bl	80009a8 <HAL_GetTick>
 80009cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d005      	beq.n	80009e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_Delay+0x44>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009e6:	bf00      	nop
 80009e8:	f7ff ffde 	bl	80009a8 <HAL_GetTick>
 80009ec:	4602      	mov	r2, r0
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d8f7      	bhi.n	80009e8 <HAL_Delay+0x28>
  {
  }
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2400000c 	.word	0x2400000c

08000a08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <HAL_GetREVID+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	0c1b      	lsrs	r3, r3, #16
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	5c001000 	.word	0x5c001000

08000a20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	431a      	orrs	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	609a      	str	r2, [r3, #8]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3360      	adds	r3, #96	; 0x60
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000abc:	bf00      	nop
 8000abe:	371c      	adds	r7, #28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f003 031f 	and.w	r3, r3, #31
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	611a      	str	r2, [r3, #16]
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b087      	sub	sp, #28
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3360      	adds	r3, #96	; 0x60
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	601a      	str	r2, [r3, #0]
  }
}
 8000b24:	bf00      	nop
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b087      	sub	sp, #28
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3330      	adds	r3, #48	; 0x30
 8000b66:	461a      	mov	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	4413      	add	r3, r2
 8000b74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	f003 031f 	and.w	r3, r3, #31
 8000b80:	211f      	movs	r1, #31
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	401a      	ands	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	0e9b      	lsrs	r3, r3, #26
 8000b8e:	f003 011f 	and.w	r1, r3, #31
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ba2:	bf00      	nop
 8000ba4:	371c      	adds	r7, #28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b087      	sub	sp, #28
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3314      	adds	r3, #20
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	0e5b      	lsrs	r3, r3, #25
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	4413      	add	r3, r2
 8000bcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	0d1b      	lsrs	r3, r3, #20
 8000bd6:	f003 031f 	and.w	r3, r3, #31
 8000bda:	2107      	movs	r1, #7
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	401a      	ands	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	0d1b      	lsrs	r3, r3, #20
 8000be8:	f003 031f 	and.w	r3, r3, #31
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	401a      	ands	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0318 	and.w	r3, r3, #24
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c28:	40d9      	lsrs	r1, r3
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	400b      	ands	r3, r1
 8000c2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000c32:	431a      	orrs	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	000fffff 	.word	0x000fffff

08000c4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 031f 	and.w	r3, r3, #31
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	6093      	str	r3, [r2, #8]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	5fffffc0 	.word	0x5fffffc0

08000ca8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cbc:	d101      	bne.n	8000cc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000cde:	4013      	ands	r3, r2
 8000ce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	6fffffc0 	.word	0x6fffffc0

08000cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000d0c:	d101      	bne.n	8000d12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <LL_ADC_Enable+0x24>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	f043 0201 	orr.w	r2, r3, #1
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	7fffffc0 	.word	0x7fffffc0

08000d48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <LL_ADC_IsEnabled+0x18>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <LL_ADC_IsEnabled+0x1a>
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <LL_ADC_REG_StartConversion+0x24>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	f043 0204 	orr.w	r2, r3, #4
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	7fffffc0 	.word	0x7fffffc0

08000d98 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d101      	bne.n	8000db0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b08      	cmp	r3, #8
 8000dd0:	d101      	bne.n	8000dd6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e18f      	b.n	800111e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d109      	bne.n	8000e20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff fc81 	bl	8000714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff3f 	bl	8000ca8 <LL_ADC_IsDeepPowerDownEnabled>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d004      	beq.n	8000e3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff25 	bl	8000c84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff5a 	bl	8000cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d114      	bne.n	8000e74 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff3e 	bl	8000cd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e54:	4b87      	ldr	r3, [pc, #540]	; (8001074 <HAL_ADC_Init+0x290>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	099b      	lsrs	r3, r3, #6
 8000e5a:	4a87      	ldr	r2, [pc, #540]	; (8001078 <HAL_ADC_Init+0x294>)
 8000e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e60:	099b      	lsrs	r3, r3, #6
 8000e62:	3301      	adds	r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e66:	e002      	b.n	8000e6e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f9      	bne.n	8000e68 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff3d 	bl	8000cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10d      	bne.n	8000ea0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e88:	f043 0210 	orr.w	r2, r3, #16
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e94:	f043 0201 	orr.w	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff77 	bl	8000d98 <LL_ADC_REG_IsConversionOngoing>
 8000eaa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f040 8129 	bne.w	800110c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f040 8125 	bne.w	800110c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000eca:	f043 0202 	orr.w	r2, r3, #2
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff36 	bl	8000d48 <LL_ADC_IsEnabled>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d136      	bne.n	8000f50 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a65      	ldr	r2, [pc, #404]	; (800107c <HAL_ADC_Init+0x298>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d004      	beq.n	8000ef6 <HAL_ADC_Init+0x112>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a63      	ldr	r2, [pc, #396]	; (8001080 <HAL_ADC_Init+0x29c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d10e      	bne.n	8000f14 <HAL_ADC_Init+0x130>
 8000ef6:	4861      	ldr	r0, [pc, #388]	; (800107c <HAL_ADC_Init+0x298>)
 8000ef8:	f7ff ff26 	bl	8000d48 <LL_ADC_IsEnabled>
 8000efc:	4604      	mov	r4, r0
 8000efe:	4860      	ldr	r0, [pc, #384]	; (8001080 <HAL_ADC_Init+0x29c>)
 8000f00:	f7ff ff22 	bl	8000d48 <LL_ADC_IsEnabled>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4323      	orrs	r3, r4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	e008      	b.n	8000f26 <HAL_ADC_Init+0x142>
 8000f14:	485b      	ldr	r0, [pc, #364]	; (8001084 <HAL_ADC_Init+0x2a0>)
 8000f16:	f7ff ff17 	bl	8000d48 <LL_ADC_IsEnabled>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	bf0c      	ite	eq
 8000f20:	2301      	moveq	r3, #1
 8000f22:	2300      	movne	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d012      	beq.n	8000f50 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a53      	ldr	r2, [pc, #332]	; (800107c <HAL_ADC_Init+0x298>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d004      	beq.n	8000f3e <HAL_ADC_Init+0x15a>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a51      	ldr	r2, [pc, #324]	; (8001080 <HAL_ADC_Init+0x29c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Init+0x15e>
 8000f3e:	4a52      	ldr	r2, [pc, #328]	; (8001088 <HAL_ADC_Init+0x2a4>)
 8000f40:	e000      	b.n	8000f44 <HAL_ADC_Init+0x160>
 8000f42:	4a52      	ldr	r2, [pc, #328]	; (800108c <HAL_ADC_Init+0x2a8>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	f7ff fd68 	bl	8000a20 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000f50:	f7ff fd5a 	bl	8000a08 <HAL_GetREVID>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d914      	bls.n	8000f88 <HAL_ADC_Init+0x1a4>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b10      	cmp	r3, #16
 8000f64:	d110      	bne.n	8000f88 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7d5b      	ldrb	r3, [r3, #21]
 8000f6a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f70:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000f76:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7f1b      	ldrb	r3, [r3, #28]
 8000f7c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000f7e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f80:	f043 030c 	orr.w	r3, r3, #12
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	e00d      	b.n	8000fa4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7d5b      	ldrb	r3, [r3, #21]
 8000f8c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f92:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000f98:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7f1b      	ldrb	r3, [r3, #28]
 8000f9e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7f1b      	ldrb	r3, [r3, #28]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d106      	bne.n	8000fba <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	045b      	lsls	r3, r3, #17
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d009      	beq.n	8000fd6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <HAL_ADC_Init+0x2ac>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	69b9      	ldr	r1, [r7, #24]
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fed2 	bl	8000d98 <LL_ADC_REG_IsConversionOngoing>
 8000ff4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fedf 	bl	8000dbe <LL_ADC_INJ_IsConversionOngoing>
 8001000:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d15f      	bne.n	80010c8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d15c      	bne.n	80010c8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7d1b      	ldrb	r3, [r3, #20]
 8001012:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_ADC_Init+0x2b0>)
 8001024:	4013      	ands	r3, r2
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	69b9      	ldr	r1, [r7, #24]
 800102c:	430b      	orrs	r3, r1
 800102e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001036:	2b01      	cmp	r3, #1
 8001038:	d130      	bne.n	800109c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_ADC_Init+0x2b4>)
 8001048:	4013      	ands	r3, r2
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800104e:	3a01      	subs	r2, #1
 8001050:	0411      	lsls	r1, r2, #16
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001056:	4311      	orrs	r1, r2
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800105c:	4311      	orrs	r1, r2
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001062:	430a      	orrs	r2, r1
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0201 	orr.w	r2, r2, #1
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	e01c      	b.n	80010ac <HAL_ADC_Init+0x2c8>
 8001072:	bf00      	nop
 8001074:	24000000 	.word	0x24000000
 8001078:	053e2d63 	.word	0x053e2d63
 800107c:	40022000 	.word	0x40022000
 8001080:	40022100 	.word	0x40022100
 8001084:	58026000 	.word	0x58026000
 8001088:	40022300 	.word	0x40022300
 800108c:	58026300 	.word	0x58026300
 8001090:	fff0c003 	.word	0xfff0c003
 8001094:	ffffbffc 	.word	0xffffbffc
 8001098:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fdd6 	bl	8001c74 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10c      	bne.n	80010ea <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f023 010f 	bic.w	r1, r3, #15
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	1e5a      	subs	r2, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
 80010e8:	e007      	b.n	80010fa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 020f 	bic.w	r2, r2, #15
 80010f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fe:	f023 0303 	bic.w	r3, r3, #3
 8001102:	f043 0201 	orr.w	r2, r3, #1
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	655a      	str	r2, [r3, #84]	; 0x54
 800110a:	e007      	b.n	800111c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001110:	f043 0210 	orr.w	r2, r3, #16
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800111c:	7ffb      	ldrb	r3, [r7, #31]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd90      	pop	{r4, r7, pc}
 8001126:	bf00      	nop

08001128 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a5c      	ldr	r2, [pc, #368]	; (80012a8 <HAL_ADC_Start+0x180>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d004      	beq.n	8001144 <HAL_ADC_Start+0x1c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a5b      	ldr	r2, [pc, #364]	; (80012ac <HAL_ADC_Start+0x184>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_ADC_Start+0x20>
 8001144:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <HAL_ADC_Start+0x188>)
 8001146:	e000      	b.n	800114a <HAL_ADC_Start+0x22>
 8001148:	4b5a      	ldr	r3, [pc, #360]	; (80012b4 <HAL_ADC_Start+0x18c>)
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fd7e 	bl	8000c4c <LL_ADC_GetMultimode>
 8001150:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fe1e 	bl	8000d98 <LL_ADC_REG_IsConversionOngoing>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 809a 	bne.w	8001298 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Start+0x4a>
 800116e:	2302      	movs	r3, #2
 8001170:	e095      	b.n	800129e <HAL_ADC_Start+0x176>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 fcf0 	bl	8001b60 <ADC_Enable>
 8001180:	4603      	mov	r3, r0
 8001182:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 8081 	bne.w	800128e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001190:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <HAL_ADC_Start+0x190>)
 8001192:	4013      	ands	r3, r2
 8001194:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a42      	ldr	r2, [pc, #264]	; (80012ac <HAL_ADC_Start+0x184>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d002      	beq.n	80011ac <HAL_ADC_Start+0x84>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	e000      	b.n	80011ae <HAL_ADC_Start+0x86>
 80011ac:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <HAL_ADC_Start+0x180>)
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d002      	beq.n	80011bc <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d105      	bne.n	80011c8 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011d4:	d106      	bne.n	80011e4 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f023 0206 	bic.w	r2, r3, #6
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	659a      	str	r2, [r3, #88]	; 0x58
 80011e2:	e002      	b.n	80011ea <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	221c      	movs	r2, #28
 80011f0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a2b      	ldr	r2, [pc, #172]	; (80012ac <HAL_ADC_Start+0x184>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d002      	beq.n	800120a <HAL_ADC_Start+0xe2>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	e000      	b.n	800120c <HAL_ADC_Start+0xe4>
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <HAL_ADC_Start+0x180>)
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	4293      	cmp	r3, r2
 8001212:	d008      	beq.n	8001226 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	2b05      	cmp	r3, #5
 800121e:	d002      	beq.n	8001226 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	2b09      	cmp	r3, #9
 8001224:	d114      	bne.n	8001250 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001238:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800123c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fd91 	bl	8000d70 <LL_ADC_REG_StartConversion>
 800124e:	e025      	b.n	800129c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <HAL_ADC_Start+0x184>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d002      	beq.n	800126c <HAL_ADC_Start+0x144>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	e000      	b.n	800126e <HAL_ADC_Start+0x146>
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_ADC_Start+0x180>)
 800126e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00f      	beq.n	800129c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001280:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001284:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	655a      	str	r2, [r3, #84]	; 0x54
 800128c:	e006      	b.n	800129c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001296:	e001      	b.n	800129c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001298:	2302      	movs	r3, #2
 800129a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800129c:	7dfb      	ldrb	r3, [r7, #23]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40022000 	.word	0x40022000
 80012ac:	40022100 	.word	0x40022100
 80012b0:	40022300 	.word	0x40022300
 80012b4:	58026300 	.word	0x58026300
 80012b8:	fffff0fe 	.word	0xfffff0fe

080012bc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a72      	ldr	r2, [pc, #456]	; (8001494 <HAL_ADC_PollForConversion+0x1d8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d004      	beq.n	80012da <HAL_ADC_PollForConversion+0x1e>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a70      	ldr	r2, [pc, #448]	; (8001498 <HAL_ADC_PollForConversion+0x1dc>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_ADC_PollForConversion+0x22>
 80012da:	4b70      	ldr	r3, [pc, #448]	; (800149c <HAL_ADC_PollForConversion+0x1e0>)
 80012dc:	e000      	b.n	80012e0 <HAL_ADC_PollForConversion+0x24>
 80012de:	4b70      	ldr	r3, [pc, #448]	; (80014a0 <HAL_ADC_PollForConversion+0x1e4>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fcb3 	bl	8000c4c <LL_ADC_GetMultimode>
 80012e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d102      	bne.n	80012f6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80012f0:	2308      	movs	r3, #8
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	e037      	b.n	8001366 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d002      	beq.n	8001308 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b09      	cmp	r3, #9
 8001306:	d111      	bne.n	800132c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131a:	f043 0220 	orr.w	r2, r3, #32
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e0b1      	b.n	800148a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001326:	2304      	movs	r3, #4
 8001328:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800132a:	e01c      	b.n	8001366 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a58      	ldr	r2, [pc, #352]	; (8001494 <HAL_ADC_PollForConversion+0x1d8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d004      	beq.n	8001340 <HAL_ADC_PollForConversion+0x84>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a57      	ldr	r2, [pc, #348]	; (8001498 <HAL_ADC_PollForConversion+0x1dc>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d101      	bne.n	8001344 <HAL_ADC_PollForConversion+0x88>
 8001340:	4b56      	ldr	r3, [pc, #344]	; (800149c <HAL_ADC_PollForConversion+0x1e0>)
 8001342:	e000      	b.n	8001346 <HAL_ADC_PollForConversion+0x8a>
 8001344:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <HAL_ADC_PollForConversion+0x1e4>)
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fc8e 	bl	8000c68 <LL_ADC_GetMultiDMATransfer>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d007      	beq.n	8001362 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f043 0220 	orr.w	r2, r3, #32
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e093      	b.n	800148a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001362:	2304      	movs	r3, #4
 8001364:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001366:	f7ff fb1f 	bl	80009a8 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800136c:	e021      	b.n	80013b2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d01d      	beq.n	80013b2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001376:	f7ff fb17 	bl	80009a8 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d302      	bcc.n	800138c <HAL_ADC_PollForConversion+0xd0>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d112      	bne.n	80013b2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10b      	bne.n	80013b2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139e:	f043 0204 	orr.w	r2, r3, #4
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e06b      	b.n	800148a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0d6      	beq.n	800136e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fbad 	bl	8000b30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d01c      	beq.n	8001416 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7d5b      	ldrb	r3, [r3, #21]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d118      	bne.n	8001416 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d111      	bne.n	8001416 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d105      	bne.n	8001416 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140e:	f043 0201 	orr.w	r2, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <HAL_ADC_PollForConversion+0x1dc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d002      	beq.n	8001426 <HAL_ADC_PollForConversion+0x16a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	e000      	b.n	8001428 <HAL_ADC_PollForConversion+0x16c>
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_ADC_PollForConversion+0x1d8>)
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	4293      	cmp	r3, r2
 800142e:	d008      	beq.n	8001442 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b05      	cmp	r3, #5
 800143a:	d002      	beq.n	8001442 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b09      	cmp	r3, #9
 8001440:	d104      	bne.n	800144c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	e00c      	b.n	8001466 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_ADC_PollForConversion+0x1dc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d002      	beq.n	800145c <HAL_ADC_PollForConversion+0x1a0>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	e000      	b.n	800145e <HAL_ADC_PollForConversion+0x1a2>
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_ADC_PollForConversion+0x1d8>)
 800145e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	2b08      	cmp	r3, #8
 800146a:	d104      	bne.n	8001476 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2208      	movs	r2, #8
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e008      	b.n	8001488 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d103      	bne.n	8001488 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	220c      	movs	r2, #12
 8001486:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40022000 	.word	0x40022000
 8001498:	40022100 	.word	0x40022100
 800149c:	40022300 	.word	0x40022300
 80014a0:	58026300 	.word	0x58026300

080014a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b0a1      	sub	sp, #132	; 0x84
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4a9d      	ldr	r2, [pc, #628]	; (8001750 <HAL_ADC_ConfigChannel+0x290>)
 80014da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x2a>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e321      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x66e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fc4e 	bl	8000d98 <LL_ADC_REG_IsConversionOngoing>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 8306 	bne.w	8001b10 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800150c:	2b00      	cmp	r3, #0
 800150e:	d108      	bne.n	8001522 <HAL_ADC_ConfigChannel+0x62>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0e9b      	lsrs	r3, r3, #26
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2201      	movs	r2, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	e016      	b.n	8001550 <HAL_ADC_ConfigChannel+0x90>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001532:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800153a:	2320      	movs	r3, #32
 800153c:	e003      	b.n	8001546 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800153e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f003 031f 	and.w	r3, r3, #31
 800154a:	2201      	movs	r2, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	69d1      	ldr	r1, [r2, #28]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	430b      	orrs	r3, r1
 800155c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6859      	ldr	r1, [r3, #4]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	f7ff faf3 	bl	8000b56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fc0f 	bl	8000d98 <LL_ADC_REG_IsConversionOngoing>
 800157a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fc1c 	bl	8000dbe <LL_ADC_INJ_IsConversionOngoing>
 8001586:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 80b3 	bne.w	80016f6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 80af 	bne.w	80016f6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6819      	ldr	r1, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	461a      	mov	r2, r3
 80015a6:	f7ff fb02 	bl	8000bae <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015aa:	4b6a      	ldr	r3, [pc, #424]	; (8001754 <HAL_ADC_ConfigChannel+0x294>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80015b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015b6:	d10b      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x110>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	e01d      	b.n	800160c <HAL_ADC_ConfigChannel+0x14c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10b      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x136>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	e00a      	b.n	800160c <HAL_ADC_ConfigChannel+0x14c>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b04      	cmp	r3, #4
 8001614:	d027      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6919      	ldr	r1, [r3, #16]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001624:	f7ff fa30 	bl	8000a88 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6919      	ldr	r1, [r3, #16]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	7e5b      	ldrb	r3, [r3, #25]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d102      	bne.n	800163e <HAL_ADC_ConfigChannel+0x17e>
 8001638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800163c:	e000      	b.n	8001640 <HAL_ADC_ConfigChannel+0x180>
 800163e:	2300      	movs	r3, #0
 8001640:	461a      	mov	r2, r3
 8001642:	f7ff fa5a 	bl	8000afa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	7e1b      	ldrb	r3, [r3, #24]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <HAL_ADC_ConfigChannel+0x19c>
 8001656:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800165a:	e000      	b.n	800165e <HAL_ADC_ConfigChannel+0x19e>
 800165c:	2300      	movs	r3, #0
 800165e:	461a      	mov	r2, r3
 8001660:	f7ff fa32 	bl	8000ac8 <LL_ADC_SetDataRightShift>
 8001664:	e047      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	069b      	lsls	r3, r3, #26
 8001676:	429a      	cmp	r2, r3
 8001678:	d107      	bne.n	800168a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001688:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001690:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	069b      	lsls	r3, r3, #26
 800169a:	429a      	cmp	r2, r3
 800169c:	d107      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016ac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	069b      	lsls	r3, r3, #26
 80016be:	429a      	cmp	r2, r3
 80016c0:	d107      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016d0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	069b      	lsls	r3, r3, #26
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d107      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fb24 	bl	8000d48 <LL_ADC_IsEnabled>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 820d 	bne.w	8001b22 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	461a      	mov	r2, r3
 8001716:	f7ff fa75 	bl	8000c04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <HAL_ADC_ConfigChannel+0x290>)
 8001720:	4293      	cmp	r3, r2
 8001722:	f040 8133 	bne.w	800198c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001732:	2b00      	cmp	r3, #0
 8001734:	d110      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x298>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0e9b      	lsrs	r3, r3, #26
 800173c:	3301      	adds	r3, #1
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	2b09      	cmp	r3, #9
 8001744:	bf94      	ite	ls
 8001746:	2301      	movls	r3, #1
 8001748:	2300      	movhi	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	e01e      	b.n	800178c <HAL_ADC_ConfigChannel+0x2cc>
 800174e:	bf00      	nop
 8001750:	47ff0000 	.word	0x47ff0000
 8001754:	5c001000 	.word	0x5c001000
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001760:	fa93 f3a3 	rbit	r3, r3
 8001764:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001768:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800176a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001770:	2320      	movs	r3, #32
 8001772:	e003      	b.n	800177c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	3301      	adds	r3, #1
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	2b09      	cmp	r3, #9
 8001784:	bf94      	ite	ls
 8001786:	2301      	movls	r3, #1
 8001788:	2300      	movhi	r3, #0
 800178a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800178c:	2b00      	cmp	r3, #0
 800178e:	d079      	beq.n	8001884 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001798:	2b00      	cmp	r3, #0
 800179a:	d107      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x2ec>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0e9b      	lsrs	r3, r3, #26
 80017a2:	3301      	adds	r3, #1
 80017a4:	069b      	lsls	r3, r3, #26
 80017a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017aa:	e015      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x318>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80017ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80017be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80017c4:	2320      	movs	r3, #32
 80017c6:	e003      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80017c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	3301      	adds	r3, #1
 80017d2:	069b      	lsls	r3, r3, #26
 80017d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x338>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0e9b      	lsrs	r3, r3, #26
 80017ea:	3301      	adds	r3, #1
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	2101      	movs	r1, #1
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	e017      	b.n	8001828 <HAL_ADC_ConfigChannel+0x368>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001808:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800180a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001810:	2320      	movs	r3, #32
 8001812:	e003      	b.n	800181c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	3301      	adds	r3, #1
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	ea42 0103 	orr.w	r1, r2, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <HAL_ADC_ConfigChannel+0x38e>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0e9b      	lsrs	r3, r3, #26
 800183e:	3301      	adds	r3, #1
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	051b      	lsls	r3, r3, #20
 800184c:	e018      	b.n	8001880 <HAL_ADC_ConfigChannel+0x3c0>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001866:	2320      	movs	r3, #32
 8001868:	e003      	b.n	8001872 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3301      	adds	r3, #1
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001880:	430b      	orrs	r3, r1
 8001882:	e07e      	b.n	8001982 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800188c:	2b00      	cmp	r3, #0
 800188e:	d107      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x3e0>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0e9b      	lsrs	r3, r3, #26
 8001896:	3301      	adds	r3, #1
 8001898:	069b      	lsls	r3, r3, #26
 800189a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800189e:	e015      	b.n	80018cc <HAL_ADC_ConfigChannel+0x40c>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80018b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80018b8:	2320      	movs	r3, #32
 80018ba:	e003      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	069b      	lsls	r3, r3, #26
 80018c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x42c>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0e9b      	lsrs	r3, r3, #26
 80018de:	3301      	adds	r3, #1
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	e017      	b.n	800191c <HAL_ADC_ConfigChannel+0x45c>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	61bb      	str	r3, [r7, #24]
  return result;
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001904:	2320      	movs	r3, #32
 8001906:	e003      	b.n	8001910 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	ea42 0103 	orr.w	r1, r2, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10d      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x488>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	3301      	adds	r3, #1
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	3b1e      	subs	r3, #30
 8001940:	051b      	lsls	r3, r3, #20
 8001942:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001946:	e01b      	b.n	8001980 <HAL_ADC_ConfigChannel+0x4c0>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	60fb      	str	r3, [r7, #12]
  return result;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001960:	2320      	movs	r3, #32
 8001962:	e003      	b.n	800196c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	3301      	adds	r3, #1
 800196e:	f003 021f 	and.w	r2, r3, #31
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	3b1e      	subs	r3, #30
 800197a:	051b      	lsls	r3, r3, #20
 800197c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001980:	430b      	orrs	r3, r1
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	6892      	ldr	r2, [r2, #8]
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f911 	bl	8000bae <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f280 80c6 	bge.w	8001b22 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a67      	ldr	r2, [pc, #412]	; (8001b38 <HAL_ADC_ConfigChannel+0x678>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d004      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x4ea>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a65      	ldr	r2, [pc, #404]	; (8001b3c <HAL_ADC_ConfigChannel+0x67c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x4ee>
 80019aa:	4b65      	ldr	r3, [pc, #404]	; (8001b40 <HAL_ADC_ConfigChannel+0x680>)
 80019ac:	e000      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x4f0>
 80019ae:	4b65      	ldr	r3, [pc, #404]	; (8001b44 <HAL_ADC_ConfigChannel+0x684>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f85b 	bl	8000a6c <LL_ADC_GetCommonPathInternalCh>
 80019b6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a5e      	ldr	r2, [pc, #376]	; (8001b38 <HAL_ADC_ConfigChannel+0x678>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d004      	beq.n	80019cc <HAL_ADC_ConfigChannel+0x50c>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a5d      	ldr	r2, [pc, #372]	; (8001b3c <HAL_ADC_ConfigChannel+0x67c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d10e      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x52a>
 80019cc:	485a      	ldr	r0, [pc, #360]	; (8001b38 <HAL_ADC_ConfigChannel+0x678>)
 80019ce:	f7ff f9bb 	bl	8000d48 <LL_ADC_IsEnabled>
 80019d2:	4604      	mov	r4, r0
 80019d4:	4859      	ldr	r0, [pc, #356]	; (8001b3c <HAL_ADC_ConfigChannel+0x67c>)
 80019d6:	f7ff f9b7 	bl	8000d48 <LL_ADC_IsEnabled>
 80019da:	4603      	mov	r3, r0
 80019dc:	4323      	orrs	r3, r4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bf0c      	ite	eq
 80019e2:	2301      	moveq	r3, #1
 80019e4:	2300      	movne	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	e008      	b.n	80019fc <HAL_ADC_ConfigChannel+0x53c>
 80019ea:	4857      	ldr	r0, [pc, #348]	; (8001b48 <HAL_ADC_ConfigChannel+0x688>)
 80019ec:	f7ff f9ac 	bl	8000d48 <LL_ADC_IsEnabled>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf0c      	ite	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	2300      	movne	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d07d      	beq.n	8001afc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a51      	ldr	r2, [pc, #324]	; (8001b4c <HAL_ADC_ConfigChannel+0x68c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d130      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x5ac>
 8001a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d12b      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <HAL_ADC_ConfigChannel+0x688>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	f040 8081 	bne.w	8001b22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a44      	ldr	r2, [pc, #272]	; (8001b38 <HAL_ADC_ConfigChannel+0x678>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d004      	beq.n	8001a34 <HAL_ADC_ConfigChannel+0x574>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a43      	ldr	r2, [pc, #268]	; (8001b3c <HAL_ADC_ConfigChannel+0x67c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x578>
 8001a34:	4a42      	ldr	r2, [pc, #264]	; (8001b40 <HAL_ADC_ConfigChannel+0x680>)
 8001a36:	e000      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x57a>
 8001a38:	4a42      	ldr	r2, [pc, #264]	; (8001b44 <HAL_ADC_ConfigChannel+0x684>)
 8001a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f7fe ffff 	bl	8000a46 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a48:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_ADC_ConfigChannel+0x690>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	4a41      	ldr	r2, [pc, #260]	; (8001b54 <HAL_ADC_ConfigChannel+0x694>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	3301      	adds	r3, #1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001a5c:	e002      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f9      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a6a:	e05a      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a39      	ldr	r2, [pc, #228]	; (8001b58 <HAL_ADC_ConfigChannel+0x698>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d11e      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x5f4>
 8001a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d119      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a30      	ldr	r2, [pc, #192]	; (8001b48 <HAL_ADC_ConfigChannel+0x688>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d14b      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a2a      	ldr	r2, [pc, #168]	; (8001b38 <HAL_ADC_ConfigChannel+0x678>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d004      	beq.n	8001a9e <HAL_ADC_ConfigChannel+0x5de>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a28      	ldr	r2, [pc, #160]	; (8001b3c <HAL_ADC_ConfigChannel+0x67c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x5e2>
 8001a9e:	4a28      	ldr	r2, [pc, #160]	; (8001b40 <HAL_ADC_ConfigChannel+0x680>)
 8001aa0:	e000      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x5e4>
 8001aa2:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <HAL_ADC_ConfigChannel+0x684>)
 8001aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f7fe ffca 	bl	8000a46 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ab2:	e036      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <HAL_ADC_ConfigChannel+0x69c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d131      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x662>
 8001abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d12c      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <HAL_ADC_ConfigChannel+0x688>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d127      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a18      	ldr	r2, [pc, #96]	; (8001b38 <HAL_ADC_ConfigChannel+0x678>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d004      	beq.n	8001ae6 <HAL_ADC_ConfigChannel+0x626>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a16      	ldr	r2, [pc, #88]	; (8001b3c <HAL_ADC_ConfigChannel+0x67c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x62a>
 8001ae6:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <HAL_ADC_ConfigChannel+0x680>)
 8001ae8:	e000      	b.n	8001aec <HAL_ADC_ConfigChannel+0x62c>
 8001aea:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <HAL_ADC_ConfigChannel+0x684>)
 8001aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7fe ffa6 	bl	8000a46 <LL_ADC_SetCommonPathInternalCh>
 8001afa:	e012      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	f043 0220 	orr.w	r2, r3, #32
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001b0e:	e008      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b14:	f043 0220 	orr.w	r2, r3, #32
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3784      	adds	r7, #132	; 0x84
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	40022100 	.word	0x40022100
 8001b40:	40022300 	.word	0x40022300
 8001b44:	58026300 	.word	0x58026300
 8001b48:	58026000 	.word	0x58026000
 8001b4c:	cb840000 	.word	0xcb840000
 8001b50:	24000000 	.word	0x24000000
 8001b54:	053e2d63 	.word	0x053e2d63
 8001b58:	c7520000 	.word	0xc7520000
 8001b5c:	cfb80000 	.word	0xcfb80000

08001b60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f8eb 	bl	8000d48 <LL_ADC_IsEnabled>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d16e      	bne.n	8001c56 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <ADC_Enable+0x100>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8a:	f043 0210 	orr.w	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	f043 0201 	orr.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e05a      	b.n	8001c58 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f8ba 	bl	8000d20 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001bac:	f7fe fefc 	bl	80009a8 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2b      	ldr	r2, [pc, #172]	; (8001c64 <ADC_Enable+0x104>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d004      	beq.n	8001bc6 <ADC_Enable+0x66>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <ADC_Enable+0x108>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <ADC_Enable+0x6a>
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <ADC_Enable+0x10c>)
 8001bc8:	e000      	b.n	8001bcc <ADC_Enable+0x6c>
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <ADC_Enable+0x110>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f83d 	bl	8000c4c <LL_ADC_GetMultimode>
 8001bd2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <ADC_Enable+0x108>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d002      	beq.n	8001be4 <ADC_Enable+0x84>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	e000      	b.n	8001be6 <ADC_Enable+0x86>
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <ADC_Enable+0x104>)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d02c      	beq.n	8001c48 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d130      	bne.n	8001c56 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bf4:	e028      	b.n	8001c48 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f8a4 	bl	8000d48 <LL_ADC_IsEnabled>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d104      	bne.n	8001c10 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f888 	bl	8000d20 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c10:	f7fe feca 	bl	80009a8 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d914      	bls.n	8001c48 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d00d      	beq.n	8001c48 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f043 0210 	orr.w	r2, r3, #16
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e007      	b.n	8001c58 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d1cf      	bne.n	8001bf6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	8000003f 	.word	0x8000003f
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40022100 	.word	0x40022100
 8001c6c:	40022300 	.word	0x40022300
 8001c70:	58026300 	.word	0x58026300

08001c74 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a79      	ldr	r2, [pc, #484]	; (8001e68 <ADC_ConfigureBoostMode+0x1f4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d004      	beq.n	8001c90 <ADC_ConfigureBoostMode+0x1c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a78      	ldr	r2, [pc, #480]	; (8001e6c <ADC_ConfigureBoostMode+0x1f8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d109      	bne.n	8001ca4 <ADC_ConfigureBoostMode+0x30>
 8001c90:	4b77      	ldr	r3, [pc, #476]	; (8001e70 <ADC_ConfigureBoostMode+0x1fc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	e008      	b.n	8001cb6 <ADC_ConfigureBoostMode+0x42>
 8001ca4:	4b73      	ldr	r3, [pc, #460]	; (8001e74 <ADC_ConfigureBoostMode+0x200>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d01c      	beq.n	8001cf4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001cba:	f001 fc63 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 8001cbe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001cc8:	d010      	beq.n	8001cec <ADC_ConfigureBoostMode+0x78>
 8001cca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001cce:	d871      	bhi.n	8001db4 <ADC_ConfigureBoostMode+0x140>
 8001cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd4:	d002      	beq.n	8001cdc <ADC_ConfigureBoostMode+0x68>
 8001cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cda:	d16b      	bne.n	8001db4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce8:	60fb      	str	r3, [r7, #12]
        break;
 8001cea:	e066      	b.n	8001dba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	60fb      	str	r3, [r7, #12]
        break;
 8001cf2:	e062      	b.n	8001dba <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001cf4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001cf8:	f002 fbba 	bl	8004470 <HAL_RCCEx_GetPeriphCLKFreq>
 8001cfc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001d06:	d051      	beq.n	8001dac <ADC_ConfigureBoostMode+0x138>
 8001d08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001d0c:	d854      	bhi.n	8001db8 <ADC_ConfigureBoostMode+0x144>
 8001d0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001d12:	d047      	beq.n	8001da4 <ADC_ConfigureBoostMode+0x130>
 8001d14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001d18:	d84e      	bhi.n	8001db8 <ADC_ConfigureBoostMode+0x144>
 8001d1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001d1e:	d03d      	beq.n	8001d9c <ADC_ConfigureBoostMode+0x128>
 8001d20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001d24:	d848      	bhi.n	8001db8 <ADC_ConfigureBoostMode+0x144>
 8001d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d2a:	d033      	beq.n	8001d94 <ADC_ConfigureBoostMode+0x120>
 8001d2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d30:	d842      	bhi.n	8001db8 <ADC_ConfigureBoostMode+0x144>
 8001d32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001d36:	d029      	beq.n	8001d8c <ADC_ConfigureBoostMode+0x118>
 8001d38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001d3c:	d83c      	bhi.n	8001db8 <ADC_ConfigureBoostMode+0x144>
 8001d3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001d42:	d01a      	beq.n	8001d7a <ADC_ConfigureBoostMode+0x106>
 8001d44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001d48:	d836      	bhi.n	8001db8 <ADC_ConfigureBoostMode+0x144>
 8001d4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001d4e:	d014      	beq.n	8001d7a <ADC_ConfigureBoostMode+0x106>
 8001d50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001d54:	d830      	bhi.n	8001db8 <ADC_ConfigureBoostMode+0x144>
 8001d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d5a:	d00e      	beq.n	8001d7a <ADC_ConfigureBoostMode+0x106>
 8001d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d60:	d82a      	bhi.n	8001db8 <ADC_ConfigureBoostMode+0x144>
 8001d62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d66:	d008      	beq.n	8001d7a <ADC_ConfigureBoostMode+0x106>
 8001d68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d6c:	d824      	bhi.n	8001db8 <ADC_ConfigureBoostMode+0x144>
 8001d6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d72:	d002      	beq.n	8001d7a <ADC_ConfigureBoostMode+0x106>
 8001d74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d78:	d11e      	bne.n	8001db8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	0c9b      	lsrs	r3, r3, #18
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	60fb      	str	r3, [r7, #12]
        break;
 8001d8a:	e016      	b.n	8001dba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	60fb      	str	r3, [r7, #12]
        break;
 8001d92:	e012      	b.n	8001dba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	60fb      	str	r3, [r7, #12]
        break;
 8001d9a:	e00e      	b.n	8001dba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	099b      	lsrs	r3, r3, #6
 8001da0:	60fb      	str	r3, [r7, #12]
        break;
 8001da2:	e00a      	b.n	8001dba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	09db      	lsrs	r3, r3, #7
 8001da8:	60fb      	str	r3, [r7, #12]
        break;
 8001daa:	e006      	b.n	8001dba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	60fb      	str	r3, [r7, #12]
        break;
 8001db2:	e002      	b.n	8001dba <ADC_ConfigureBoostMode+0x146>
        break;
 8001db4:	bf00      	nop
 8001db6:	e000      	b.n	8001dba <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8001db8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001dba:	f7fe fe25 	bl	8000a08 <HAL_GetREVID>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d815      	bhi.n	8001df4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4a2b      	ldr	r2, [pc, #172]	; (8001e78 <ADC_ConfigureBoostMode+0x204>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d908      	bls.n	8001de2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dde:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001de0:	e03e      	b.n	8001e60 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df0:	609a      	str	r2, [r3, #8]
}
 8001df2:	e035      	b.n	8001e60 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <ADC_ConfigureBoostMode+0x208>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d808      	bhi.n	8001e14 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e10:	609a      	str	r2, [r3, #8]
}
 8001e12:	e025      	b.n	8001e60 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4a1a      	ldr	r2, [pc, #104]	; (8001e80 <ADC_ConfigureBoostMode+0x20c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d80a      	bhi.n	8001e32 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e2e:	609a      	str	r2, [r3, #8]
}
 8001e30:	e016      	b.n	8001e60 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4a13      	ldr	r2, [pc, #76]	; (8001e84 <ADC_ConfigureBoostMode+0x210>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d80a      	bhi.n	8001e50 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4c:	609a      	str	r2, [r3, #8]
}
 8001e4e:	e007      	b.n	8001e60 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001e5e:	609a      	str	r2, [r3, #8]
}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40022100 	.word	0x40022100
 8001e70:	40022300 	.word	0x40022300
 8001e74:	58026300 	.word	0x58026300
 8001e78:	01312d00 	.word	0x01312d00
 8001e7c:	005f5e10 	.word	0x005f5e10
 8001e80:	00bebc20 	.word	0x00bebc20
 8001e84:	017d7840 	.word	0x017d7840

08001e88 <LL_ADC_IsEnabled>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <LL_ADC_IsEnabled+0x18>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <LL_ADC_IsEnabled+0x1a>
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_ADC_REG_IsConversionOngoing>:
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d101      	bne.n	8001ec6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b09f      	sub	sp, #124	; 0x7c
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e0be      	b.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5c      	ldr	r2, [pc, #368]	; (8002078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d102      	bne.n	8001f12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f0c:	4b5b      	ldr	r3, [pc, #364]	; (800207c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	e001      	b.n	8001f16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10b      	bne.n	8001f34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f043 0220 	orr.w	r2, r3, #32
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e09d      	b.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ffb9 	bl	8001eae <LL_ADC_REG_IsConversionOngoing>
 8001f3c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ffb3 	bl	8001eae <LL_ADC_REG_IsConversionOngoing>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d17f      	bne.n	800204e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d17c      	bne.n	800204e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a47      	ldr	r2, [pc, #284]	; (8002078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a46      	ldr	r2, [pc, #280]	; (800207c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8001f68:	4b45      	ldr	r3, [pc, #276]	; (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001f6a:	e000      	b.n	8001f6e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8001f6c:	4b45      	ldr	r3, [pc, #276]	; (8002084 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001f6e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d039      	beq.n	8001fec <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f88:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a3a      	ldr	r2, [pc, #232]	; (8002078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d004      	beq.n	8001f9e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a38      	ldr	r2, [pc, #224]	; (800207c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d10e      	bne.n	8001fbc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001f9e:	4836      	ldr	r0, [pc, #216]	; (8002078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001fa0:	f7ff ff72 	bl	8001e88 <LL_ADC_IsEnabled>
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	4835      	ldr	r0, [pc, #212]	; (800207c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001fa8:	f7ff ff6e 	bl	8001e88 <LL_ADC_IsEnabled>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4323      	orrs	r3, r4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	e008      	b.n	8001fce <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8001fbc:	4832      	ldr	r0, [pc, #200]	; (8002088 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001fbe:	f7ff ff63 	bl	8001e88 <LL_ADC_IsEnabled>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d047      	beq.n	8002062 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	6811      	ldr	r1, [r2, #0]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	6892      	ldr	r2, [r2, #8]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fea:	e03a      	b.n	8002062 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d004      	beq.n	800200c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1d      	ldr	r2, [pc, #116]	; (800207c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d10e      	bne.n	800202a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800200c:	481a      	ldr	r0, [pc, #104]	; (8002078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800200e:	f7ff ff3b 	bl	8001e88 <LL_ADC_IsEnabled>
 8002012:	4604      	mov	r4, r0
 8002014:	4819      	ldr	r0, [pc, #100]	; (800207c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002016:	f7ff ff37 	bl	8001e88 <LL_ADC_IsEnabled>
 800201a:	4603      	mov	r3, r0
 800201c:	4323      	orrs	r3, r4
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	e008      	b.n	800203c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800202a:	4817      	ldr	r0, [pc, #92]	; (8002088 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800202c:	f7ff ff2c 	bl	8001e88 <LL_ADC_IsEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf0c      	ite	eq
 8002036:	2301      	moveq	r3, #1
 8002038:	2300      	movne	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d010      	beq.n	8002062 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002046:	4013      	ands	r3, r2
 8002048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800204a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800204c:	e009      	b.n	8002062 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0220 	orr.w	r2, r3, #32
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002060:	e000      	b.n	8002064 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002062:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800206c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002070:	4618      	mov	r0, r3
 8002072:	377c      	adds	r7, #124	; 0x7c
 8002074:	46bd      	mov	sp, r7
 8002076:	bd90      	pop	{r4, r7, pc}
 8002078:	40022000 	.word	0x40022000
 800207c:	40022100 	.word	0x40022100
 8002080:	40022300 	.word	0x40022300
 8002084:	58026300 	.word	0x58026300
 8002088:	58026000 	.word	0x58026000
 800208c:	fffff0e0 	.word	0xfffff0e0

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <__NVIC_SetPriorityGrouping+0x40>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020be:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <__NVIC_SetPriorityGrouping+0x40>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00
 80020d4:	05fa0000 	.word	0x05fa0000

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db0a      	blt.n	800211e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	490c      	ldr	r1, [pc, #48]	; (8002140 <__NVIC_SetPriority+0x4c>)
 800210e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	440b      	add	r3, r1
 8002118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800211c:	e00a      	b.n	8002134 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4908      	ldr	r1, [pc, #32]	; (8002144 <__NVIC_SetPriority+0x50>)
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3b04      	subs	r3, #4
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	440b      	add	r3, r1
 8002132:	761a      	strb	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f1c3 0307 	rsb	r3, r3, #7
 8002162:	2b04      	cmp	r3, #4
 8002164:	bf28      	it	cs
 8002166:	2304      	movcs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3304      	adds	r3, #4
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <NVIC_EncodePriority+0x30>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3b03      	subs	r3, #3
 8002176:	e000      	b.n	800217a <NVIC_EncodePriority+0x32>
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	401a      	ands	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43d9      	mvns	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	4313      	orrs	r3, r2
         );
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	; 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c0:	d301      	bcc.n	80021c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00f      	b.n	80021e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <SysTick_Config+0x40>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ce:	210f      	movs	r1, #15
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f7ff ff8e 	bl	80020f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <SysTick_Config+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <SysTick_Config+0x40>)
 80021e0:	2207      	movs	r2, #7
 80021e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	e000e010 	.word	0xe000e010

080021f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff47 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002218:	f7ff ff5e 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 800221c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff90 	bl	8002148 <NVIC_EncodePriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff5f 	bl	80020f4 <__NVIC_SetPriority>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffb2 	bl	80021b0 <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002266:	4b89      	ldr	r3, [pc, #548]	; (800248c <HAL_GPIO_Init+0x234>)
 8002268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800226a:	e194      	b.n	8002596 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8186 	beq.w	8002590 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d005      	beq.n	800229c <HAL_GPIO_Init+0x44>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d130      	bne.n	80022fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022d2:	2201      	movs	r2, #1
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 0201 	and.w	r2, r3, #1
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b03      	cmp	r3, #3
 8002308:	d017      	beq.n	800233a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	2203      	movs	r2, #3
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d123      	bne.n	800238e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	08da      	lsrs	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3208      	adds	r2, #8
 800234e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	220f      	movs	r2, #15
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3208      	adds	r2, #8
 8002388:	69b9      	ldr	r1, [r7, #24]
 800238a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0203 	and.w	r2, r3, #3
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80e0 	beq.w	8002590 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d0:	4b2f      	ldr	r3, [pc, #188]	; (8002490 <HAL_GPIO_Init+0x238>)
 80023d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023d6:	4a2e      	ldr	r2, [pc, #184]	; (8002490 <HAL_GPIO_Init+0x238>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_GPIO_Init+0x238>)
 80023e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ee:	4a29      	ldr	r2, [pc, #164]	; (8002494 <HAL_GPIO_Init+0x23c>)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	220f      	movs	r2, #15
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a20      	ldr	r2, [pc, #128]	; (8002498 <HAL_GPIO_Init+0x240>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d052      	beq.n	80024c0 <HAL_GPIO_Init+0x268>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a1f      	ldr	r2, [pc, #124]	; (800249c <HAL_GPIO_Init+0x244>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d031      	beq.n	8002486 <HAL_GPIO_Init+0x22e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <HAL_GPIO_Init+0x248>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d02b      	beq.n	8002482 <HAL_GPIO_Init+0x22a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_GPIO_Init+0x24c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d025      	beq.n	800247e <HAL_GPIO_Init+0x226>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_GPIO_Init+0x250>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01f      	beq.n	800247a <HAL_GPIO_Init+0x222>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <HAL_GPIO_Init+0x254>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_GPIO_Init+0x21e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_GPIO_Init+0x258>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0x21a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a19      	ldr	r2, [pc, #100]	; (80024b4 <HAL_GPIO_Init+0x25c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_Init+0x216>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <HAL_GPIO_Init+0x260>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x212>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_GPIO_Init+0x264>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_GPIO_Init+0x20e>
 8002462:	2309      	movs	r3, #9
 8002464:	e02d      	b.n	80024c2 <HAL_GPIO_Init+0x26a>
 8002466:	230a      	movs	r3, #10
 8002468:	e02b      	b.n	80024c2 <HAL_GPIO_Init+0x26a>
 800246a:	2308      	movs	r3, #8
 800246c:	e029      	b.n	80024c2 <HAL_GPIO_Init+0x26a>
 800246e:	2307      	movs	r3, #7
 8002470:	e027      	b.n	80024c2 <HAL_GPIO_Init+0x26a>
 8002472:	2306      	movs	r3, #6
 8002474:	e025      	b.n	80024c2 <HAL_GPIO_Init+0x26a>
 8002476:	2305      	movs	r3, #5
 8002478:	e023      	b.n	80024c2 <HAL_GPIO_Init+0x26a>
 800247a:	2304      	movs	r3, #4
 800247c:	e021      	b.n	80024c2 <HAL_GPIO_Init+0x26a>
 800247e:	2303      	movs	r3, #3
 8002480:	e01f      	b.n	80024c2 <HAL_GPIO_Init+0x26a>
 8002482:	2302      	movs	r3, #2
 8002484:	e01d      	b.n	80024c2 <HAL_GPIO_Init+0x26a>
 8002486:	2301      	movs	r3, #1
 8002488:	e01b      	b.n	80024c2 <HAL_GPIO_Init+0x26a>
 800248a:	bf00      	nop
 800248c:	58000080 	.word	0x58000080
 8002490:	58024400 	.word	0x58024400
 8002494:	58000400 	.word	0x58000400
 8002498:	58020000 	.word	0x58020000
 800249c:	58020400 	.word	0x58020400
 80024a0:	58020800 	.word	0x58020800
 80024a4:	58020c00 	.word	0x58020c00
 80024a8:	58021000 	.word	0x58021000
 80024ac:	58021400 	.word	0x58021400
 80024b0:	58021800 	.word	0x58021800
 80024b4:	58021c00 	.word	0x58021c00
 80024b8:	58022000 	.word	0x58022000
 80024bc:	58022400 	.word	0x58022400
 80024c0:	2300      	movs	r3, #0
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	f002 0203 	and.w	r2, r2, #3
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	4093      	lsls	r3, r2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d2:	4938      	ldr	r1, [pc, #224]	; (80025b4 <HAL_GPIO_Init+0x35c>)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800250e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	3301      	adds	r3, #1
 8002594:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f47f ae63 	bne.w	800226c <HAL_GPIO_Init+0x14>
  }
}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	3724      	adds	r7, #36	; 0x24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	58000400 	.word	0x58000400

080025b8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80025c0:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <HAL_HSEM_FastTake+0x2c>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3320      	adds	r3, #32
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_HSEM_FastTake+0x30>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	58026400 	.word	0x58026400
 80025e8:	80000300 	.word	0x80000300

080025ec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80025f6:	4906      	ldr	r1, [pc, #24]	; (8002610 <HAL_HSEM_Release+0x24>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	58026400 	.word	0x58026400

08002614 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800261c:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	2b06      	cmp	r3, #6
 8002626:	d00a      	beq.n	800263e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002628:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e040      	b.n	80026bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e03e      	b.n	80026bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002646:	491f      	ldr	r1, [pc, #124]	; (80026c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4313      	orrs	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800264e:	f7fe f9ab 	bl	80009a8 <HAL_GetTick>
 8002652:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002654:	e009      	b.n	800266a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002656:	f7fe f9a7 	bl	80009a8 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002664:	d901      	bls.n	800266a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e028      	b.n	80026bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800266a:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002676:	d1ee      	bne.n	8002656 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b1e      	cmp	r3, #30
 800267c:	d008      	beq.n	8002690 <HAL_PWREx_ConfigSupply+0x7c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b2e      	cmp	r3, #46	; 0x2e
 8002682:	d005      	beq.n	8002690 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b1d      	cmp	r3, #29
 8002688:	d002      	beq.n	8002690 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b2d      	cmp	r3, #45	; 0x2d
 800268e:	d114      	bne.n	80026ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002690:	f7fe f98a 	bl	80009a8 <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002696:	e009      	b.n	80026ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002698:	f7fe f986 	bl	80009a8 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a6:	d901      	bls.n	80026ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e007      	b.n	80026bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d1ee      	bne.n	8002698 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	58024800 	.word	0x58024800

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08c      	sub	sp, #48	; 0x30
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f000 bc1d 	b.w	8002f16 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8087 	beq.w	80027f8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ea:	4b99      	ldr	r3, [pc, #612]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026f4:	4b96      	ldr	r3, [pc, #600]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d007      	beq.n	8002710 <HAL_RCC_OscConfig+0x48>
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	2b18      	cmp	r3, #24
 8002704:	d110      	bne.n	8002728 <HAL_RCC_OscConfig+0x60>
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d10b      	bne.n	8002728 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	4b8f      	ldr	r3, [pc, #572]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d06c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x12e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d168      	bne.n	80027f6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e3f6      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d106      	bne.n	8002740 <HAL_RCC_OscConfig+0x78>
 8002732:	4b87      	ldr	r3, [pc, #540]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a86      	ldr	r2, [pc, #536]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e02e      	b.n	800279e <HAL_RCC_OscConfig+0xd6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10c      	bne.n	8002762 <HAL_RCC_OscConfig+0x9a>
 8002748:	4b81      	ldr	r3, [pc, #516]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a80      	ldr	r2, [pc, #512]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800274e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b7e      	ldr	r3, [pc, #504]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a7d      	ldr	r2, [pc, #500]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800275a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e01d      	b.n	800279e <HAL_RCC_OscConfig+0xd6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800276a:	d10c      	bne.n	8002786 <HAL_RCC_OscConfig+0xbe>
 800276c:	4b78      	ldr	r3, [pc, #480]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a77      	ldr	r2, [pc, #476]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b75      	ldr	r3, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a74      	ldr	r2, [pc, #464]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	e00b      	b.n	800279e <HAL_RCC_OscConfig+0xd6>
 8002786:	4b72      	ldr	r3, [pc, #456]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a71      	ldr	r2, [pc, #452]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800278c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b6f      	ldr	r3, [pc, #444]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6e      	ldr	r2, [pc, #440]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d013      	beq.n	80027ce <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe f8ff 	bl	80009a8 <HAL_GetTick>
 80027aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ae:	f7fe f8fb 	bl	80009a8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	; 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e3aa      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027c0:	4b63      	ldr	r3, [pc, #396]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0xe6>
 80027cc:	e014      	b.n	80027f8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fe f8eb 	bl	80009a8 <HAL_GetTick>
 80027d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d6:	f7fe f8e7 	bl	80009a8 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b64      	cmp	r3, #100	; 0x64
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e396      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x10e>
 80027f4:	e000      	b.n	80027f8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80cb 	beq.w	800299c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002806:	4b52      	ldr	r3, [pc, #328]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800280e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002810:	4b4f      	ldr	r3, [pc, #316]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <HAL_RCC_OscConfig+0x164>
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	2b18      	cmp	r3, #24
 8002820:	d156      	bne.n	80028d0 <HAL_RCC_OscConfig+0x208>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d151      	bne.n	80028d0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282c:	4b48      	ldr	r3, [pc, #288]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_OscConfig+0x17c>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e368      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002844:	4b42      	ldr	r3, [pc, #264]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 0219 	bic.w	r2, r3, #25
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	493f      	ldr	r1, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002856:	f7fe f8a7 	bl	80009a8 <HAL_GetTick>
 800285a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe f8a3 	bl	80009a8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e352      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002870:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	f7fe f8c4 	bl	8000a08 <HAL_GetREVID>
 8002880:	4603      	mov	r3, r0
 8002882:	f241 0203 	movw	r2, #4099	; 0x1003
 8002886:	4293      	cmp	r3, r2
 8002888:	d817      	bhi.n	80028ba <HAL_RCC_OscConfig+0x1f2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d108      	bne.n	80028a4 <HAL_RCC_OscConfig+0x1dc>
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800289a:	4a2d      	ldr	r2, [pc, #180]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a2:	e07b      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	031b      	lsls	r3, r3, #12
 80028b2:	4927      	ldr	r1, [pc, #156]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b8:	e070      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b25      	ldr	r3, [pc, #148]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	061b      	lsls	r3, r3, #24
 80028c8:	4921      	ldr	r1, [pc, #132]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ce:	e065      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d048      	beq.n	800296a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 0219 	bic.w	r2, r3, #25
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	491a      	ldr	r1, [pc, #104]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe f85d 	bl	80009a8 <HAL_GetTick>
 80028ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f2:	f7fe f859 	bl	80009a8 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e308      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	f7fe f87a 	bl	8000a08 <HAL_GetREVID>
 8002914:	4603      	mov	r3, r0
 8002916:	f241 0203 	movw	r2, #4099	; 0x1003
 800291a:	4293      	cmp	r3, r2
 800291c:	d81a      	bhi.n	8002954 <HAL_RCC_OscConfig+0x28c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d108      	bne.n	8002938 <HAL_RCC_OscConfig+0x270>
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	6053      	str	r3, [r2, #4]
 8002936:	e031      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	031b      	lsls	r3, r3, #12
 8002946:	4902      	ldr	r1, [pc, #8]	; (8002950 <HAL_RCC_OscConfig+0x288>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
 800294c:	e026      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
 800294e:	bf00      	nop
 8002950:	58024400 	.word	0x58024400
 8002954:	4b9a      	ldr	r3, [pc, #616]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	4997      	ldr	r1, [pc, #604]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e018      	b.n	800299c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b95      	ldr	r3, [pc, #596]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a94      	ldr	r2, [pc, #592]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe f817 	bl	80009a8 <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe f813 	bl	80009a8 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e2c2      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002990:	4b8b      	ldr	r3, [pc, #556]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a9 	beq.w	8002afc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029aa:	4b85      	ldr	r3, [pc, #532]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029b4:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d007      	beq.n	80029d0 <HAL_RCC_OscConfig+0x308>
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b18      	cmp	r3, #24
 80029c4:	d13a      	bne.n	8002a3c <HAL_RCC_OscConfig+0x374>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d135      	bne.n	8002a3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029d0:	4b7b      	ldr	r3, [pc, #492]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x320>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	2b80      	cmp	r3, #128	; 0x80
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e296      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029e8:	f7fe f80e 	bl	8000a08 <HAL_GetREVID>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d817      	bhi.n	8002a26 <HAL_RCC_OscConfig+0x35e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d108      	bne.n	8002a10 <HAL_RCC_OscConfig+0x348>
 80029fe:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a06:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a0c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a0e:	e075      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a10:	4b6b      	ldr	r3, [pc, #428]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	069b      	lsls	r3, r3, #26
 8002a1e:	4968      	ldr	r1, [pc, #416]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a24:	e06a      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a26:	4b66      	ldr	r3, [pc, #408]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	061b      	lsls	r3, r3, #24
 8002a34:	4962      	ldr	r1, [pc, #392]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a3a:	e05f      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d042      	beq.n	8002aca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a44:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a5d      	ldr	r2, [pc, #372]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fd ffaa 	bl	80009a8 <HAL_GetTick>
 8002a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a58:	f7fd ffa6 	bl	80009a8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e255      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a6a:	4b55      	ldr	r3, [pc, #340]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a76:	f7fd ffc7 	bl	8000a08 <HAL_GetREVID>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d817      	bhi.n	8002ab4 <HAL_RCC_OscConfig+0x3ec>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d108      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3d6>
 8002a8c:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a94:	4a4a      	ldr	r2, [pc, #296]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002a96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a9a:	6053      	str	r3, [r2, #4]
 8002a9c:	e02e      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
 8002a9e:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	069b      	lsls	r3, r3, #26
 8002aac:	4944      	ldr	r1, [pc, #272]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
 8002ab2:	e023      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
 8002ab4:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	493f      	ldr	r1, [pc, #252]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60cb      	str	r3, [r1, #12]
 8002ac8:	e018      	b.n	8002afc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002aca:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a3c      	ldr	r2, [pc, #240]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fd ff67 	bl	80009a8 <HAL_GetTick>
 8002ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ade:	f7fd ff63 	bl	80009a8 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e212      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002af0:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d036      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d019      	beq.n	8002b44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fd ff44 	bl	80009a8 <HAL_GetTick>
 8002b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b24:	f7fd ff40 	bl	80009a8 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e1ef      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b36:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x45c>
 8002b42:	e018      	b.n	8002b76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b44:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b48:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fd ff2a 	bl	80009a8 <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b58:	f7fd ff26 	bl	80009a8 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1d5      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d039      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b96:	f7fd ff07 	bl	80009a8 <HAL_GetTick>
 8002b9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b9e:	f7fd ff03 	bl	80009a8 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1b2      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x4d6>
 8002bbc:	e01b      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
 8002bbe:	bf00      	nop
 8002bc0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bc4:	4b9b      	ldr	r3, [pc, #620]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a9a      	ldr	r2, [pc, #616]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bd0:	f7fd feea 	bl	80009a8 <HAL_GetTick>
 8002bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bd8:	f7fd fee6 	bl	80009a8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e195      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bea:	4b92      	ldr	r3, [pc, #584]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8081 	beq.w	8002d06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c04:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <HAL_RCC_OscConfig+0x770>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a8b      	ldr	r2, [pc, #556]	; (8002e38 <HAL_RCC_OscConfig+0x770>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c10:	f7fd feca 	bl	80009a8 <HAL_GetTick>
 8002c14:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c18:	f7fd fec6 	bl	80009a8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e175      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c2a:	4b83      	ldr	r3, [pc, #524]	; (8002e38 <HAL_RCC_OscConfig+0x770>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d106      	bne.n	8002c4c <HAL_RCC_OscConfig+0x584>
 8002c3e:	4b7d      	ldr	r3, [pc, #500]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a7c      	ldr	r2, [pc, #496]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	e02d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5e0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x5a6>
 8002c54:	4b77      	ldr	r3, [pc, #476]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a76      	ldr	r2, [pc, #472]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	4b74      	ldr	r3, [pc, #464]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a73      	ldr	r2, [pc, #460]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c66:	f023 0304 	bic.w	r3, r3, #4
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6c:	e01c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5e0>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5c8>
 8002c76:	4b6f      	ldr	r3, [pc, #444]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a6e      	ldr	r2, [pc, #440]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	f043 0304 	orr.w	r3, r3, #4
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
 8002c82:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a6b      	ldr	r2, [pc, #428]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5e0>
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4a67      	ldr	r2, [pc, #412]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9c:	4b65      	ldr	r3, [pc, #404]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a64      	ldr	r2, [pc, #400]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002ca2:	f023 0304 	bic.w	r3, r3, #4
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d015      	beq.n	8002cdc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fd fe7a 	bl	80009a8 <HAL_GetTick>
 8002cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb8:	f7fd fe76 	bl	80009a8 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e123      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cce:	4b59      	ldr	r3, [pc, #356]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0ee      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x5f0>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fd fe64 	bl	80009a8 <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce4:	f7fd fe60 	bl	80009a8 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e10d      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cfa:	4b4e      	ldr	r3, [pc, #312]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ee      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8102 	beq.w	8002f14 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d10:	4b48      	ldr	r3, [pc, #288]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d18:	2b18      	cmp	r3, #24
 8002d1a:	f000 80bd 	beq.w	8002e98 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	f040 809e 	bne.w	8002e64 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a41      	ldr	r2, [pc, #260]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fd fe38 	bl	80009a8 <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fd fe34 	bl	80009a8 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0e3      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4e:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d5a:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d5e:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <HAL_RCC_OscConfig+0x774>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	4931      	ldr	r1, [pc, #196]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	628b      	str	r3, [r1, #40]	; 0x28
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	3b01      	subs	r3, #1
 8002d84:	025b      	lsls	r3, r3, #9
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	061b      	lsls	r3, r3, #24
 8002da0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002da4:	4923      	ldr	r1, [pc, #140]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_RCC_OscConfig+0x778>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dc2:	00d2      	lsls	r2, r2, #3
 8002dc4:	491b      	ldr	r1, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002dca:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f023 020c 	bic.w	r2, r3, #12
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4917      	ldr	r1, [pc, #92]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ddc:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	f023 0202 	bic.w	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	4912      	ldr	r1, [pc, #72]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <HAL_RCC_OscConfig+0x76c>)
 8002e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7fd fdbd 	bl	80009a8 <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e30:	e011      	b.n	8002e56 <HAL_RCC_OscConfig+0x78e>
 8002e32:	bf00      	nop
 8002e34:	58024400 	.word	0x58024400
 8002e38:	58024800 	.word	0x58024800
 8002e3c:	fffffc0c 	.word	0xfffffc0c
 8002e40:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fd fdb0 	bl	80009a8 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e05f      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e56:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_RCC_OscConfig+0x858>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x77c>
 8002e62:	e057      	b.n	8002f14 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e64:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <HAL_RCC_OscConfig+0x858>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a2d      	ldr	r2, [pc, #180]	; (8002f20 <HAL_RCC_OscConfig+0x858>)
 8002e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fd fd9a 	bl	80009a8 <HAL_GetTick>
 8002e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fd fd96 	bl	80009a8 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e045      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e8a:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCC_OscConfig+0x858>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x7b0>
 8002e96:	e03d      	b.n	8002f14 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_RCC_OscConfig+0x858>)
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_RCC_OscConfig+0x858>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d031      	beq.n	8002f10 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f003 0203 	and.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d12a      	bne.n	8002f10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d122      	bne.n	8002f10 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d11a      	bne.n	8002f10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	0a5b      	lsrs	r3, r3, #9
 8002ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d111      	bne.n	8002f10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	0c1b      	lsrs	r3, r3, #16
 8002ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d108      	bne.n	8002f10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	0e1b      	lsrs	r3, r3, #24
 8002f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3730      	adds	r7, #48	; 0x30
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	58024400 	.word	0x58024400

08002f24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e19c      	b.n	8003272 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b8a      	ldr	r3, [pc, #552]	; (8003164 <HAL_RCC_ClockConfig+0x240>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d910      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b87      	ldr	r3, [pc, #540]	; (8003164 <HAL_RCC_ClockConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 020f 	bic.w	r2, r3, #15
 8002f4e:	4985      	ldr	r1, [pc, #532]	; (8003164 <HAL_RCC_ClockConfig+0x240>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b83      	ldr	r3, [pc, #524]	; (8003164 <HAL_RCC_ClockConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e184      	b.n	8003272 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	4b7b      	ldr	r3, [pc, #492]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d908      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f84:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	4975      	ldr	r1, [pc, #468]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d010      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	4b70      	ldr	r3, [pc, #448]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d908      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fb2:	4b6d      	ldr	r3, [pc, #436]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	496a      	ldr	r1, [pc, #424]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	4b64      	ldr	r3, [pc, #400]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d908      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fe0:	4b61      	ldr	r3, [pc, #388]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	495e      	ldr	r1, [pc, #376]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	4b59      	ldr	r3, [pc, #356]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800300a:	429a      	cmp	r2, r3
 800300c:	d908      	bls.n	8003020 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800300e:	4b56      	ldr	r3, [pc, #344]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	4953      	ldr	r1, [pc, #332]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 800301c:	4313      	orrs	r3, r2
 800301e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d010      	beq.n	800304e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	4b4d      	ldr	r3, [pc, #308]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	429a      	cmp	r2, r3
 800303a:	d908      	bls.n	800304e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f023 020f 	bic.w	r2, r3, #15
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4947      	ldr	r1, [pc, #284]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 800304a:	4313      	orrs	r3, r2
 800304c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d055      	beq.n	8003106 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	4940      	ldr	r1, [pc, #256]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8003068:	4313      	orrs	r3, r2
 800306a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d107      	bne.n	8003084 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003074:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d121      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0f6      	b.n	8003272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d107      	bne.n	800309c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800308c:	4b36      	ldr	r3, [pc, #216]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d115      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0ea      	b.n	8003272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030a4:	4b30      	ldr	r3, [pc, #192]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0de      	b.n	8003272 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b4:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0d6      	b.n	8003272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f023 0207 	bic.w	r2, r3, #7
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4925      	ldr	r1, [pc, #148]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d6:	f7fd fc67 	bl	80009a8 <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030de:	f7fd fc63 	bl	80009a8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0be      	b.n	8003272 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f4:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	429a      	cmp	r2, r3
 8003104:	d1eb      	bne.n	80030de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d010      	beq.n	8003134 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	429a      	cmp	r2, r3
 8003120:	d208      	bcs.n	8003134 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f023 020f 	bic.w	r2, r3, #15
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	490e      	ldr	r1, [pc, #56]	; (8003168 <HAL_RCC_ClockConfig+0x244>)
 8003130:	4313      	orrs	r3, r2
 8003132:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_ClockConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d214      	bcs.n	800316c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_RCC_ClockConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 020f 	bic.w	r2, r3, #15
 800314a:	4906      	ldr	r1, [pc, #24]	; (8003164 <HAL_RCC_ClockConfig+0x240>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <HAL_RCC_ClockConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e086      	b.n	8003272 <HAL_RCC_ClockConfig+0x34e>
 8003164:	52002000 	.word	0x52002000
 8003168:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d010      	beq.n	800319a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	4b3f      	ldr	r3, [pc, #252]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003184:	429a      	cmp	r2, r3
 8003186:	d208      	bcs.n	800319a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003188:	4b3c      	ldr	r3, [pc, #240]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	4939      	ldr	r1, [pc, #228]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 8003196:	4313      	orrs	r3, r2
 8003198:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d010      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	4b34      	ldr	r3, [pc, #208]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d208      	bcs.n	80031c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031b6:	4b31      	ldr	r3, [pc, #196]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	492e      	ldr	r1, [pc, #184]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	4b28      	ldr	r3, [pc, #160]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d208      	bcs.n	80031f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	4922      	ldr	r1, [pc, #136]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d010      	beq.n	8003224 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800320e:	429a      	cmp	r2, r3
 8003210:	d208      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4917      	ldr	r1, [pc, #92]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 8003220:	4313      	orrs	r3, r2
 8003222:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003224:	f000 f834 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b14      	ldr	r3, [pc, #80]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	4912      	ldr	r1, [pc, #72]	; (8003280 <HAL_RCC_ClockConfig+0x35c>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
 8003240:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003242:	4b0e      	ldr	r3, [pc, #56]	; (800327c <HAL_RCC_ClockConfig+0x358>)
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <HAL_RCC_ClockConfig+0x35c>)
 800324c:	5cd3      	ldrb	r3, [r2, r3]
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
 8003258:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <HAL_RCC_ClockConfig+0x360>)
 800325a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x364>)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x368>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fb54 	bl	8000914 <HAL_InitTick>
 800326c:	4603      	mov	r3, r0
 800326e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003270:	7bfb      	ldrb	r3, [r7, #15]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	58024400 	.word	0x58024400
 8003280:	0800596c 	.word	0x0800596c
 8003284:	24000004 	.word	0x24000004
 8003288:	24000000 	.word	0x24000000
 800328c:	24000008 	.word	0x24000008

08003290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003296:	4bb3      	ldr	r3, [pc, #716]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800329e:	2b18      	cmp	r3, #24
 80032a0:	f200 8155 	bhi.w	800354e <HAL_RCC_GetSysClockFreq+0x2be>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	08003311 	.word	0x08003311
 80032b0:	0800354f 	.word	0x0800354f
 80032b4:	0800354f 	.word	0x0800354f
 80032b8:	0800354f 	.word	0x0800354f
 80032bc:	0800354f 	.word	0x0800354f
 80032c0:	0800354f 	.word	0x0800354f
 80032c4:	0800354f 	.word	0x0800354f
 80032c8:	0800354f 	.word	0x0800354f
 80032cc:	08003337 	.word	0x08003337
 80032d0:	0800354f 	.word	0x0800354f
 80032d4:	0800354f 	.word	0x0800354f
 80032d8:	0800354f 	.word	0x0800354f
 80032dc:	0800354f 	.word	0x0800354f
 80032e0:	0800354f 	.word	0x0800354f
 80032e4:	0800354f 	.word	0x0800354f
 80032e8:	0800354f 	.word	0x0800354f
 80032ec:	0800333d 	.word	0x0800333d
 80032f0:	0800354f 	.word	0x0800354f
 80032f4:	0800354f 	.word	0x0800354f
 80032f8:	0800354f 	.word	0x0800354f
 80032fc:	0800354f 	.word	0x0800354f
 8003300:	0800354f 	.word	0x0800354f
 8003304:	0800354f 	.word	0x0800354f
 8003308:	0800354f 	.word	0x0800354f
 800330c:	08003343 	.word	0x08003343
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003310:	4b94      	ldr	r3, [pc, #592]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800331c:	4b91      	ldr	r3, [pc, #580]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	08db      	lsrs	r3, r3, #3
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	4a90      	ldr	r2, [pc, #576]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
 800332c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800332e:	e111      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003330:	4b8d      	ldr	r3, [pc, #564]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003332:	61bb      	str	r3, [r7, #24]
    break;
 8003334:	e10e      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003336:	4b8d      	ldr	r3, [pc, #564]	; (800356c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003338:	61bb      	str	r3, [r7, #24]
    break;
 800333a:	e10b      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800333c:	4b8c      	ldr	r3, [pc, #560]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800333e:	61bb      	str	r3, [r7, #24]
    break;
 8003340:	e108      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003342:	4b88      	ldr	r3, [pc, #544]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800334c:	4b85      	ldr	r3, [pc, #532]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003356:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003358:	4b82      	ldr	r3, [pc, #520]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003362:	4b80      	ldr	r3, [pc, #512]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003366:	08db      	lsrs	r3, r3, #3
 8003368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80e1 	beq.w	8003548 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b02      	cmp	r3, #2
 800338a:	f000 8083 	beq.w	8003494 <HAL_RCC_GetSysClockFreq+0x204>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b02      	cmp	r3, #2
 8003392:	f200 80a1 	bhi.w	80034d8 <HAL_RCC_GetSysClockFreq+0x248>
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x114>
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d056      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033a2:	e099      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a4:	4b6f      	ldr	r3, [pc, #444]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d02d      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033b0:	4b6c      	ldr	r3, [pc, #432]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	08db      	lsrs	r3, r3, #3
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	4a6b      	ldr	r2, [pc, #428]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033da:	4b62      	ldr	r3, [pc, #392]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003406:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800340a:	e087      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003416:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e8>
 800341a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341e:	4b51      	ldr	r3, [pc, #324]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003432:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800343e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800344e:	e065      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800357c <HAL_RCC_GetSysClockFreq+0x2ec>
 800345e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003462:	4b40      	ldr	r3, [pc, #256]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003472:	ed97 6a02 	vldr	s12, [r7, #8]
 8003476:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2e4>
 800347a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800347e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003492:	e043      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034d6:	e021      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800357c <HAL_RCC_GetSysClockFreq+0x2ec>
 80034e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ea:	4b1e      	ldr	r3, [pc, #120]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80034fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800350e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800351a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	0a5b      	lsrs	r3, r3, #9
 8003522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003526:	3301      	adds	r3, #1
 8003528:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003534:	edd7 6a07 	vldr	s13, [r7, #28]
 8003538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800353c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003540:	ee17 3a90 	vmov	r3, s15
 8003544:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003546:	e005      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
    break;
 800354c:	e002      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003550:	61bb      	str	r3, [r7, #24]
    break;
 8003552:	bf00      	nop
  }

  return sysclockfreq;
 8003554:	69bb      	ldr	r3, [r7, #24]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3724      	adds	r7, #36	; 0x24
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	58024400 	.word	0x58024400
 8003568:	03d09000 	.word	0x03d09000
 800356c:	003d0900 	.word	0x003d0900
 8003570:	017d7840 	.word	0x017d7840
 8003574:	46000000 	.word	0x46000000
 8003578:	4c742400 	.word	0x4c742400
 800357c:	4a742400 	.word	0x4a742400
 8003580:	4bbebc20 	.word	0x4bbebc20

08003584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800358a:	f7ff fe81 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800358e:	4602      	mov	r2, r0
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	490f      	ldr	r1, [pc, #60]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800359c:	5ccb      	ldrb	r3, [r1, r3]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	4a07      	ldr	r2, [pc, #28]	; (80035dc <HAL_RCC_GetHCLKFreq+0x58>)
 80035c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035c2:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <HAL_RCC_GetHCLKFreq+0x58>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	58024400 	.word	0x58024400
 80035d8:	0800596c 	.word	0x0800596c
 80035dc:	24000004 	.word	0x24000004
 80035e0:	24000000 	.word	0x24000000

080035e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035ec:	2300      	movs	r3, #0
 80035ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f0:	2300      	movs	r3, #0
 80035f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d03f      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003604:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003608:	d02a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800360a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800360e:	d824      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003614:	d018      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800361a:	d81e      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003624:	d007      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003626:	e018      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003628:	4ba3      	ldr	r3, [pc, #652]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	4aa2      	ldr	r2, [pc, #648]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003634:	e015      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	2102      	movs	r1, #2
 800363c:	4618      	mov	r0, r3
 800363e:	f001 fff9 	bl	8005634 <RCCEx_PLL2_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003646:	e00c      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3324      	adds	r3, #36	; 0x24
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f002 f8a2 	bl	8005798 <RCCEx_PLL3_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	75fb      	strb	r3, [r7, #23]
      break;
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003662:	7dfb      	ldrb	r3, [r7, #23]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003668:	4b93      	ldr	r3, [pc, #588]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003674:	4990      	ldr	r1, [pc, #576]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	650b      	str	r3, [r1, #80]	; 0x50
 800367a:	e001      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03d      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	2b04      	cmp	r3, #4
 8003692:	d826      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036b1 	.word	0x080036b1
 80036a0:	080036bf 	.word	0x080036bf
 80036a4:	080036d1 	.word	0x080036d1
 80036a8:	080036e9 	.word	0x080036e9
 80036ac:	080036e9 	.word	0x080036e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b0:	4b81      	ldr	r3, [pc, #516]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	4a80      	ldr	r2, [pc, #512]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036bc:	e015      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 ffb5 	bl	8005634 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ce:	e00c      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3324      	adds	r3, #36	; 0x24
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f002 f85e 	bl	8005798 <RCCEx_PLL3_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e0:	e003      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
      break;
 80036e6:	e000      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036f0:	4b71      	ldr	r3, [pc, #452]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	f023 0207 	bic.w	r2, r3, #7
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	496e      	ldr	r1, [pc, #440]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	650b      	str	r3, [r1, #80]	; 0x50
 8003702:	e001      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003710:	2b00      	cmp	r3, #0
 8003712:	d042      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371c:	d02b      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800371e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003722:	d825      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003724:	2bc0      	cmp	r3, #192	; 0xc0
 8003726:	d028      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003728:	2bc0      	cmp	r3, #192	; 0xc0
 800372a:	d821      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d016      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d81d      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d007      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800373c:	e018      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373e:	4b5e      	ldr	r3, [pc, #376]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	4a5d      	ldr	r2, [pc, #372]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003748:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800374a:	e017      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f001 ff6e 	bl	8005634 <RCCEx_PLL2_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800375c:	e00e      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3324      	adds	r3, #36	; 0x24
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f002 f817 	bl	8005798 <RCCEx_PLL3_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800376e:	e005      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
      break;
 8003774:	e002      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800377a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003782:	4b4d      	ldr	r3, [pc, #308]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003786:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	494a      	ldr	r1, [pc, #296]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	650b      	str	r3, [r1, #80]	; 0x50
 8003794:	e001      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003796:	7dfb      	ldrb	r3, [r7, #23]
 8003798:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d049      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037b0:	d030      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80037b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037b6:	d82a      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037bc:	d02c      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80037be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037c2:	d824      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c8:	d018      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80037ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ce:	d81e      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037d8:	d007      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80037da:	e018      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037dc:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	4a35      	ldr	r2, [pc, #212]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037e8:	e017      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 ff1f 	bl	8005634 <RCCEx_PLL2_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037fa:	e00e      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3324      	adds	r3, #36	; 0x24
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f001 ffc8 	bl	8005798 <RCCEx_PLL3_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800380c:	e005      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
      break;
 8003812:	e002      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003814:	bf00      	nop
 8003816:	e000      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003820:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003824:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800382e:	4922      	ldr	r1, [pc, #136]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	658b      	str	r3, [r1, #88]	; 0x58
 8003834:	e001      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003842:	2b00      	cmp	r3, #0
 8003844:	d04b      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800384c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003850:	d030      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003852:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003856:	d82a      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003858:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800385c:	d02e      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800385e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003862:	d824      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003868:	d018      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800386a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800386e:	d81e      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003878:	d007      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800387a:	e018      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387c:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4a0d      	ldr	r2, [pc, #52]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003888:	e019      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f001 fecf 	bl	8005634 <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800389a:	e010      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3324      	adds	r3, #36	; 0x24
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 ff78 	bl	8005798 <RCCEx_PLL3_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038ac:	e007      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
      break;
 80038b2:	e004      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80038b4:	bf00      	nop
 80038b6:	e002      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80038b8:	58024400 	.word	0x58024400
      break;
 80038bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038c4:	4b99      	ldr	r3, [pc, #612]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038d2:	4996      	ldr	r1, [pc, #600]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	658b      	str	r3, [r1, #88]	; 0x58
 80038d8:	e001      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d032      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ee:	2b30      	cmp	r3, #48	; 0x30
 80038f0:	d01c      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80038f2:	2b30      	cmp	r3, #48	; 0x30
 80038f4:	d817      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d00c      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d813      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d016      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003902:	2b10      	cmp	r3, #16
 8003904:	d10f      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003906:	4b89      	ldr	r3, [pc, #548]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	4a88      	ldr	r2, [pc, #544]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800390c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003910:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003912:	e00e      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	2102      	movs	r1, #2
 800391a:	4618      	mov	r0, r3
 800391c:	f001 fe8a 	bl	8005634 <RCCEx_PLL2_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003924:	e005      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
      break;
 800392a:	e002      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800392c:	bf00      	nop
 800392e:	e000      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d109      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003938:	4b7c      	ldr	r3, [pc, #496]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003944:	4979      	ldr	r1, [pc, #484]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003946:	4313      	orrs	r3, r2
 8003948:	64cb      	str	r3, [r1, #76]	; 0x4c
 800394a:	e001      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d047      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003964:	d030      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800396a:	d82a      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800396c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003970:	d02c      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003972:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003976:	d824      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397c:	d018      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800397e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003982:	d81e      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398c:	d007      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800398e:	e018      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003990:	4b66      	ldr	r3, [pc, #408]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	4a65      	ldr	r2, [pc, #404]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800399c:	e017      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 fe45 	bl	8005634 <RCCEx_PLL2_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039ae:	e00e      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3324      	adds	r3, #36	; 0x24
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f001 feee 	bl	8005798 <RCCEx_PLL3_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039c0:	e005      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	75fb      	strb	r3, [r7, #23]
      break;
 80039c6:	e002      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80039c8:	bf00      	nop
 80039ca:	e000      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80039cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039d4:	4b55      	ldr	r3, [pc, #340]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	4952      	ldr	r1, [pc, #328]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	650b      	str	r3, [r1, #80]	; 0x50
 80039e6:	e001      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d049      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a00:	d02e      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a06:	d828      	bhi.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a0c:	d02a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003a0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a12:	d822      	bhi.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a18:	d026      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003a1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a1e:	d81c      	bhi.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a24:	d010      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a2a:	d816      	bhi.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01d      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a34:	d111      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 fdf9 	bl	8005634 <RCCEx_PLL2_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a46:	e012      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3324      	adds	r3, #36	; 0x24
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 fea2 	bl	8005798 <RCCEx_PLL3_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a58:	e009      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5e:	e006      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a60:	bf00      	nop
 8003a62:	e004      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a64:	bf00      	nop
 8003a66:	e002      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a68:	bf00      	nop
 8003a6a:	e000      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6e:	7dfb      	ldrb	r3, [r7, #23]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a74:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a78:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a80:	492a      	ldr	r1, [pc, #168]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	650b      	str	r3, [r1, #80]	; 0x50
 8003a86:	e001      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d04d      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa2:	d02e      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa8:	d828      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d02a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab4:	d822      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ab6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aba:	d026      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003abc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ac0:	d81c      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac6:	d010      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003acc:	d816      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01d      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ad6:	d111      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	2101      	movs	r1, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 fda8 	bl	8005634 <RCCEx_PLL2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ae8:	e012      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3324      	adds	r3, #36	; 0x24
 8003aee:	2101      	movs	r1, #1
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fe51 	bl	8005798 <RCCEx_PLL3_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003afa:	e009      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
      break;
 8003b00:	e006      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b02:	bf00      	nop
 8003b04:	e004      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b06:	bf00      	nop
 8003b08:	e002      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e000      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b16:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b24:	4901      	ldr	r1, [pc, #4]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	658b      	str	r3, [r1, #88]	; 0x58
 8003b2a:	e003      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003b2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d02f      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b48:	d00e      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b4e:	d814      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b58:	d10f      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5a:	4baf      	ldr	r3, [pc, #700]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	4aae      	ldr	r2, [pc, #696]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b66:	e00c      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 fd60 	bl	8005634 <RCCEx_PLL2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b78:	e003      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7e:	e000      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d109      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b88:	4ba3      	ldr	r3, [pc, #652]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b94:	49a0      	ldr	r1, [pc, #640]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	650b      	str	r3, [r1, #80]	; 0x50
 8003b9a:	e001      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d032      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d81b      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003bf3 	.word	0x08003bf3
 8003bc0:	08003bcd 	.word	0x08003bcd
 8003bc4:	08003bdb 	.word	0x08003bdb
 8003bc8:	08003bf3 	.word	0x08003bf3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bcc:	4b92      	ldr	r3, [pc, #584]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	4a91      	ldr	r2, [pc, #580]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bd8:	e00c      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	2102      	movs	r1, #2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f001 fd27 	bl	8005634 <RCCEx_PLL2_Config>
 8003be6:	4603      	mov	r3, r0
 8003be8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bea:	e003      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	75fb      	strb	r3, [r7, #23]
      break;
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bfa:	4b87      	ldr	r3, [pc, #540]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	f023 0203 	bic.w	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	4984      	ldr	r1, [pc, #528]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c0c:	e001      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8086 	beq.w	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c20:	4b7e      	ldr	r3, [pc, #504]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7d      	ldr	r2, [pc, #500]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c2c:	f7fc febc 	bl	80009a8 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c32:	e009      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c34:	f7fc feb8 	bl	80009a8 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d902      	bls.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	75fb      	strb	r3, [r7, #23]
        break;
 8003c46:	e005      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c48:	4b74      	ldr	r3, [pc, #464]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ef      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d166      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c5a:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c64:	4053      	eors	r3, r2
 8003c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d013      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c6e:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c76:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c78:	4b67      	ldr	r3, [pc, #412]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a66      	ldr	r2, [pc, #408]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c84:	4b64      	ldr	r3, [pc, #400]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4a63      	ldr	r2, [pc, #396]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c90:	4a61      	ldr	r2, [pc, #388]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca0:	d115      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fc fe81 	bl	80009a8 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ca8:	e00b      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fc fe7d 	bl	80009a8 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d902      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	75fb      	strb	r3, [r7, #23]
            break;
 8003cc0:	e005      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc2:	4b55      	ldr	r3, [pc, #340]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0ed      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d126      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ce2:	d10d      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003ce4:	4b4c      	ldr	r3, [pc, #304]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cf2:	0919      	lsrs	r1, r3, #4
 8003cf4:	4b4a      	ldr	r3, [pc, #296]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003cf6:	400b      	ands	r3, r1
 8003cf8:	4947      	ldr	r1, [pc, #284]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	610b      	str	r3, [r1, #16]
 8003cfe:	e005      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003d00:	4b45      	ldr	r3, [pc, #276]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	4a44      	ldr	r2, [pc, #272]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d0a:	6113      	str	r3, [r2, #16]
 8003d0c:	4b42      	ldr	r3, [pc, #264]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1a:	493f      	ldr	r1, [pc, #252]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	670b      	str	r3, [r1, #112]	; 0x70
 8003d20:	e004      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	75bb      	strb	r3, [r7, #22]
 8003d26:	e001      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8085 	beq.w	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d3e:	2b28      	cmp	r3, #40	; 0x28
 8003d40:	d866      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003e25 	.word	0x08003e25
 8003d4c:	08003e11 	.word	0x08003e11
 8003d50:	08003e11 	.word	0x08003e11
 8003d54:	08003e11 	.word	0x08003e11
 8003d58:	08003e11 	.word	0x08003e11
 8003d5c:	08003e11 	.word	0x08003e11
 8003d60:	08003e11 	.word	0x08003e11
 8003d64:	08003e11 	.word	0x08003e11
 8003d68:	08003ded 	.word	0x08003ded
 8003d6c:	08003e11 	.word	0x08003e11
 8003d70:	08003e11 	.word	0x08003e11
 8003d74:	08003e11 	.word	0x08003e11
 8003d78:	08003e11 	.word	0x08003e11
 8003d7c:	08003e11 	.word	0x08003e11
 8003d80:	08003e11 	.word	0x08003e11
 8003d84:	08003e11 	.word	0x08003e11
 8003d88:	08003dff 	.word	0x08003dff
 8003d8c:	08003e11 	.word	0x08003e11
 8003d90:	08003e11 	.word	0x08003e11
 8003d94:	08003e11 	.word	0x08003e11
 8003d98:	08003e11 	.word	0x08003e11
 8003d9c:	08003e11 	.word	0x08003e11
 8003da0:	08003e11 	.word	0x08003e11
 8003da4:	08003e11 	.word	0x08003e11
 8003da8:	08003e25 	.word	0x08003e25
 8003dac:	08003e11 	.word	0x08003e11
 8003db0:	08003e11 	.word	0x08003e11
 8003db4:	08003e11 	.word	0x08003e11
 8003db8:	08003e11 	.word	0x08003e11
 8003dbc:	08003e11 	.word	0x08003e11
 8003dc0:	08003e11 	.word	0x08003e11
 8003dc4:	08003e11 	.word	0x08003e11
 8003dc8:	08003e25 	.word	0x08003e25
 8003dcc:	08003e11 	.word	0x08003e11
 8003dd0:	08003e11 	.word	0x08003e11
 8003dd4:	08003e11 	.word	0x08003e11
 8003dd8:	08003e11 	.word	0x08003e11
 8003ddc:	08003e11 	.word	0x08003e11
 8003de0:	08003e11 	.word	0x08003e11
 8003de4:	08003e11 	.word	0x08003e11
 8003de8:	08003e25 	.word	0x08003e25
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	2101      	movs	r1, #1
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 fc1e 	bl	8005634 <RCCEx_PLL2_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dfc:	e013      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3324      	adds	r3, #36	; 0x24
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f001 fcc7 	bl	8005798 <RCCEx_PLL3_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	75fb      	strb	r3, [r7, #23]
      break;
 8003e14:	e007      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e16:	bf00      	nop
 8003e18:	58024400 	.word	0x58024400
 8003e1c:	58024800 	.word	0x58024800
 8003e20:	00ffffcf 	.word	0x00ffffcf
      break;
 8003e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e2c:	4b96      	ldr	r3, [pc, #600]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e38:	4993      	ldr	r1, [pc, #588]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	654b      	str	r3, [r1, #84]	; 0x54
 8003e3e:	e001      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d038      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d821      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003ea3 	.word	0x08003ea3
 8003e64:	08003e79 	.word	0x08003e79
 8003e68:	08003e8b 	.word	0x08003e8b
 8003e6c:	08003ea3 	.word	0x08003ea3
 8003e70:	08003ea3 	.word	0x08003ea3
 8003e74:	08003ea3 	.word	0x08003ea3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 fbd8 	bl	8005634 <RCCEx_PLL2_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e88:	e00c      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fc81 	bl	8005798 <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e9a:	e003      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003eaa:	4b77      	ldr	r3, [pc, #476]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	f023 0207 	bic.w	r2, r3, #7
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb6:	4974      	ldr	r1, [pc, #464]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	654b      	str	r3, [r1, #84]	; 0x54
 8003ebc:	e001      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d03a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d821      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003ed8:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003f23 	.word	0x08003f23
 8003ee4:	08003ef9 	.word	0x08003ef9
 8003ee8:	08003f0b 	.word	0x08003f0b
 8003eec:	08003f23 	.word	0x08003f23
 8003ef0:	08003f23 	.word	0x08003f23
 8003ef4:	08003f23 	.word	0x08003f23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	2101      	movs	r1, #1
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 fb98 	bl	8005634 <RCCEx_PLL2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f08:	e00c      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3324      	adds	r3, #36	; 0x24
 8003f0e:	2101      	movs	r1, #1
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 fc41 	bl	8005798 <RCCEx_PLL3_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f1a:	e003      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f20:	e000      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f2a:	4b57      	ldr	r3, [pc, #348]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2e:	f023 0207 	bic.w	r2, r3, #7
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	4953      	ldr	r1, [pc, #332]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f3e:	e001      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d04b      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f5a:	d02e      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f60:	d828      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f66:	d02a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6c:	d822      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f72:	d026      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003f74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f78:	d81c      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f7e:	d010      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f84:	d816      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01d      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f8e:	d111      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 fb4c 	bl	8005634 <RCCEx_PLL2_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fa0:	e012      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3324      	adds	r3, #36	; 0x24
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 fbf5 	bl	8005798 <RCCEx_PLL3_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fb2:	e009      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb8:	e006      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e004      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fbe:	bf00      	nop
 8003fc0:	e002      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fc2:	bf00      	nop
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fce:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fdc:	492a      	ldr	r1, [pc, #168]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	654b      	str	r3, [r1, #84]	; 0x54
 8003fe2:	e001      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d04d      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ffa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ffe:	d02e      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004000:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004004:	d828      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400a:	d02a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d822      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004016:	d026      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004018:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800401c:	d81c      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800401e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004022:	d010      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004028:	d816      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01d      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800402e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004032:	d111      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f001 fafa 	bl	8005634 <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004044:	e012      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3324      	adds	r3, #36	; 0x24
 800404a:	2102      	movs	r1, #2
 800404c:	4618      	mov	r0, r3
 800404e:	f001 fba3 	bl	8005798 <RCCEx_PLL3_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004056:	e009      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	e006      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800405e:	bf00      	nop
 8004060:	e004      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004062:	bf00      	nop
 8004064:	e002      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800406a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800406c:	7dfb      	ldrb	r3, [r7, #23]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004080:	4901      	ldr	r1, [pc, #4]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004082:	4313      	orrs	r3, r2
 8004084:	658b      	str	r3, [r1, #88]	; 0x58
 8004086:	e003      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d04b      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040a6:	d02e      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80040a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040ac:	d828      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b2:	d02a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80040b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b8:	d822      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040be:	d026      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80040c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040c4:	d81c      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ca:	d010      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80040cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d0:	d816      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01d      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80040d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040da:	d111      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3304      	adds	r3, #4
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 faa6 	bl	8005634 <RCCEx_PLL2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040ec:	e012      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3324      	adds	r3, #36	; 0x24
 80040f2:	2102      	movs	r1, #2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 fb4f 	bl	8005798 <RCCEx_PLL3_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040fe:	e009      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	75fb      	strb	r3, [r7, #23]
      break;
 8004104:	e006      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004106:	bf00      	nop
 8004108:	e004      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800410a:	bf00      	nop
 800410c:	e002      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800411a:	4b9d      	ldr	r3, [pc, #628]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004128:	4999      	ldr	r1, [pc, #612]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800412a:	4313      	orrs	r3, r2
 800412c:	658b      	str	r3, [r1, #88]	; 0x58
 800412e:	e001      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414a:	d10a      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3324      	adds	r3, #36	; 0x24
 8004150:	2102      	movs	r1, #2
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fb20 	bl	8005798 <RCCEx_PLL3_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004162:	4b8b      	ldr	r3, [pc, #556]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004170:	4987      	ldr	r1, [pc, #540]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004172:	4313      	orrs	r3, r2
 8004174:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	2b00      	cmp	r3, #0
 8004180:	d01a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800418c:	d10a      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3324      	adds	r3, #36	; 0x24
 8004192:	2102      	movs	r1, #2
 8004194:	4618      	mov	r0, r3
 8004196:	f001 faff 	bl	8005798 <RCCEx_PLL3_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041a4:	4b7a      	ldr	r3, [pc, #488]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b2:	4977      	ldr	r1, [pc, #476]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d034      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ce:	d01d      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80041d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d4:	d817      	bhi.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041de:	d009      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80041e0:	e011      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3304      	adds	r3, #4
 80041e6:	2100      	movs	r1, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 fa23 	bl	8005634 <RCCEx_PLL2_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041f2:	e00c      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3324      	adds	r3, #36	; 0x24
 80041f8:	2102      	movs	r1, #2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 facc 	bl	8005798 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004204:	e003      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
      break;
 800420a:	e000      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800420c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004214:	4b5e      	ldr	r3, [pc, #376]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004218:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004222:	495b      	ldr	r1, [pc, #364]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004224:	4313      	orrs	r3, r2
 8004226:	658b      	str	r3, [r1, #88]	; 0x58
 8004228:	e001      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d033      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004240:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004244:	d01c      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004246:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800424a:	d816      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800424c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004250:	d003      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004256:	d007      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004258:	e00f      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425a:	4b4d      	ldr	r3, [pc, #308]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	4a4c      	ldr	r2, [pc, #304]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004266:	e00c      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3324      	adds	r3, #36	; 0x24
 800426c:	2101      	movs	r1, #1
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fa92 	bl	8005798 <RCCEx_PLL3_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004278:	e003      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	75fb      	strb	r3, [r7, #23]
      break;
 800427e:	e000      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004288:	4b41      	ldr	r3, [pc, #260]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800428a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004296:	493e      	ldr	r1, [pc, #248]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004298:	4313      	orrs	r3, r2
 800429a:	654b      	str	r3, [r1, #84]	; 0x54
 800429c:	e001      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	7dfb      	ldrb	r3, [r7, #23]
 80042a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d029      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80042b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ba:	d007      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80042bc:	e00f      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042be:	4b34      	ldr	r3, [pc, #208]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	4a33      	ldr	r2, [pc, #204]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042ca:	e00b      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	2102      	movs	r1, #2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 f9ae 	bl	8005634 <RCCEx_PLL2_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042dc:	e002      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	75fb      	strb	r3, [r7, #23]
      break;
 80042e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042ea:	4b29      	ldr	r3, [pc, #164]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f6:	4926      	ldr	r1, [pc, #152]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042fc:	e001      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
 8004300:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3324      	adds	r3, #36	; 0x24
 8004312:	2102      	movs	r1, #2
 8004314:	4618      	mov	r0, r3
 8004316:	f001 fa3f 	bl	8005798 <RCCEx_PLL3_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d033      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004338:	d017      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800433a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433e:	d811      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004344:	d013      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434a:	d80b      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d010      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004354:	d106      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004356:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	4a0d      	ldr	r2, [pc, #52]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800435c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004360:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004362:	e007      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	75fb      	strb	r3, [r7, #23]
      break;
 8004368:	e004      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800436a:	bf00      	nop
 800436c:	e002      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800436e:	bf00      	nop
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10c      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004386:	4902      	ldr	r1, [pc, #8]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004388:	4313      	orrs	r3, r2
 800438a:	654b      	str	r3, [r1, #84]	; 0x54
 800438c:	e004      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800438e:	bf00      	nop
 8004390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043a4:	4b31      	ldr	r3, [pc, #196]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	492e      	ldr	r1, [pc, #184]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043c2:	4b2a      	ldr	r3, [pc, #168]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043d0:	4926      	ldr	r1, [pc, #152]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043e2:	4b22      	ldr	r3, [pc, #136]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ee:	491f      	ldr	r1, [pc, #124]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00d      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004400:	4b1a      	ldr	r3, [pc, #104]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004406:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800440a:	6113      	str	r3, [r2, #16]
 800440c:	4b17      	ldr	r3, [pc, #92]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004416:	4915      	ldr	r1, [pc, #84]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004418:	4313      	orrs	r3, r2
 800441a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	da08      	bge.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004428:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	490e      	ldr	r1, [pc, #56]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004432:	4313      	orrs	r3, r2
 8004434:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	4906      	ldr	r1, [pc, #24]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004452:	4313      	orrs	r3, r2
 8004454:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004456:	7dbb      	ldrb	r3, [r7, #22]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	58024400 	.word	0x58024400

08004470 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b090      	sub	sp, #64	; 0x40
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447e:	f040 8095 	bne.w	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004482:	4b97      	ldr	r3, [pc, #604]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	2b04      	cmp	r3, #4
 8004490:	f200 8088 	bhi.w	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044b1 	.word	0x080044b1
 80044a0:	080044d9 	.word	0x080044d9
 80044a4:	08004501 	.word	0x08004501
 80044a8:	0800459d 	.word	0x0800459d
 80044ac:	08004529 	.word	0x08004529
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80044b0:	4b8b      	ldr	r3, [pc, #556]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044bc:	d108      	bne.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 ff64 	bl	8005390 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80044cc:	f000 bc94 	b.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044d4:	f000 bc90 	b.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044d8:	4b81      	ldr	r3, [pc, #516]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044e4:	d108      	bne.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044e6:	f107 0318 	add.w	r3, r7, #24
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fca8 	bl	8004e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80044f4:	f000 bc80 	b.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044fc:	f000 bc7c 	b.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004500:	4b77      	ldr	r3, [pc, #476]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800450c:	d108      	bne.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800450e:	f107 030c 	add.w	r3, r7, #12
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fde8 	bl	80050e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800451c:	f000 bc6c 	b.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004524:	f000 bc68 	b.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004528:	4b6d      	ldr	r3, [pc, #436]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004530:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004532:	4b6b      	ldr	r3, [pc, #428]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b04      	cmp	r3, #4
 800453c:	d10c      	bne.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800453e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004544:	4b66      	ldr	r3, [pc, #408]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	4a65      	ldr	r2, [pc, #404]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
 8004554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004556:	e01f      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004558:	4b61      	ldr	r3, [pc, #388]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004564:	d106      	bne.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800456c:	d102      	bne.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800456e:	4b5e      	ldr	r3, [pc, #376]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004572:	e011      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004574:	4b5a      	ldr	r3, [pc, #360]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004580:	d106      	bne.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004588:	d102      	bne.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800458a:	4b58      	ldr	r3, [pc, #352]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800458c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458e:	e003      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004594:	f000 bc30 	b.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004598:	f000 bc2e 	b.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800459c:	4b54      	ldr	r3, [pc, #336]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800459e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045a0:	f000 bc2a 	b.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045a8:	f000 bc26 	b.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b2:	f040 809f 	bne.w	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80045b6:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80045b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80045be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c6:	d04d      	beq.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ce:	f200 8084 	bhi.w	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	2bc0      	cmp	r3, #192	; 0xc0
 80045d6:	d07d      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	2bc0      	cmp	r3, #192	; 0xc0
 80045dc:	d87d      	bhi.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d02d      	beq.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	2b80      	cmp	r3, #128	; 0x80
 80045e8:	d877      	bhi.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d012      	beq.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80045f6:	e070      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80045f8:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004604:	d107      	bne.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fec0 	bl	8005390 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004614:	e3f0      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800461a:	e3ed      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800461c:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004628:	d107      	bne.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800462a:	f107 0318 	add.w	r3, r7, #24
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fc06 	bl	8004e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004638:	e3de      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800463e:	e3db      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800464c:	d107      	bne.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800464e:	f107 030c 	add.w	r3, r7, #12
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fd48 	bl	80050e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800465c:	e3cc      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004662:	e3c9      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004664:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800466c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800466e:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d10c      	bne.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004680:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	08db      	lsrs	r3, r3, #3
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
 8004690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004692:	e01e      	b.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004694:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a0:	d106      	bne.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046a8:	d102      	bne.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ae:	e010      	b.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046bc:	d106      	bne.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80046be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c4:	d102      	bne.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80046c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ca:	e002      	b.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80046d0:	e392      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80046d2:	e391      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046d8:	e38e      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046de:	e38b      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80046e0:	58024400 	.word	0x58024400
 80046e4:	03d09000 	.word	0x03d09000
 80046e8:	003d0900 	.word	0x003d0900
 80046ec:	017d7840 	.word	0x017d7840
 80046f0:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fa:	f040 809c 	bne.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80046fe:	4b9d      	ldr	r3, [pc, #628]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004702:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004706:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800470e:	d054      	beq.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004716:	f200 808b 	bhi.w	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004720:	f000 8083 	beq.w	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800472a:	f200 8081 	bhi.w	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004734:	d02f      	beq.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800473c:	d878      	bhi.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8004744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800474a:	d012      	beq.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800474c:	e070      	b.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800474e:	4b89      	ldr	r3, [pc, #548]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800475a:	d107      	bne.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800475c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fe15 	bl	8005390 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800476a:	e345      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004770:	e342      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004772:	4b80      	ldr	r3, [pc, #512]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800477a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800477e:	d107      	bne.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004780:	f107 0318 	add.w	r3, r7, #24
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fb5b 	bl	8004e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800478e:	e333      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004794:	e330      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004796:	4b77      	ldr	r3, [pc, #476]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800479e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a2:	d107      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047a4:	f107 030c 	add.w	r3, r7, #12
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fc9d 	bl	80050e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047b2:	e321      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047b8:	e31e      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80047ba:	4b6e      	ldr	r3, [pc, #440]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80047bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047c2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047c4:	4b6b      	ldr	r3, [pc, #428]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d10c      	bne.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80047d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047d6:	4b67      	ldr	r3, [pc, #412]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	08db      	lsrs	r3, r3, #3
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	4a65      	ldr	r2, [pc, #404]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e8:	e01e      	b.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80047ea:	4b62      	ldr	r3, [pc, #392]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f6:	d106      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80047f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047fe:	d102      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004800:	4b5e      	ldr	r3, [pc, #376]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004804:	e010      	b.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004806:	4b5b      	ldr	r3, [pc, #364]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004812:	d106      	bne.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800481a:	d102      	bne.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800481c:	4b58      	ldr	r3, [pc, #352]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004820:	e002      	b.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004826:	e2e7      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004828:	e2e6      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800482a:	4b56      	ldr	r3, [pc, #344]	; (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800482c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800482e:	e2e3      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004834:	e2e0      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483c:	f040 80a7 	bne.w	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004840:	4b4c      	ldr	r3, [pc, #304]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004848:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004850:	d055      	beq.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004858:	f200 8096 	bhi.w	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004862:	f000 8084 	beq.w	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800486c:	f200 808c 	bhi.w	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004876:	d030      	beq.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800487e:	f200 8083 	bhi.w	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800488e:	d012      	beq.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004890:	e07a      	b.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004892:	4b38      	ldr	r3, [pc, #224]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800489e:	d107      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fd73 	bl	8005390 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048ae:	e2a3      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048b4:	e2a0      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048b6:	4b2f      	ldr	r3, [pc, #188]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c2:	d107      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048c4:	f107 0318 	add.w	r3, r7, #24
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fab9 	bl	8004e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80048d2:	e291      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048d8:	e28e      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048da:	4b26      	ldr	r3, [pc, #152]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e6:	d107      	bne.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fbfb 	bl	80050e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048f6:	e27f      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048fc:	e27c      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80048fe:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004902:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004906:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004908:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b04      	cmp	r3, #4
 8004912:	d10c      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800491a:	4b16      	ldr	r3, [pc, #88]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	08db      	lsrs	r3, r3, #3
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	4a14      	ldr	r2, [pc, #80]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492c:	e01e      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800492e:	4b11      	ldr	r3, [pc, #68]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493a:	d106      	bne.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004942:	d102      	bne.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004944:	4b0d      	ldr	r3, [pc, #52]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004948:	e010      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800494a:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004956:	d106      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800495e:	d102      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004964:	e002      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800496a:	e245      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800496c:	e244      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004972:	e241      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004974:	58024400 	.word	0x58024400
 8004978:	03d09000 	.word	0x03d09000
 800497c:	003d0900 	.word	0x003d0900
 8004980:	017d7840 	.word	0x017d7840
 8004984:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800498c:	e234      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004994:	f040 809c 	bne.w	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004998:	4b9b      	ldr	r3, [pc, #620]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800499a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80049a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a8:	d054      	beq.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b0:	f200 808b 	bhi.w	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80049b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049ba:	f000 8083 	beq.w	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049c4:	f200 8081 	bhi.w	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ce:	d02f      	beq.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80049d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d6:	d878      	bhi.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d004      	beq.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e4:	d012      	beq.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80049e6:	e070      	b.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049e8:	4b87      	ldr	r3, [pc, #540]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f4:	d107      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fcc8 	bl	8005390 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a04:	e1f8      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a0a:	e1f5      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a0c:	4b7e      	ldr	r3, [pc, #504]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a18:	d107      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a1a:	f107 0318 	add.w	r3, r7, #24
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fa0e 	bl	8004e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a28:	e1e6      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a2e:	e1e3      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a30:	4b75      	ldr	r3, [pc, #468]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a3e:	f107 030c 	add.w	r3, r7, #12
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fb50 	bl	80050e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a4c:	e1d4      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a52:	e1d1      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a54:	4b6c      	ldr	r3, [pc, #432]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a5e:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d109      	bne.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a70:	4b65      	ldr	r3, [pc, #404]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	08db      	lsrs	r3, r3, #3
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	4a64      	ldr	r2, [pc, #400]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a82:	e01e      	b.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a84:	4b60      	ldr	r3, [pc, #384]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a90:	d106      	bne.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a98:	d102      	bne.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a9a:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8004a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a9e:	e010      	b.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004aa0:	4b59      	ldr	r3, [pc, #356]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aac:	d106      	bne.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab4:	d102      	bne.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004ab6:	4b57      	ldr	r3, [pc, #348]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aba:	e002      	b.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ac0:	e19a      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004ac2:	e199      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ac4:	4b54      	ldr	r3, [pc, #336]	; (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ac8:	e196      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ace:	e193      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ad6:	d173      	bne.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004ad8:	4b4b      	ldr	r3, [pc, #300]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ae0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ae8:	d02f      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004af0:	d863      	bhi.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d004      	beq.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afe:	d012      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8004b00:	e05b      	b.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b02:	4b41      	ldr	r3, [pc, #260]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b10:	f107 0318 	add.w	r3, r7, #24
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f993 	bl	8004e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b1e:	e16b      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b24:	e168      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b26:	4b38      	ldr	r3, [pc, #224]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b32:	d107      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b34:	f107 030c 	add.w	r3, r7, #12
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fad5 	bl	80050e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b42:	e159      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b48:	e156      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b4a:	4b2f      	ldr	r3, [pc, #188]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b54:	4b2c      	ldr	r3, [pc, #176]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d10c      	bne.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8004b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b66:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	08db      	lsrs	r3, r3, #3
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b78:	e01e      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b7a:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b86:	d106      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8004b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b8e:	d102      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b90:	4b1f      	ldr	r3, [pc, #124]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b94:	e010      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b96:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004baa:	d102      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004bac:	4b19      	ldr	r3, [pc, #100]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb0:	e002      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004bb6:	e11f      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004bb8:	e11e      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bbe:	e11b      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc6:	d13e      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d004      	beq.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bde:	d01d      	beq.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004be0:	e02e      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004be2:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bee:	d107      	bne.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fbcb 	bl	8005390 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004bfe:	e0fb      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c04:	e0f8      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004c06:	bf00      	nop
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	03d09000 	.word	0x03d09000
 8004c10:	003d0900 	.word	0x003d0900
 8004c14:	017d7840 	.word	0x017d7840
 8004c18:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c1c:	4b79      	ldr	r3, [pc, #484]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c28:	d107      	bne.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c2a:	f107 0318 	add.w	r3, r7, #24
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f906 	bl	8004e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c38:	e0de      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c3e:	e0db      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c44:	e0d8      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c4c:	f040 8085 	bne.w	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004c50:	4b6c      	ldr	r3, [pc, #432]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004c58:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c60:	d06b      	beq.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c68:	d874      	bhi.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c70:	d056      	beq.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d86c      	bhi.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c80:	d03b      	beq.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c88:	d864      	bhi.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c90:	d021      	beq.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c98:	d85c      	bhi.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ca6:	d004      	beq.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8004ca8:	e054      	b.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004caa:	f000 f8b3 	bl	8004e14 <HAL_RCCEx_GetD3PCLK1Freq>
 8004cae:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004cb0:	e0a2      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cb2:	4b54      	ldr	r3, [pc, #336]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cbe:	d107      	bne.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cc0:	f107 0318 	add.w	r3, r7, #24
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f8bb 	bl	8004e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cce:	e093      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cd4:	e090      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cd6:	4b4b      	ldr	r3, [pc, #300]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ce4:	f107 030c 	add.w	r3, r7, #12
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 f9fd 	bl	80050e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cf2:	e081      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cf8:	e07e      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cfa:	4b42      	ldr	r3, [pc, #264]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d109      	bne.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d06:	4b3f      	ldr	r3, [pc, #252]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	08db      	lsrs	r3, r3, #3
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	4a3d      	ldr	r2, [pc, #244]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004d12:	fa22 f303 	lsr.w	r3, r2, r3
 8004d16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d18:	e06e      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d1e:	e06b      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004d20:	4b38      	ldr	r3, [pc, #224]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2c:	d102      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8004d2e:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004d30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d32:	e061      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d38:	e05e      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d3a:	4b32      	ldr	r3, [pc, #200]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d46:	d102      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8004d48:	4b31      	ldr	r3, [pc, #196]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d4c:	e054      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d52:	e051      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d58:	e04e      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d60:	d148      	bne.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004d62:	4b28      	ldr	r3, [pc, #160]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d6a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d72:	d02a      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d7a:	d838      	bhi.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d004      	beq.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d88:	d00d      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8004d8a:	e030      	b.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d8c:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d98:	d102      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8004d9a:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d9e:	e02b      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004da4:	e028      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004da6:	4b17      	ldr	r3, [pc, #92]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fae9 	bl	8005390 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dc2:	e019      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dc8:	e016      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dca:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dd8:	f107 0318 	add.w	r3, r7, #24
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 f82f 	bl	8004e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004de6:	e007      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dec:	e004      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004df2:	e001      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3740      	adds	r7, #64	; 0x40
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	58024400 	.word	0x58024400
 8004e08:	03d09000 	.word	0x03d09000
 8004e0c:	003d0900 	.word	0x003d0900
 8004e10:	017d7840 	.word	0x017d7840

08004e14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e18:	f7fe fbb4 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4904      	ldr	r1, [pc, #16]	; (8004e3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	0800596c 	.word	0x0800596c

08004e40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b089      	sub	sp, #36	; 0x24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e48:	4ba1      	ldr	r3, [pc, #644]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004e52:	4b9f      	ldr	r3, [pc, #636]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	0b1b      	lsrs	r3, r3, #12
 8004e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e5e:	4b9c      	ldr	r3, [pc, #624]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004e6a:	4b99      	ldr	r3, [pc, #612]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	08db      	lsrs	r3, r3, #3
 8004e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8111 	beq.w	80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	f000 8083 	beq.w	8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	f200 80a1 	bhi.w	8004fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d056      	beq.n	8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004eaa:	e099      	b.n	8004fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eac:	4b88      	ldr	r3, [pc, #544]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d02d      	beq.n	8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004eb8:	4b85      	ldr	r3, [pc, #532]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	4a84      	ldr	r2, [pc, #528]	; (80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	ee07 3a90 	vmov	s15, r3
 8004ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee2:	4b7b      	ldr	r3, [pc, #492]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ef6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f12:	e087      	b.n	8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f26:	4b6a      	ldr	r3, [pc, #424]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f56:	e065      	b.n	8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6a:	4b59      	ldr	r3, [pc, #356]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f9a:	e043      	b.n	8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fae:	4b48      	ldr	r3, [pc, #288]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fde:	e021      	b.n	8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff2:	4b37      	ldr	r3, [pc, #220]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005002:	ed97 6a03 	vldr	s12, [r7, #12]
 8005006:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800500a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005022:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005024:	4b2a      	ldr	r3, [pc, #168]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	0a5b      	lsrs	r3, r3, #9
 800502a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800503a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800503e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800504a:	ee17 2a90 	vmov	r2, s15
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005052:	4b1f      	ldr	r3, [pc, #124]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	0c1b      	lsrs	r3, r3, #16
 8005058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800505c:	ee07 3a90 	vmov	s15, r3
 8005060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005064:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005068:	ee37 7a87 	vadd.f32	s14, s15, s14
 800506c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005078:	ee17 2a90 	vmov	r2, s15
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005080:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	0e1b      	lsrs	r3, r3, #24
 8005086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800509a:	edd7 6a07 	vldr	s13, [r7, #28]
 800509e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050a6:	ee17 2a90 	vmov	r2, s15
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80050ae:	e008      	b.n	80050c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	609a      	str	r2, [r3, #8]
}
 80050c2:	bf00      	nop
 80050c4:	3724      	adds	r7, #36	; 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	58024400 	.word	0x58024400
 80050d4:	03d09000 	.word	0x03d09000
 80050d8:	46000000 	.word	0x46000000
 80050dc:	4c742400 	.word	0x4c742400
 80050e0:	4a742400 	.word	0x4a742400
 80050e4:	4bbebc20 	.word	0x4bbebc20

080050e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b089      	sub	sp, #36	; 0x24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050f0:	4ba1      	ldr	r3, [pc, #644]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80050fa:	4b9f      	ldr	r3, [pc, #636]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	0d1b      	lsrs	r3, r3, #20
 8005100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005104:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005106:	4b9c      	ldr	r3, [pc, #624]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005112:	4b99      	ldr	r3, [pc, #612]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005116:	08db      	lsrs	r3, r3, #3
 8005118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 8111 	beq.w	8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b02      	cmp	r3, #2
 800513a:	f000 8083 	beq.w	8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b02      	cmp	r3, #2
 8005142:	f200 80a1 	bhi.w	8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d056      	beq.n	8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005152:	e099      	b.n	8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005154:	4b88      	ldr	r3, [pc, #544]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d02d      	beq.n	80051bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005160:	4b85      	ldr	r3, [pc, #532]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	08db      	lsrs	r3, r3, #3
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	4a84      	ldr	r2, [pc, #528]	; (800537c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
 8005170:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	ee07 3a90 	vmov	s15, r3
 8005178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518a:	4b7b      	ldr	r3, [pc, #492]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519a:	ed97 6a03 	vldr	s12, [r7, #12]
 800519e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80051ba:	e087      	b.n	80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80051ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ce:	4b6a      	ldr	r3, [pc, #424]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051de:	ed97 6a03 	vldr	s12, [r7, #12]
 80051e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051fe:	e065      	b.n	80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005388 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800520e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005212:	4b59      	ldr	r3, [pc, #356]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005222:	ed97 6a03 	vldr	s12, [r7, #12]
 8005226:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800522a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005242:	e043      	b.n	80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800538c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005256:	4b48      	ldr	r3, [pc, #288]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005266:	ed97 6a03 	vldr	s12, [r7, #12]
 800526a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800526e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800527a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800527e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005282:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005286:	e021      	b.n	80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005292:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005388 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529a:	4b37      	ldr	r3, [pc, #220]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80052cc:	4b2a      	ldr	r3, [pc, #168]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	0a5b      	lsrs	r3, r3, #9
 80052d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f2:	ee17 2a90 	vmov	r2, s15
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80052fa:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	0c1b      	lsrs	r3, r3, #16
 8005300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005304:	ee07 3a90 	vmov	s15, r3
 8005308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005314:	edd7 6a07 	vldr	s13, [r7, #28]
 8005318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800531c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005320:	ee17 2a90 	vmov	r2, s15
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005328:	4b13      	ldr	r3, [pc, #76]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	0e1b      	lsrs	r3, r3, #24
 800532e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800533e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005342:	edd7 6a07 	vldr	s13, [r7, #28]
 8005346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800534a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800534e:	ee17 2a90 	vmov	r2, s15
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005356:	e008      	b.n	800536a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	609a      	str	r2, [r3, #8]
}
 800536a:	bf00      	nop
 800536c:	3724      	adds	r7, #36	; 0x24
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	58024400 	.word	0x58024400
 800537c:	03d09000 	.word	0x03d09000
 8005380:	46000000 	.word	0x46000000
 8005384:	4c742400 	.word	0x4c742400
 8005388:	4a742400 	.word	0x4a742400
 800538c:	4bbebc20 	.word	0x4bbebc20

08005390 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005390:	b480      	push	{r7}
 8005392:	b089      	sub	sp, #36	; 0x24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005398:	4ba0      	ldr	r3, [pc, #640]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80053a2:	4b9e      	ldr	r3, [pc, #632]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	091b      	lsrs	r3, r3, #4
 80053a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80053ae:	4b9b      	ldr	r3, [pc, #620]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80053b8:	4b98      	ldr	r3, [pc, #608]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053bc:	08db      	lsrs	r3, r3, #3
 80053be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 8111 	beq.w	80055fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	f000 8083 	beq.w	80054ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	f200 80a1 	bhi.w	800552e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d056      	beq.n	80054a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80053f8:	e099      	b.n	800552e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053fa:	4b88      	ldr	r3, [pc, #544]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d02d      	beq.n	8005462 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005406:	4b85      	ldr	r3, [pc, #532]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	08db      	lsrs	r3, r3, #3
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	4a83      	ldr	r2, [pc, #524]	; (8005620 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005412:	fa22 f303 	lsr.w	r3, r2, r3
 8005416:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	ee07 3a90 	vmov	s15, r3
 8005428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005430:	4b7a      	ldr	r3, [pc, #488]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005438:	ee07 3a90 	vmov	s15, r3
 800543c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005440:	ed97 6a03 	vldr	s12, [r7, #12]
 8005444:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005624 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800544c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005460:	e087      	b.n	8005572 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	ee07 3a90 	vmov	s15, r3
 8005468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005628 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005474:	4b69      	ldr	r3, [pc, #420]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547c:	ee07 3a90 	vmov	s15, r3
 8005480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005484:	ed97 6a03 	vldr	s12, [r7, #12]
 8005488:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005624 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800548c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054a4:	e065      	b.n	8005572 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800562c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80054b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b8:	4b58      	ldr	r3, [pc, #352]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c0:	ee07 3a90 	vmov	s15, r3
 80054c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80054cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005624 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80054d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054e8:	e043      	b.n	8005572 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	ee07 3a90 	vmov	s15, r3
 80054f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80054f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054fc:	4b47      	ldr	r3, [pc, #284]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800550c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005510:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005624 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800551c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005528:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800552c:	e021      	b.n	8005572 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	ee07 3a90 	vmov	s15, r3
 8005534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005538:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005628 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800553c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005540:	4b36      	ldr	r3, [pc, #216]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005550:	ed97 6a03 	vldr	s12, [r7, #12]
 8005554:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005624 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005570:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005572:	4b2a      	ldr	r3, [pc, #168]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	0a5b      	lsrs	r3, r3, #9
 8005578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800557c:	ee07 3a90 	vmov	s15, r3
 8005580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005588:	ee37 7a87 	vadd.f32	s14, s15, s14
 800558c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005598:	ee17 2a90 	vmov	r2, s15
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80055a0:	4b1e      	ldr	r3, [pc, #120]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	0c1b      	lsrs	r3, r3, #16
 80055a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80055be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c6:	ee17 2a90 	vmov	r2, s15
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	0e1b      	lsrs	r3, r3, #24
 80055d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80055ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055f4:	ee17 2a90 	vmov	r2, s15
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80055fc:	e008      	b.n	8005610 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	3724      	adds	r7, #36	; 0x24
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	58024400 	.word	0x58024400
 8005620:	03d09000 	.word	0x03d09000
 8005624:	46000000 	.word	0x46000000
 8005628:	4c742400 	.word	0x4c742400
 800562c:	4a742400 	.word	0x4a742400
 8005630:	4bbebc20 	.word	0x4bbebc20

08005634 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005642:	4b53      	ldr	r3, [pc, #332]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b03      	cmp	r3, #3
 800564c:	d101      	bne.n	8005652 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e099      	b.n	8005786 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005652:	4b4f      	ldr	r3, [pc, #316]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a4e      	ldr	r2, [pc, #312]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005658:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800565c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565e:	f7fb f9a3 	bl	80009a8 <HAL_GetTick>
 8005662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005664:	e008      	b.n	8005678 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005666:	f7fb f99f 	bl	80009a8 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e086      	b.n	8005786 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005678:	4b45      	ldr	r3, [pc, #276]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f0      	bne.n	8005666 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005684:	4b42      	ldr	r3, [pc, #264]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	031b      	lsls	r3, r3, #12
 8005692:	493f      	ldr	r1, [pc, #252]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005694:	4313      	orrs	r3, r2
 8005696:	628b      	str	r3, [r1, #40]	; 0x28
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	3b01      	subs	r3, #1
 800569e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	025b      	lsls	r3, r3, #9
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	041b      	lsls	r3, r3, #16
 80056b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	061b      	lsls	r3, r3, #24
 80056c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056c8:	4931      	ldr	r1, [pc, #196]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80056ce:	4b30      	ldr	r3, [pc, #192]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	492d      	ldr	r1, [pc, #180]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80056e0:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	f023 0220 	bic.w	r2, r3, #32
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	4928      	ldr	r1, [pc, #160]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80056f2:	4b27      	ldr	r3, [pc, #156]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	4a26      	ldr	r2, [pc, #152]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 80056f8:	f023 0310 	bic.w	r3, r3, #16
 80056fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80056fe:	4b24      	ldr	r3, [pc, #144]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005702:	4b24      	ldr	r3, [pc, #144]	; (8005794 <RCCEx_PLL2_Config+0x160>)
 8005704:	4013      	ands	r3, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	69d2      	ldr	r2, [r2, #28]
 800570a:	00d2      	lsls	r2, r2, #3
 800570c:	4920      	ldr	r1, [pc, #128]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 800570e:	4313      	orrs	r3, r2
 8005710:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005712:	4b1f      	ldr	r3, [pc, #124]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005718:	f043 0310 	orr.w	r3, r3, #16
 800571c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005724:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	4a19      	ldr	r2, [pc, #100]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 800572a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800572e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005730:	e00f      	b.n	8005752 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d106      	bne.n	8005746 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005738:	4b15      	ldr	r3, [pc, #84]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	4a14      	ldr	r2, [pc, #80]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 800573e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005744:	e005      	b.n	8005752 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005746:	4b12      	ldr	r3, [pc, #72]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	4a11      	ldr	r2, [pc, #68]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 800574c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005750:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005752:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a0e      	ldr	r2, [pc, #56]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 8005758:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800575c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575e:	f7fb f923 	bl	80009a8 <HAL_GetTick>
 8005762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005764:	e008      	b.n	8005778 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005766:	f7fb f91f 	bl	80009a8 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e006      	b.n	8005786 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005778:	4b05      	ldr	r3, [pc, #20]	; (8005790 <RCCEx_PLL2_Config+0x15c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	58024400 	.word	0x58024400
 8005794:	ffff0007 	.word	0xffff0007

08005798 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057a6:	4b53      	ldr	r3, [pc, #332]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d101      	bne.n	80057b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e099      	b.n	80058ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80057b6:	4b4f      	ldr	r3, [pc, #316]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a4e      	ldr	r2, [pc, #312]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80057bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c2:	f7fb f8f1 	bl	80009a8 <HAL_GetTick>
 80057c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057c8:	e008      	b.n	80057dc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057ca:	f7fb f8ed 	bl	80009a8 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e086      	b.n	80058ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057dc:	4b45      	ldr	r3, [pc, #276]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1f0      	bne.n	80057ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80057e8:	4b42      	ldr	r3, [pc, #264]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	051b      	lsls	r3, r3, #20
 80057f6:	493f      	ldr	r1, [pc, #252]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	628b      	str	r3, [r1, #40]	; 0x28
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	3b01      	subs	r3, #1
 8005802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	3b01      	subs	r3, #1
 800580c:	025b      	lsls	r3, r3, #9
 800580e:	b29b      	uxth	r3, r3
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	3b01      	subs	r3, #1
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	3b01      	subs	r3, #1
 8005826:	061b      	lsls	r3, r3, #24
 8005828:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800582c:	4931      	ldr	r1, [pc, #196]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 800582e:	4313      	orrs	r3, r2
 8005830:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005832:	4b30      	ldr	r3, [pc, #192]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	492d      	ldr	r1, [pc, #180]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 8005840:	4313      	orrs	r3, r2
 8005842:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005844:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	4928      	ldr	r1, [pc, #160]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 8005852:	4313      	orrs	r3, r2
 8005854:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005856:	4b27      	ldr	r3, [pc, #156]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	4a26      	ldr	r2, [pc, #152]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 800585c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005860:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005862:	4b24      	ldr	r3, [pc, #144]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 8005864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <RCCEx_PLL3_Config+0x160>)
 8005868:	4013      	ands	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	69d2      	ldr	r2, [r2, #28]
 800586e:	00d2      	lsls	r2, r2, #3
 8005870:	4920      	ldr	r1, [pc, #128]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 8005872:	4313      	orrs	r3, r2
 8005874:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005876:	4b1f      	ldr	r3, [pc, #124]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	4a1e      	ldr	r2, [pc, #120]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 800587c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005888:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 800588e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005892:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005894:	e00f      	b.n	80058b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d106      	bne.n	80058aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800589c:	4b15      	ldr	r3, [pc, #84]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	4a14      	ldr	r2, [pc, #80]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80058a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058a8:	e005      	b.n	80058b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80058aa:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	4a11      	ldr	r2, [pc, #68]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80058b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80058b6:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a0e      	ldr	r2, [pc, #56]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80058bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c2:	f7fb f871 	bl	80009a8 <HAL_GetTick>
 80058c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058c8:	e008      	b.n	80058dc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80058ca:	f7fb f86d 	bl	80009a8 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e006      	b.n	80058ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <RCCEx_PLL3_Config+0x15c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0f0      	beq.n	80058ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	58024400 	.word	0x58024400
 80058f8:	ffff0007 	.word	0xffff0007

080058fc <__libc_init_array>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	4d0d      	ldr	r5, [pc, #52]	; (8005934 <__libc_init_array+0x38>)
 8005900:	4c0d      	ldr	r4, [pc, #52]	; (8005938 <__libc_init_array+0x3c>)
 8005902:	1b64      	subs	r4, r4, r5
 8005904:	10a4      	asrs	r4, r4, #2
 8005906:	2600      	movs	r6, #0
 8005908:	42a6      	cmp	r6, r4
 800590a:	d109      	bne.n	8005920 <__libc_init_array+0x24>
 800590c:	4d0b      	ldr	r5, [pc, #44]	; (800593c <__libc_init_array+0x40>)
 800590e:	4c0c      	ldr	r4, [pc, #48]	; (8005940 <__libc_init_array+0x44>)
 8005910:	f000 f820 	bl	8005954 <_init>
 8005914:	1b64      	subs	r4, r4, r5
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	2600      	movs	r6, #0
 800591a:	42a6      	cmp	r6, r4
 800591c:	d105      	bne.n	800592a <__libc_init_array+0x2e>
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	f855 3b04 	ldr.w	r3, [r5], #4
 8005924:	4798      	blx	r3
 8005926:	3601      	adds	r6, #1
 8005928:	e7ee      	b.n	8005908 <__libc_init_array+0xc>
 800592a:	f855 3b04 	ldr.w	r3, [r5], #4
 800592e:	4798      	blx	r3
 8005930:	3601      	adds	r6, #1
 8005932:	e7f2      	b.n	800591a <__libc_init_array+0x1e>
 8005934:	0800597c 	.word	0x0800597c
 8005938:	0800597c 	.word	0x0800597c
 800593c:	0800597c 	.word	0x0800597c
 8005940:	08005980 	.word	0x08005980

08005944 <memset>:
 8005944:	4402      	add	r2, r0
 8005946:	4603      	mov	r3, r0
 8005948:	4293      	cmp	r3, r2
 800594a:	d100      	bne.n	800594e <memset+0xa>
 800594c:	4770      	bx	lr
 800594e:	f803 1b01 	strb.w	r1, [r3], #1
 8005952:	e7f9      	b.n	8005948 <memset+0x4>

08005954 <_init>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	bf00      	nop
 8005958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595a:	bc08      	pop	{r3}
 800595c:	469e      	mov	lr, r3
 800595e:	4770      	bx	lr

08005960 <_fini>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	bf00      	nop
 8005964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005966:	bc08      	pop	{r3}
 8005968:	469e      	mov	lr, r3
 800596a:	4770      	bx	lr
