
755_kayanLed_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e90  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005130  08005130  00006130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b4  080051b4  00007088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051b4  080051b4  000061b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051bc  080051bc  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051bc  080051bc  000061bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051c0  080051c0  000061c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  080051c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  24000088  0800524c  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002b0  0800524c  000072b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107ee  00000000  00000000  000070b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002283  00000000  00000000  000178a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00019b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094b  00000000  00000000  0001a760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a8cd  00000000  00000000  0001b0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001076c  00000000  00000000  00055978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ddbb  00000000  00000000  000660e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e3e9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f0  00000000  00000000  001e3ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001e77d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005118 	.word	0x08005118

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08005118 	.word	0x08005118

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800083e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000842:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000844:	bf00      	nop
 8000846:	4b5c      	ldr	r3, [pc, #368]	@ (80009b8 <main+0x180>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d004      	beq.n	800085c <main+0x24>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	dcf4      	bgt.n	8000846 <main+0xe>
  if ( timeout < 0 )
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	da01      	bge.n	8000866 <main+0x2e>
  {
  Error_Handler();
 8000862:	f000 fa31 	bl	8000cc8 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f000 fd57 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086a:	f000 f8b3 	bl	80009d4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800086e:	4b52      	ldr	r3, [pc, #328]	@ (80009b8 <main+0x180>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000874:	4a50      	ldr	r2, [pc, #320]	@ (80009b8 <main+0x180>)
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087e:	4b4e      	ldr	r3, [pc, #312]	@ (80009b8 <main+0x180>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800088c:	2000      	movs	r0, #0
 800088e:	f001 f979 	bl	8001b84 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000892:	2100      	movs	r1, #0
 8000894:	2000      	movs	r0, #0
 8000896:	f001 f98f 	bl	8001bb8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800089a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800089e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008a0:	bf00      	nop
 80008a2:	4b45      	ldr	r3, [pc, #276]	@ (80009b8 <main+0x180>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d104      	bne.n	80008b8 <main+0x80>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dcf4      	bgt.n	80008a2 <main+0x6a>
if ( timeout < 0 )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da01      	bge.n	80008c2 <main+0x8a>
{
Error_Handler();
 80008be:	f000 fa03 	bl	8000cc8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 f8f1 	bl	8000aa8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 fb24 	bl	8000f14 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f000 fb21 	bl	8000f14 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f000 fb1e 	bl	8000f14 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008d8:	2101      	movs	r1, #1
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fbba 	bl	8001054 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008e0:	4b36      	ldr	r3, [pc, #216]	@ (80009bc <main+0x184>)
 80008e2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008e8:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <main+0x184>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008ee:	4b33      	ldr	r3, [pc, #204]	@ (80009bc <main+0x184>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008f4:	4b31      	ldr	r3, [pc, #196]	@ (80009bc <main+0x184>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008fa:	4b30      	ldr	r3, [pc, #192]	@ (80009bc <main+0x184>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000900:	492e      	ldr	r1, [pc, #184]	@ (80009bc <main+0x184>)
 8000902:	2000      	movs	r0, #0
 8000904:	f000 fc2a 	bl	800115c <BSP_COM_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <main+0xda>
  {
    Error_Handler();
 800090e:	f000 f9db 	bl	8000cc8 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000912:	482b      	ldr	r0, [pc, #172]	@ (80009c0 <main+0x188>)
 8000914:	f003 fd94 	bl	8004440 <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_Off(LED_GREEN);
 8000918:	2000      	movs	r0, #0
 800091a:	f000 fb71 	bl	8001000 <BSP_LED_Off>
  BSP_LED_Off(LED_YELLOW);
 800091e:	2001      	movs	r0, #1
 8000920:	f000 fb6e 	bl	8001000 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8000924:	2002      	movs	r0, #2
 8000926:	f000 fb6b 	bl	8001000 <BSP_LED_Off>

	  /**/


	  // Butona basıldı mı? (PC13 aktif low)
	    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 800092a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092e:	4825      	ldr	r0, [pc, #148]	@ (80009c4 <main+0x18c>)
 8000930:	f001 f8f6 	bl	8001b20 <HAL_GPIO_ReadPin>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1f7      	bne.n	800092a <main+0xf2>
	    {
	      // LED’leri sıfırla
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // LD1
 800093a:	2200      	movs	r2, #0
 800093c:	2101      	movs	r1, #1
 800093e:	4822      	ldr	r0, [pc, #136]	@ (80009c8 <main+0x190>)
 8000940:	f001 f906 	bl	8001b50 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET); // LD2
 8000944:	2200      	movs	r2, #0
 8000946:	2102      	movs	r1, #2
 8000948:	4820      	ldr	r0, [pc, #128]	@ (80009cc <main+0x194>)
 800094a:	f001 f901 	bl	8001b50 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // LD3
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000954:	481c      	ldr	r0, [pc, #112]	@ (80009c8 <main+0x190>)
 8000956:	f001 f8fb 	bl	8001b50 <HAL_GPIO_WritePin>

	      // Sıradaki LED’i yak
	      if (currentLED == 0) {
 800095a:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <main+0x198>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d105      	bne.n	800096e <main+0x136>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // LD1
 8000962:	2201      	movs	r2, #1
 8000964:	2101      	movs	r1, #1
 8000966:	4818      	ldr	r0, [pc, #96]	@ (80009c8 <main+0x190>)
 8000968:	f001 f8f2 	bl	8001b50 <HAL_GPIO_WritePin>
 800096c:	e013      	b.n	8000996 <main+0x15e>
	      } else if (currentLED == 1) {
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <main+0x198>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d105      	bne.n	8000982 <main+0x14a>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);   // LD2
 8000976:	2201      	movs	r2, #1
 8000978:	2102      	movs	r1, #2
 800097a:	4814      	ldr	r0, [pc, #80]	@ (80009cc <main+0x194>)
 800097c:	f001 f8e8 	bl	8001b50 <HAL_GPIO_WritePin>
 8000980:	e009      	b.n	8000996 <main+0x15e>
	      } else if (currentLED == 2) {
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <main+0x198>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d105      	bne.n	8000996 <main+0x15e>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // LD3
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000990:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <main+0x190>)
 8000992:	f001 f8dd 	bl	8001b50 <HAL_GPIO_WritePin>
	      }

	      // Sırayı güncelle
	      currentLED++;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <main+0x198>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	4a0c      	ldr	r2, [pc, #48]	@ (80009d0 <main+0x198>)
 800099e:	6013      	str	r3, [r2, #0]
	      if (currentLED > 2) currentLED = 0;
 80009a0:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <main+0x198>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	dd02      	ble.n	80009ae <main+0x176>
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <main+0x198>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]

	      // Basılı tutarken tekrar etmesin diye küçük bekleme
	      HAL_Delay(200);
 80009ae:	20c8      	movs	r0, #200	@ 0xc8
 80009b0:	f000 fd44 	bl	800143c <HAL_Delay>
	    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80009b4:	e7b9      	b.n	800092a <main+0xf2>
 80009b6:	bf00      	nop
 80009b8:	58024400 	.word	0x58024400
 80009bc:	240000a4 	.word	0x240000a4
 80009c0:	08005130 	.word	0x08005130
 80009c4:	58020800 	.word	0x58020800
 80009c8:	58020400 	.word	0x58020400
 80009cc:	58021000 	.word	0x58021000
 80009d0:	240000b8 	.word	0x240000b8

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	@ 0x70
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009de:	224c      	movs	r2, #76	@ 0x4c
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 fd81 	bl	80044ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2220      	movs	r2, #32
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 fd7b 	bl	80044ea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009f4:	2004      	movs	r0, #4
 80009f6:	f001 f8f3 	bl	8001be0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a02:	4a27      	ldr	r2, [pc, #156]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a04:	f023 0301 	bic.w	r3, r3, #1
 8000a08:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a0a:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a1c:	4a21      	ldr	r2, [pc, #132]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a30:	bf00      	nop
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <SystemClock_Config+0xd0>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a3e:	d1f8      	bne.n	8000a32 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a40:	2302      	movs	r3, #2
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2340      	movs	r3, #64	@ 0x40
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 f91d 	bl	8001c94 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a60:	f000 f932 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	233f      	movs	r3, #63	@ 0x3f
 8000a66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 fd5d 	bl	8002548 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a94:	f000 f918 	bl	8000cc8 <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3770      	adds	r7, #112	@ 0x70
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	58000400 	.word	0x58000400
 8000aa4:	58024800 	.word	0x58024800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b72      	ldr	r3, [pc, #456]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	4a70      	ldr	r2, [pc, #448]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ace:	4b6e      	ldr	r3, [pc, #440]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b6a      	ldr	r3, [pc, #424]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae2:	4a69      	ldr	r2, [pc, #420]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aec:	4b66      	ldr	r3, [pc, #408]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b63      	ldr	r3, [pc, #396]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	4a61      	ldr	r2, [pc, #388]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b18:	4b5b      	ldr	r3, [pc, #364]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1e:	4a5a      	ldr	r2, [pc, #360]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b28:	4b57      	ldr	r3, [pc, #348]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b36:	4b54      	ldr	r3, [pc, #336]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3c:	4a52      	ldr	r2, [pc, #328]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b46:	4b50      	ldr	r3, [pc, #320]	@ (8000c88 <MX_GPIO_Init+0x1e0>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led1_Pin|Led3_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b5a:	484c      	ldr	r0, [pc, #304]	@ (8000c8c <MX_GPIO_Init+0x1e4>)
 8000b5c:	f000 fff8 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2102      	movs	r1, #2
 8000b64:	484a      	ldr	r0, [pc, #296]	@ (8000c90 <MX_GPIO_Init+0x1e8>)
 8000b66:	f000 fff3 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userBtn_Pin */
  GPIO_InitStruct.Pin = userBtn_Pin;
 8000b6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userBtn_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4845      	ldr	r0, [pc, #276]	@ (8000c94 <MX_GPIO_Init+0x1ec>)
 8000b80:	f000 fe1e 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b84:	2332      	movs	r3, #50	@ 0x32
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b94:	230b      	movs	r3, #11
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	483d      	ldr	r0, [pc, #244]	@ (8000c94 <MX_GPIO_Init+0x1ec>)
 8000ba0:	f000 fe0e 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ba4:	2386      	movs	r3, #134	@ 0x86
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb4:	230b      	movs	r3, #11
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4836      	ldr	r0, [pc, #216]	@ (8000c98 <MX_GPIO_Init+0x1f0>)
 8000bc0:	f000 fdfe 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	482c      	ldr	r0, [pc, #176]	@ (8000c8c <MX_GPIO_Init+0x1e4>)
 8000bdc:	f000 fdf0 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000be0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf2:	230b      	movs	r3, #11
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4823      	ldr	r0, [pc, #140]	@ (8000c8c <MX_GPIO_Init+0x1e4>)
 8000bfe:	f000 fddf 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led3_Pin */
  GPIO_InitStruct.Pin = Led3_Pin;
 8000c02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led3_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481c      	ldr	r0, [pc, #112]	@ (8000c8c <MX_GPIO_Init+0x1e4>)
 8000c1c:	f000 fdd0 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c20:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c32:	230a      	movs	r3, #10
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4816      	ldr	r0, [pc, #88]	@ (8000c98 <MX_GPIO_Init+0x1f0>)
 8000c3e:	f000 fdbf 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c42:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480f      	ldr	r0, [pc, #60]	@ (8000c9c <MX_GPIO_Init+0x1f4>)
 8000c60:	f000 fdae 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led2_Pin */
  GPIO_InitStruct.Pin = Led2_Pin;
 8000c64:	2302      	movs	r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led2_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_GPIO_Init+0x1e8>)
 8000c7c:	f000 fda0 	bl	80017c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	@ 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	58020400 	.word	0x58020400
 8000c90:	58021000 	.word	0x58021000
 8000c94:	58020800 	.word	0x58020800
 8000c98:	58020000 	.word	0x58020000
 8000c9c:	58021800 	.word	0x58021800

08000ca0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <BSP_PB_Callback+0x24>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	240000b4 	.word	0x240000b4

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <Error_Handler+0x8>

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_MspInit+0x30>)
 8000cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ce0:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x30>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x30>)
 8000cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	58024400 	.word	0x58024400

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <NMI_Handler+0x4>

08000d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <MemManage_Handler+0x4>

08000d20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5e:	f000 fb4d 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f9e4 	bl	8001138 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00a      	b.n	8000d9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d86:	f3af 8000 	nop.w
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	b2ca      	uxtb	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf0      	blt.n	8000d86 <_read+0x12>
  }

  return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e009      	b.n	8000dd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 fa29 	bl	8001220 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf1      	blt.n	8000dc0 <_write+0x12>
  }
  return len;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_close>:

int _close(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_isatty>:

int _isatty(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	@ (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	@ (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f003 fb82 	bl	8004588 <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	@ (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	24080000 	.word	0x24080000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	240000bc 	.word	0x240000bc
 8000eb8:	240002b0 	.word	0x240002b0

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ef8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000ec0:	f7ff fca2 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec4:	f7ff fbf2 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	@ (8000f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f003 fb51 	bl	8004594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef2:	f7ff fca1 	bl	8000838 <main>
  bx  lr
 8000ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000efc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f00:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8000f04:	080051c4 	.word	0x080051c4
  ldr r2, =_sbss
 8000f08:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8000f0c:	240002b0 	.word	0x240002b0

08000f10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC3_IRQHandler>
	...

08000f14 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	@ 0x30
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d009      	beq.n	8000f3c <BSP_LED_Init+0x28>
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d006      	beq.n	8000f3c <BSP_LED_Init+0x28>
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d003      	beq.n	8000f3c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f34:	f06f 0301 	mvn.w	r3, #1
 8000f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f3a:	e055      	b.n	8000fe8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10f      	bne.n	8000f62 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000f42:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <BSP_LED_Init+0xe0>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	4a2a      	ldr	r2, [pc, #168]	@ (8000ff4 <BSP_LED_Init+0xe0>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f52:	4b28      	ldr	r3, [pc, #160]	@ (8000ff4 <BSP_LED_Init+0xe0>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	e021      	b.n	8000fa6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d10f      	bne.n	8000f88 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000f68:	4b22      	ldr	r3, [pc, #136]	@ (8000ff4 <BSP_LED_Init+0xe0>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6e:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <BSP_LED_Init+0xe0>)
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <BSP_LED_Init+0xe0>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	e00e      	b.n	8000fa6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000f88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <BSP_LED_Init+0xe0>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a19      	ldr	r2, [pc, #100]	@ (8000ff4 <BSP_LED_Init+0xe0>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <BSP_LED_Init+0xe0>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4a13      	ldr	r2, [pc, #76]	@ (8000ff8 <BSP_LED_Init+0xe4>)
 8000faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fae:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000ffc <BSP_LED_Init+0xe8>)
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	f107 0218 	add.w	r2, r7, #24
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fbf8 	bl	80017c0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <BSP_LED_Init+0xe8>)
 8000fd4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4a07      	ldr	r2, [pc, #28]	@ (8000ff8 <BSP_LED_Init+0xe4>)
 8000fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f000 fdb4 	bl	8001b50 <HAL_GPIO_WritePin>
  }

  return ret;
 8000fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3730      	adds	r7, #48	@ 0x30
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	0800515c 	.word	0x0800515c
 8000ffc:	2400000c 	.word	0x2400000c

08001000 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d009      	beq.n	8001028 <BSP_LED_Off+0x28>
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d006      	beq.n	8001028 <BSP_LED_Off+0x28>
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d003      	beq.n	8001028 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001020:	f06f 0301 	mvn.w	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e00b      	b.n	8001040 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4a08      	ldr	r2, [pc, #32]	@ (800104c <BSP_LED_Off+0x4c>)
 800102c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <BSP_LED_Off+0x50>)
 8001034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	f000 fd88 	bl	8001b50 <HAL_GPIO_WritePin>
  }

  return ret;
 8001040:	68fb      	ldr	r3, [r7, #12]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2400000c 	.word	0x2400000c
 8001050:	0800515c 	.word	0x0800515c

08001054 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	4613      	mov	r3, r2
 8001062:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001064:	4b2e      	ldr	r3, [pc, #184]	@ (8001120 <BSP_PB_Init+0xcc>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	4a2d      	ldr	r2, [pc, #180]	@ (8001120 <BSP_PB_Init+0xcc>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001074:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <BSP_PB_Init+0xcc>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001082:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001086:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001088:	2302      	movs	r3, #2
 800108a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800108c:	2302      	movs	r3, #2
 800108e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10c      	bne.n	80010b0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <BSP_PB_Init+0xd0>)
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	f107 020c 	add.w	r2, r7, #12
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fb89 	bl	80017c0 <HAL_GPIO_Init>
 80010ae:	e031      	b.n	8001114 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80010b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010b4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001124 <BSP_PB_Init+0xd0>)
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	f107 020c 	add.w	r2, r7, #12
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fb7b 	bl	80017c0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4a16      	ldr	r2, [pc, #88]	@ (8001128 <BSP_PB_Init+0xd4>)
 80010d0:	441a      	add	r2, r3
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4915      	ldr	r1, [pc, #84]	@ (800112c <BSP_PB_Init+0xd8>)
 80010d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010da:	4619      	mov	r1, r3
 80010dc:	4610      	mov	r0, r2
 80010de:	f000 fb1e 	bl	800171e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4a10      	ldr	r2, [pc, #64]	@ (8001128 <BSP_PB_Init+0xd4>)
 80010e8:	1898      	adds	r0, r3, r2
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4a10      	ldr	r2, [pc, #64]	@ (8001130 <BSP_PB_Init+0xdc>)
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	461a      	mov	r2, r3
 80010f4:	2100      	movs	r1, #0
 80010f6:	f000 faf3 	bl	80016e0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80010fa:	2028      	movs	r0, #40	@ 0x28
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <BSP_PB_Init+0xe0>)
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	f000 faa3 	bl	8001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800110c:	2328      	movs	r3, #40	@ 0x28
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fab9 	bl	8001686 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	58024400 	.word	0x58024400
 8001124:	24000018 	.word	0x24000018
 8001128:	240000c0 	.word	0x240000c0
 800112c:	08005164 	.word	0x08005164
 8001130:	2400001c 	.word	0x2400001c
 8001134:	24000020 	.word	0x24000020

08001138 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <BSP_PB_IRQHandler+0x20>)
 8001148:	4413      	add	r3, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fafc 	bl	8001748 <HAL_EXTI_IRQHandler>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	240000c0 	.word	0x240000c0

0800115c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001172:	f06f 0301 	mvn.w	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e018      	b.n	80011ac <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2294      	movs	r2, #148	@ 0x94
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	4a0d      	ldr	r2, [pc, #52]	@ (80011b8 <BSP_COM_Init+0x5c>)
 8001184:	4413      	add	r3, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f86e 	bl	8001268 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2294      	movs	r2, #148	@ 0x94
 8001190:	fb02 f303 	mul.w	r3, r2, r3
 8001194:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <BSP_COM_Init+0x5c>)
 8001196:	4413      	add	r3, r2
 8001198:	6839      	ldr	r1, [r7, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f80e 	bl	80011bc <MX_USART3_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80011a6:	f06f 0303 	mvn.w	r3, #3
 80011aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	240000c8 	.word	0x240000c8

080011bc <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_USART3_Init+0x60>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	220c      	movs	r2, #12
 80011da:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	895b      	ldrh	r3, [r3, #10]
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	891b      	ldrh	r3, [r3, #8]
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	899b      	ldrh	r3, [r3, #12]
 80011fc:	461a      	mov	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001208:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f001 ffe6 	bl	80031dc <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	24000008 	.word	0x24000008

08001220 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001228:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <__io_putchar+0x30>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	2394      	movs	r3, #148	@ 0x94
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	4a07      	ldr	r2, [pc, #28]	@ (8001254 <__io_putchar+0x34>)
 8001236:	1898      	adds	r0, r3, r2
 8001238:	1d39      	adds	r1, r7, #4
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	2201      	movs	r2, #1
 8001240:	f002 f826 	bl	8003290 <HAL_UART_Transmit>
  return ch;
 8001244:	687b      	ldr	r3, [r7, #4]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2400015c 	.word	0x2400015c
 8001254:	240000c8 	.word	0x240000c8

08001258 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fd1f 	bl	8000ca0 <BSP_PB_Callback>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	@ 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001270:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <COM1_MspInit+0xa8>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001276:	4a26      	ldr	r2, [pc, #152]	@ (8001310 <COM1_MspInit+0xa8>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001280:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <COM1_MspInit+0xa8>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <COM1_MspInit+0xa8>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001294:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <COM1_MspInit+0xa8>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <COM1_MspInit+0xa8>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <COM1_MspInit+0xa8>)
 80012ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b2:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <COM1_MspInit+0xa8>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <COM1_MspInit+0xa8>)
 80012be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80012ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ce:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80012dc:	2307      	movs	r3, #7
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480b      	ldr	r0, [pc, #44]	@ (8001314 <COM1_MspInit+0xac>)
 80012e8:	f000 fa6a 	bl	80017c0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80012ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012f0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80012f6:	2307      	movs	r3, #7
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4804      	ldr	r0, [pc, #16]	@ (8001314 <COM1_MspInit+0xac>)
 8001302:	f000 fa5d 	bl	80017c0 <HAL_GPIO_Init>
}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	@ 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	58024400 	.word	0x58024400
 8001314:	58020c00 	.word	0x58020c00

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131e:	2003      	movs	r0, #3
 8001320:	f000 f98c 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001324:	f001 fac6 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8001328:	4602      	mov	r2, r0
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <HAL_Init+0x68>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	4913      	ldr	r1, [pc, #76]	@ (8001384 <HAL_Init+0x6c>)
 8001336:	5ccb      	ldrb	r3, [r1, r3]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <HAL_Init+0x68>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	4a0e      	ldr	r2, [pc, #56]	@ (8001384 <HAL_Init+0x6c>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	fa22 f303 	lsr.w	r3, r2, r3
 8001358:	4a0b      	ldr	r2, [pc, #44]	@ (8001388 <HAL_Init+0x70>)
 800135a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800135c:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <HAL_Init+0x74>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f814 	bl	8001390 <HAL_InitTick>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e002      	b.n	8001378 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001372:	f7ff fcaf 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	58024400 	.word	0x58024400
 8001384:	0800514c 	.word	0x0800514c
 8001388:	24000004 	.word	0x24000004
 800138c:	24000000 	.word	0x24000000

08001390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <HAL_InitTick+0x60>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e021      	b.n	80013e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <HAL_InitTick+0x64>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <HAL_InitTick+0x60>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f971 	bl	80016a2 <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00e      	b.n	80013e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d80a      	bhi.n	80013e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f000 f93b 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013dc:	4a06      	ldr	r2, [pc, #24]	@ (80013f8 <HAL_InitTick+0x68>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	24000028 	.word	0x24000028
 80013f4:	24000000 	.word	0x24000000
 80013f8:	24000024 	.word	0x24000024

080013fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	24000028 	.word	0x24000028
 8001420:	24000160 	.word	0x24000160

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	24000160 	.word	0x24000160

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff ffee 	bl	8001424 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <HAL_Delay+0x44>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001462:	bf00      	nop
 8001464:	f7ff ffde 	bl	8001424 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	24000028 	.word	0x24000028

08001484 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_GetREVID+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	0c1b      	lsrs	r3, r3, #16
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	5c001000 	.word	0x5c001000

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <__NVIC_SetPriorityGrouping+0x40>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <__NVIC_SetPriorityGrouping+0x40>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00
 80014e0:	05fa0000 	.word	0x05fa0000

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4907      	ldr	r1, [pc, #28]	@ (8001538 <__NVIC_EnableIRQ+0x38>)
 800151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	@ (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	@ (800158c <__NVIC_SetPriority+0x50>)
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	@ 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	@ 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff8e 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff29 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff40 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff90 	bl	8001590 <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5f 	bl	800153c <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff33 	bl	8001500 <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa4 	bl	80015f8 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_GetCurrentCPUID+0x20>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016c8:	2b70      	cmp	r3, #112	@ 0x70
 80016ca:	d101      	bne.n	80016d0 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e000      	b.n	80016d2 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 80016d0:	2301      	movs	r3, #1
  }
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	460b      	mov	r3, r1
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e00a      	b.n	8001712 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80016fc:	7afb      	ldrb	r3, [r7, #11]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d103      	bne.n	800170a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	605a      	str	r2, [r3, #4]
      break;
 8001708:	e002      	b.n	8001710 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
      break;
 800170e:	bf00      	nop
  }

  return status;
 8001710:	7dfb      	ldrb	r3, [r7, #23]
}
 8001712:	4618      	mov	r0, r3
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e003      	b.n	800173a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001738:	2300      	movs	r3, #0
  }
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0c1b      	lsrs	r3, r3, #16
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	2201      	movs	r2, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800176c:	f7ff ffa6 	bl	80016bc <HAL_GetCurrentCPUID>
 8001770:	4603      	mov	r3, r0
 8001772:	2b03      	cmp	r3, #3
 8001774:	d105      	bne.n	8001782 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	011a      	lsls	r2, r3, #4
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_EXTI_IRQHandler+0x70>)
 800177c:	4413      	add	r3, r2
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e004      	b.n	800178c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	011a      	lsls	r2, r3, #4
 8001786:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <HAL_EXTI_IRQHandler+0x74>)
 8001788:	4413      	add	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4798      	blx	r3
    }
  }
}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	58000088 	.word	0x58000088
 80017bc:	580000c8 	.word	0x580000c8

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	@ 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017ce:	4b89      	ldr	r3, [pc, #548]	@ (80019f4 <HAL_GPIO_Init+0x234>)
 80017d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017d2:	e194      	b.n	8001afe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8186 	beq.w	8001af8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d005      	beq.n	8001804 <HAL_GPIO_Init+0x44>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d130      	bne.n	8001866 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800183a:	2201      	movs	r2, #1
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	f003 0201 	and.w	r2, r3, #1
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b03      	cmp	r3, #3
 8001870:	d017      	beq.n	80018a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d123      	bne.n	80018f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	69b9      	ldr	r1, [r7, #24]
 80018f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0203 	and.w	r2, r3, #3
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80e0 	beq.w	8001af8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	4b2f      	ldr	r3, [pc, #188]	@ (80019f8 <HAL_GPIO_Init+0x238>)
 800193a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800193e:	4a2e      	ldr	r2, [pc, #184]	@ (80019f8 <HAL_GPIO_Init+0x238>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001948:	4b2b      	ldr	r3, [pc, #172]	@ (80019f8 <HAL_GPIO_Init+0x238>)
 800194a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001956:	4a29      	ldr	r2, [pc, #164]	@ (80019fc <HAL_GPIO_Init+0x23c>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a20      	ldr	r2, [pc, #128]	@ (8001a00 <HAL_GPIO_Init+0x240>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d052      	beq.n	8001a28 <HAL_GPIO_Init+0x268>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a1f      	ldr	r2, [pc, #124]	@ (8001a04 <HAL_GPIO_Init+0x244>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d031      	beq.n	80019ee <HAL_GPIO_Init+0x22e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a1e      	ldr	r2, [pc, #120]	@ (8001a08 <HAL_GPIO_Init+0x248>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d02b      	beq.n	80019ea <HAL_GPIO_Init+0x22a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a1d      	ldr	r2, [pc, #116]	@ (8001a0c <HAL_GPIO_Init+0x24c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d025      	beq.n	80019e6 <HAL_GPIO_Init+0x226>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a10 <HAL_GPIO_Init+0x250>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d01f      	beq.n	80019e2 <HAL_GPIO_Init+0x222>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <HAL_GPIO_Init+0x254>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d019      	beq.n	80019de <HAL_GPIO_Init+0x21e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001a18 <HAL_GPIO_Init+0x258>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <HAL_GPIO_Init+0x21a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a19      	ldr	r2, [pc, #100]	@ (8001a1c <HAL_GPIO_Init+0x25c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00d      	beq.n	80019d6 <HAL_GPIO_Init+0x216>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a18      	ldr	r2, [pc, #96]	@ (8001a20 <HAL_GPIO_Init+0x260>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d007      	beq.n	80019d2 <HAL_GPIO_Init+0x212>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a17      	ldr	r2, [pc, #92]	@ (8001a24 <HAL_GPIO_Init+0x264>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_GPIO_Init+0x20e>
 80019ca:	2309      	movs	r3, #9
 80019cc:	e02d      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019ce:	230a      	movs	r3, #10
 80019d0:	e02b      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019d2:	2308      	movs	r3, #8
 80019d4:	e029      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019d6:	2307      	movs	r3, #7
 80019d8:	e027      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019da:	2306      	movs	r3, #6
 80019dc:	e025      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019de:	2305      	movs	r3, #5
 80019e0:	e023      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019e2:	2304      	movs	r3, #4
 80019e4:	e021      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019e6:	2303      	movs	r3, #3
 80019e8:	e01f      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e01d      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e01b      	b.n	8001a2a <HAL_GPIO_Init+0x26a>
 80019f2:	bf00      	nop
 80019f4:	58000080 	.word	0x58000080
 80019f8:	58024400 	.word	0x58024400
 80019fc:	58000400 	.word	0x58000400
 8001a00:	58020000 	.word	0x58020000
 8001a04:	58020400 	.word	0x58020400
 8001a08:	58020800 	.word	0x58020800
 8001a0c:	58020c00 	.word	0x58020c00
 8001a10:	58021000 	.word	0x58021000
 8001a14:	58021400 	.word	0x58021400
 8001a18:	58021800 	.word	0x58021800
 8001a1c:	58021c00 	.word	0x58021c00
 8001a20:	58022000 	.word	0x58022000
 8001a24:	58022400 	.word	0x58022400
 8001a28:	2300      	movs	r3, #0
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	f002 0203 	and.w	r2, r2, #3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4093      	lsls	r3, r2
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a3a:	4938      	ldr	r1, [pc, #224]	@ (8001b1c <HAL_GPIO_Init+0x35c>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	3301      	adds	r3, #1
 8001afc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f47f ae63 	bne.w	80017d4 <HAL_GPIO_Init+0x14>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	3724      	adds	r7, #36	@ 0x24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	58000400 	.word	0x58000400

08001b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e001      	b.n	8001b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b6c:	e003      	b.n	8001b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	041a      	lsls	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001b8c:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <HAL_HSEM_FastTake+0x2c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3320      	adds	r3, #32
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	4a07      	ldr	r2, [pc, #28]	@ (8001bb4 <HAL_HSEM_FastTake+0x30>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e000      	b.n	8001ba2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	58026400 	.word	0x58026400
 8001bb4:	80000300 	.word	0x80000300

08001bb8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001bc2:	4906      	ldr	r1, [pc, #24]	@ (8001bdc <HAL_HSEM_Release+0x24>)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	58026400 	.word	0x58026400

08001be0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001be8:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	2b06      	cmp	r3, #6
 8001bf2:	d00a      	beq.n	8001c0a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001bf4:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e040      	b.n	8001c88 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e03e      	b.n	8001c88 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c0a:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001c12:	491f      	ldr	r1, [pc, #124]	@ (8001c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c1a:	f7ff fc03 	bl	8001424 <HAL_GetTick>
 8001c1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c20:	e009      	b.n	8001c36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c22:	f7ff fbff 	bl	8001424 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c30:	d901      	bls.n	8001c36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e028      	b.n	8001c88 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c36:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c42:	d1ee      	bne.n	8001c22 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b1e      	cmp	r3, #30
 8001c48:	d008      	beq.n	8001c5c <HAL_PWREx_ConfigSupply+0x7c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c4e:	d005      	beq.n	8001c5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b1d      	cmp	r3, #29
 8001c54:	d002      	beq.n	8001c5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c5a:	d114      	bne.n	8001c86 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001c5c:	f7ff fbe2 	bl	8001424 <HAL_GetTick>
 8001c60:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c62:	e009      	b.n	8001c78 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c64:	f7ff fbde 	bl	8001424 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c72:	d901      	bls.n	8001c78 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e007      	b.n	8001c88 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c84:	d1ee      	bne.n	8001c64 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	58024800 	.word	0x58024800

08001c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	@ 0x30
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f000 bc48 	b.w	8002538 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8088 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb6:	4b99      	ldr	r3, [pc, #612]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cc0:	4b96      	ldr	r3, [pc, #600]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d007      	beq.n	8001cdc <HAL_RCC_OscConfig+0x48>
 8001ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cce:	2b18      	cmp	r3, #24
 8001cd0:	d111      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x62>
 8001cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d10c      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	4b8f      	ldr	r3, [pc, #572]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d06d      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x130>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d169      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f000 bc21 	b.w	8002538 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x7a>
 8001d00:	4b86      	ldr	r3, [pc, #536]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a85      	ldr	r2, [pc, #532]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e02e      	b.n	8001d6c <HAL_RCC_OscConfig+0xd8>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x9c>
 8001d16:	4b81      	ldr	r3, [pc, #516]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a80      	ldr	r2, [pc, #512]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b7e      	ldr	r3, [pc, #504]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7d      	ldr	r2, [pc, #500]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e01d      	b.n	8001d6c <HAL_RCC_OscConfig+0xd8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0xc0>
 8001d3a:	4b78      	ldr	r3, [pc, #480]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a77      	ldr	r2, [pc, #476]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b75      	ldr	r3, [pc, #468]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a74      	ldr	r2, [pc, #464]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0xd8>
 8001d54:	4b71      	ldr	r3, [pc, #452]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a70      	ldr	r2, [pc, #448]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b6e      	ldr	r3, [pc, #440]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a6d      	ldr	r2, [pc, #436]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7ff fb56 	bl	8001424 <HAL_GetTick>
 8001d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fb52 	bl	8001424 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	@ 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e3d4      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d8e:	4b63      	ldr	r3, [pc, #396]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe8>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fb42 	bl	8001424 <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fb3e 	bl	8001424 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	@ 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e3c0      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001db6:	4b59      	ldr	r3, [pc, #356]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x110>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80ca 	beq.w	8001f68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd4:	4b51      	ldr	r3, [pc, #324]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ddc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dde:	4b4f      	ldr	r3, [pc, #316]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <HAL_RCC_OscConfig+0x166>
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	2b18      	cmp	r3, #24
 8001dee:	d156      	bne.n	8001e9e <HAL_RCC_OscConfig+0x20a>
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d151      	bne.n	8001e9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfa:	4b48      	ldr	r3, [pc, #288]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x17e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e392      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e12:	4b42      	ldr	r3, [pc, #264]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 0219 	bic.w	r2, r3, #25
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	493f      	ldr	r1, [pc, #252]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff fafe 	bl	8001424 <HAL_GetTick>
 8001e28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fafa 	bl	8001424 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e37c      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e3e:	4b37      	ldr	r3, [pc, #220]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4a:	f7ff fb1b 	bl	8001484 <HAL_GetREVID>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d817      	bhi.n	8001e88 <HAL_RCC_OscConfig+0x1f4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b40      	cmp	r3, #64	@ 0x40
 8001e5e:	d108      	bne.n	8001e72 <HAL_RCC_OscConfig+0x1de>
 8001e60:	4b2e      	ldr	r3, [pc, #184]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e68:	4a2c      	ldr	r2, [pc, #176]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e70:	e07a      	b.n	8001f68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b2a      	ldr	r3, [pc, #168]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	031b      	lsls	r3, r3, #12
 8001e80:	4926      	ldr	r1, [pc, #152]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e86:	e06f      	b.n	8001f68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	4921      	ldr	r1, [pc, #132]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e9c:	e064      	b.n	8001f68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d047      	beq.n	8001f36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0219 	bic.w	r2, r3, #25
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	491a      	ldr	r1, [pc, #104]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fab4 	bl	8001424 <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fab0 	bl	8001424 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e332      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ed2:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	f7ff fad1 	bl	8001484 <HAL_GetREVID>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d819      	bhi.n	8001f20 <HAL_RCC_OscConfig+0x28c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2b40      	cmp	r3, #64	@ 0x40
 8001ef2:	d108      	bne.n	8001f06 <HAL_RCC_OscConfig+0x272>
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001efc:	4a07      	ldr	r2, [pc, #28]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f02:	6053      	str	r3, [r2, #4]
 8001f04:	e030      	b.n	8001f68 <HAL_RCC_OscConfig+0x2d4>
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	031b      	lsls	r3, r3, #12
 8001f14:	4901      	ldr	r1, [pc, #4]	@ (8001f1c <HAL_RCC_OscConfig+0x288>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
 8001f1a:	e025      	b.n	8001f68 <HAL_RCC_OscConfig+0x2d4>
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	4b9a      	ldr	r3, [pc, #616]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	4997      	ldr	r1, [pc, #604]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
 8001f34:	e018      	b.n	8001f68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f36:	4b95      	ldr	r3, [pc, #596]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a94      	ldr	r2, [pc, #592]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff fa6f 	bl	8001424 <HAL_GetTick>
 8001f46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fa6b 	bl	8001424 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e2ed      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f5c:	4b8b      	ldr	r3, [pc, #556]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80a9 	beq.w	80020c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f76:	4b85      	ldr	r3, [pc, #532]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f80:	4b82      	ldr	r3, [pc, #520]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d007      	beq.n	8001f9c <HAL_RCC_OscConfig+0x308>
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2b18      	cmp	r3, #24
 8001f90:	d13a      	bne.n	8002008 <HAL_RCC_OscConfig+0x374>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d135      	bne.n	8002008 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f9c:	4b7b      	ldr	r3, [pc, #492]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x320>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b80      	cmp	r3, #128	@ 0x80
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e2c1      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fb4:	f7ff fa66 	bl	8001484 <HAL_GetREVID>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d817      	bhi.n	8001ff2 <HAL_RCC_OscConfig+0x35e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_OscConfig+0x348>
 8001fca:	4b70      	ldr	r3, [pc, #448]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001fd8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fda:	e075      	b.n	80020c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fdc:	4b6b      	ldr	r3, [pc, #428]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	069b      	lsls	r3, r3, #26
 8001fea:	4968      	ldr	r1, [pc, #416]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ff0:	e06a      	b.n	80020c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ff2:	4b66      	ldr	r3, [pc, #408]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	061b      	lsls	r3, r3, #24
 8002000:	4962      	ldr	r1, [pc, #392]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002002:	4313      	orrs	r3, r2
 8002004:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002006:	e05f      	b.n	80020c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d042      	beq.n	8002096 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002010:	4b5e      	ldr	r3, [pc, #376]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a5d      	ldr	r2, [pc, #372]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800201a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff fa02 	bl	8001424 <HAL_GetTick>
 8002020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002024:	f7ff f9fe 	bl	8001424 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e280      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002036:	4b55      	ldr	r3, [pc, #340]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002042:	f7ff fa1f 	bl	8001484 <HAL_GetREVID>
 8002046:	4603      	mov	r3, r0
 8002048:	f241 0203 	movw	r2, #4099	@ 0x1003
 800204c:	4293      	cmp	r3, r2
 800204e:	d817      	bhi.n	8002080 <HAL_RCC_OscConfig+0x3ec>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	2b20      	cmp	r3, #32
 8002056:	d108      	bne.n	800206a <HAL_RCC_OscConfig+0x3d6>
 8002058:	4b4c      	ldr	r3, [pc, #304]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002060:	4a4a      	ldr	r2, [pc, #296]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002062:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002066:	6053      	str	r3, [r2, #4]
 8002068:	e02e      	b.n	80020c8 <HAL_RCC_OscConfig+0x434>
 800206a:	4b48      	ldr	r3, [pc, #288]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	069b      	lsls	r3, r3, #26
 8002078:	4944      	ldr	r1, [pc, #272]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
 800207e:	e023      	b.n	80020c8 <HAL_RCC_OscConfig+0x434>
 8002080:	4b42      	ldr	r3, [pc, #264]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	061b      	lsls	r3, r3, #24
 800208e:	493f      	ldr	r1, [pc, #252]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002090:	4313      	orrs	r3, r2
 8002092:	60cb      	str	r3, [r1, #12]
 8002094:	e018      	b.n	80020c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002096:	4b3d      	ldr	r3, [pc, #244]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a3c      	ldr	r2, [pc, #240]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 800209c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7ff f9bf 	bl	8001424 <HAL_GetTick>
 80020a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020aa:	f7ff f9bb 	bl	8001424 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e23d      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020bc:	4b33      	ldr	r3, [pc, #204]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f0      	bne.n	80020aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d036      	beq.n	8002142 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d019      	beq.n	8002110 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020dc:	4b2b      	ldr	r3, [pc, #172]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 80020de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e0:	4a2a      	ldr	r2, [pc, #168]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e8:	f7ff f99c 	bl	8001424 <HAL_GetTick>
 80020ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f0:	f7ff f998 	bl	8001424 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e21a      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002102:	4b22      	ldr	r3, [pc, #136]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x45c>
 800210e:	e018      	b.n	8002142 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002110:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002114:	4a1d      	ldr	r2, [pc, #116]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7ff f982 	bl	8001424 <HAL_GetTick>
 8002120:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002124:	f7ff f97e 	bl	8001424 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e200      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002136:	4b15      	ldr	r3, [pc, #84]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d039      	beq.n	80021c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01c      	beq.n	8002190 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002156:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a0c      	ldr	r2, [pc, #48]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 800215c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002160:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002162:	f7ff f95f 	bl	8001424 <HAL_GetTick>
 8002166:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800216a:	f7ff f95b 	bl	8001424 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e1dd      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800217c:	4b03      	ldr	r3, [pc, #12]	@ (800218c <HAL_RCC_OscConfig+0x4f8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x4d6>
 8002188:	e01b      	b.n	80021c2 <HAL_RCC_OscConfig+0x52e>
 800218a:	bf00      	nop
 800218c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002190:	4b9b      	ldr	r3, [pc, #620]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a9a      	ldr	r2, [pc, #616]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002196:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800219a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800219c:	f7ff f942 	bl	8001424 <HAL_GetTick>
 80021a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a4:	f7ff f93e 	bl	8001424 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1c0      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021b6:	4b92      	ldr	r3, [pc, #584]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8081 	beq.w	80022d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002404 <HAL_RCC_OscConfig+0x770>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a8b      	ldr	r2, [pc, #556]	@ (8002404 <HAL_RCC_OscConfig+0x770>)
 80021d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021dc:	f7ff f922 	bl	8001424 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e4:	f7ff f91e 	bl	8001424 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1a0      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021f6:	4b83      	ldr	r3, [pc, #524]	@ (8002404 <HAL_RCC_OscConfig+0x770>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d106      	bne.n	8002218 <HAL_RCC_OscConfig+0x584>
 800220a:	4b7d      	ldr	r3, [pc, #500]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220e:	4a7c      	ldr	r2, [pc, #496]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6713      	str	r3, [r2, #112]	@ 0x70
 8002216:	e02d      	b.n	8002274 <HAL_RCC_OscConfig+0x5e0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x5a6>
 8002220:	4b77      	ldr	r3, [pc, #476]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002224:	4a76      	ldr	r2, [pc, #472]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	6713      	str	r3, [r2, #112]	@ 0x70
 800222c:	4b74      	ldr	r3, [pc, #464]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002230:	4a73      	ldr	r2, [pc, #460]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002232:	f023 0304 	bic.w	r3, r3, #4
 8002236:	6713      	str	r3, [r2, #112]	@ 0x70
 8002238:	e01c      	b.n	8002274 <HAL_RCC_OscConfig+0x5e0>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b05      	cmp	r3, #5
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x5c8>
 8002242:	4b6f      	ldr	r3, [pc, #444]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002246:	4a6e      	ldr	r2, [pc, #440]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	6713      	str	r3, [r2, #112]	@ 0x70
 800224e:	4b6c      	ldr	r3, [pc, #432]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002252:	4a6b      	ldr	r2, [pc, #428]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6713      	str	r3, [r2, #112]	@ 0x70
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0x5e0>
 800225c:	4b68      	ldr	r3, [pc, #416]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002260:	4a67      	ldr	r2, [pc, #412]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	6713      	str	r3, [r2, #112]	@ 0x70
 8002268:	4b65      	ldr	r3, [pc, #404]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226c:	4a64      	ldr	r2, [pc, #400]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 800226e:	f023 0304 	bic.w	r3, r3, #4
 8002272:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d015      	beq.n	80022a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7ff f8d2 	bl	8001424 <HAL_GetTick>
 8002280:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002282:	e00a      	b.n	800229a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002284:	f7ff f8ce 	bl	8001424 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e14e      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800229a:	4b59      	ldr	r3, [pc, #356]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0ee      	beq.n	8002284 <HAL_RCC_OscConfig+0x5f0>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7ff f8bc 	bl	8001424 <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7ff f8b8 	bl	8001424 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e138      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ee      	bne.n	80022b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 812d 	beq.w	8002536 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022dc:	4b48      	ldr	r3, [pc, #288]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022e4:	2b18      	cmp	r3, #24
 80022e6:	f000 80bd 	beq.w	8002464 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	f040 809e 	bne.w	8002430 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b42      	ldr	r3, [pc, #264]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a41      	ldr	r2, [pc, #260]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80022fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7ff f890 	bl	8001424 <HAL_GetTick>
 8002304:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7ff f88c 	bl	8001424 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e10e      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800231a:	4b39      	ldr	r3, [pc, #228]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002326:	4b36      	ldr	r3, [pc, #216]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002328:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800232a:	4b37      	ldr	r3, [pc, #220]	@ (8002408 <HAL_RCC_OscConfig+0x774>)
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	430a      	orrs	r2, r1
 800233a:	4931      	ldr	r1, [pc, #196]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 800233c:	4313      	orrs	r3, r2
 800233e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	3b01      	subs	r3, #1
 8002346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800234e:	3b01      	subs	r3, #1
 8002350:	025b      	lsls	r3, r3, #9
 8002352:	b29b      	uxth	r3, r3
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235a:	3b01      	subs	r3, #1
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002368:	3b01      	subs	r3, #1
 800236a:	061b      	lsls	r3, r3, #24
 800236c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002370:	4923      	ldr	r1, [pc, #140]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002372:	4313      	orrs	r3, r2
 8002374:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002376:	4b22      	ldr	r3, [pc, #136]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	4a21      	ldr	r2, [pc, #132]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002382:	4b1f      	ldr	r3, [pc, #124]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <HAL_RCC_OscConfig+0x778>)
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800238e:	00d2      	lsls	r2, r2, #3
 8002390:	491b      	ldr	r1, [pc, #108]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002396:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	f023 020c 	bic.w	r2, r3, #12
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	4917      	ldr	r1, [pc, #92]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023a8:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	f023 0202 	bic.w	r2, r3, #2
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b4:	4912      	ldr	r1, [pc, #72]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023be:	4a10      	ldr	r2, [pc, #64]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e2:	4a07      	ldr	r2, [pc, #28]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ea:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <HAL_RCC_OscConfig+0x76c>)
 80023f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7ff f815 	bl	8001424 <HAL_GetTick>
 80023fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023fc:	e011      	b.n	8002422 <HAL_RCC_OscConfig+0x78e>
 80023fe:	bf00      	nop
 8002400:	58024400 	.word	0x58024400
 8002404:	58024800 	.word	0x58024800
 8002408:	fffffc0c 	.word	0xfffffc0c
 800240c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7ff f808 	bl	8001424 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e08a      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002422:	4b47      	ldr	r3, [pc, #284]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x77c>
 800242e:	e082      	b.n	8002536 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002430:	4b43      	ldr	r3, [pc, #268]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a42      	ldr	r2, [pc, #264]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 8002436:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fff2 	bl	8001424 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe ffee 	bl	8001424 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e070      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002456:	4b3a      	ldr	r3, [pc, #232]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x7b0>
 8002462:	e068      	b.n	8002536 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002464:	4b36      	ldr	r3, [pc, #216]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800246a:	4b35      	ldr	r3, [pc, #212]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	2b01      	cmp	r3, #1
 8002476:	d031      	beq.n	80024dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f003 0203 	and.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d12a      	bne.n	80024dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d122      	bne.n	80024dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d11a      	bne.n	80024dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	0a5b      	lsrs	r3, r3, #9
 80024aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d111      	bne.n	80024dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	0c1b      	lsrs	r3, r3, #16
 80024bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d108      	bne.n	80024dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	0e1b      	lsrs	r3, r3, #24
 80024ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e02b      	b.n	8002538 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80024e0:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 80024e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d01f      	beq.n	8002536 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80024f6:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 80024f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fa:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002502:	f7fe ff8f 	bl	8001424 <HAL_GetTick>
 8002506:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002508:	bf00      	nop
 800250a:	f7fe ff8b 	bl	8001424 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	4293      	cmp	r3, r2
 8002514:	d0f9      	beq.n	800250a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002516:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 8002518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <HAL_RCC_OscConfig+0x8b0>)
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002522:	00d2      	lsls	r2, r2, #3
 8002524:	4906      	ldr	r1, [pc, #24]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 8002526:	4313      	orrs	r3, r2
 8002528:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800252a:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <HAL_RCC_OscConfig+0x8ac>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3730      	adds	r7, #48	@ 0x30
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	58024400 	.word	0x58024400
 8002544:	ffff0007 	.word	0xffff0007

08002548 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e19c      	b.n	8002896 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b8a      	ldr	r3, [pc, #552]	@ (8002788 <HAL_RCC_ClockConfig+0x240>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d910      	bls.n	800258c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b87      	ldr	r3, [pc, #540]	@ (8002788 <HAL_RCC_ClockConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 020f 	bic.w	r2, r3, #15
 8002572:	4985      	ldr	r1, [pc, #532]	@ (8002788 <HAL_RCC_ClockConfig+0x240>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b83      	ldr	r3, [pc, #524]	@ (8002788 <HAL_RCC_ClockConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e184      	b.n	8002896 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	4b7b      	ldr	r3, [pc, #492]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d908      	bls.n	80025ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025a8:	4b78      	ldr	r3, [pc, #480]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	4975      	ldr	r1, [pc, #468]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d010      	beq.n	80025e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	4b70      	ldr	r3, [pc, #448]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d908      	bls.n	80025e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025d6:	4b6d      	ldr	r3, [pc, #436]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	496a      	ldr	r1, [pc, #424]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d010      	beq.n	8002616 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	4b64      	ldr	r3, [pc, #400]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002600:	429a      	cmp	r2, r3
 8002602:	d908      	bls.n	8002616 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002604:	4b61      	ldr	r3, [pc, #388]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	495e      	ldr	r1, [pc, #376]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 8002612:	4313      	orrs	r3, r2
 8002614:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d010      	beq.n	8002644 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	4b59      	ldr	r3, [pc, #356]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800262e:	429a      	cmp	r2, r3
 8002630:	d908      	bls.n	8002644 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002632:	4b56      	ldr	r3, [pc, #344]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4953      	ldr	r1, [pc, #332]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 8002640:	4313      	orrs	r3, r2
 8002642:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d010      	beq.n	8002672 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	4b4d      	ldr	r3, [pc, #308]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	429a      	cmp	r2, r3
 800265e:	d908      	bls.n	8002672 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b4a      	ldr	r3, [pc, #296]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f023 020f 	bic.w	r2, r3, #15
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4947      	ldr	r1, [pc, #284]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 800266e:	4313      	orrs	r3, r2
 8002670:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d055      	beq.n	800272a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800267e:	4b43      	ldr	r3, [pc, #268]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	4940      	ldr	r1, [pc, #256]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 800268c:	4313      	orrs	r3, r2
 800268e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002698:	4b3c      	ldr	r3, [pc, #240]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d121      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0f6      	b.n	8002896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026b0:	4b36      	ldr	r3, [pc, #216]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d115      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0ea      	b.n	8002896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026c8:	4b30      	ldr	r3, [pc, #192]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0de      	b.n	8002896 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026d8:	4b2c      	ldr	r3, [pc, #176]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0d6      	b.n	8002896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026e8:	4b28      	ldr	r3, [pc, #160]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f023 0207 	bic.w	r2, r3, #7
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4925      	ldr	r1, [pc, #148]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fa:	f7fe fe93 	bl	8001424 <HAL_GetTick>
 80026fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002700:	e00a      	b.n	8002718 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002702:	f7fe fe8f 	bl	8001424 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e0be      	b.n	8002896 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002718:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	429a      	cmp	r2, r3
 8002728:	d1eb      	bne.n	8002702 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d010      	beq.n	8002758 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	4b14      	ldr	r3, [pc, #80]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	429a      	cmp	r2, r3
 8002744:	d208      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002746:	4b11      	ldr	r3, [pc, #68]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f023 020f 	bic.w	r2, r3, #15
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	490e      	ldr	r1, [pc, #56]	@ (800278c <HAL_RCC_ClockConfig+0x244>)
 8002754:	4313      	orrs	r3, r2
 8002756:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <HAL_RCC_ClockConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d214      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <HAL_RCC_ClockConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 020f 	bic.w	r2, r3, #15
 800276e:	4906      	ldr	r1, [pc, #24]	@ (8002788 <HAL_RCC_ClockConfig+0x240>)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b04      	ldr	r3, [pc, #16]	@ (8002788 <HAL_RCC_ClockConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e086      	b.n	8002896 <HAL_RCC_ClockConfig+0x34e>
 8002788:	52002000 	.word	0x52002000
 800278c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d010      	beq.n	80027be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	4b3f      	ldr	r3, [pc, #252]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d208      	bcs.n	80027be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027ac:	4b3c      	ldr	r3, [pc, #240]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	4939      	ldr	r1, [pc, #228]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d010      	beq.n	80027ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	4b34      	ldr	r3, [pc, #208]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d208      	bcs.n	80027ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027da:	4b31      	ldr	r3, [pc, #196]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	492e      	ldr	r1, [pc, #184]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d010      	beq.n	800281a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	4b28      	ldr	r3, [pc, #160]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002804:	429a      	cmp	r2, r3
 8002806:	d208      	bcs.n	800281a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002808:	4b25      	ldr	r3, [pc, #148]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	4922      	ldr	r1, [pc, #136]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 8002816:	4313      	orrs	r3, r2
 8002818:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d010      	beq.n	8002848 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002832:	429a      	cmp	r2, r3
 8002834:	d208      	bcs.n	8002848 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002836:	4b1a      	ldr	r3, [pc, #104]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4917      	ldr	r1, [pc, #92]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 8002844:	4313      	orrs	r3, r2
 8002846:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002848:	f000 f834 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	4912      	ldr	r1, [pc, #72]	@ (80028a4 <HAL_RCC_ClockConfig+0x35c>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_RCC_ClockConfig+0x358>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	4a0d      	ldr	r2, [pc, #52]	@ (80028a4 <HAL_RCC_ClockConfig+0x35c>)
 8002870:	5cd3      	ldrb	r3, [r2, r3]
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <HAL_RCC_ClockConfig+0x360>)
 800287e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002880:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <HAL_RCC_ClockConfig+0x364>)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002886:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <HAL_RCC_ClockConfig+0x368>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fd80 	bl	8001390 <HAL_InitTick>
 8002890:	4603      	mov	r3, r0
 8002892:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	58024400 	.word	0x58024400
 80028a4:	0800514c 	.word	0x0800514c
 80028a8:	24000004 	.word	0x24000004
 80028ac:	24000000 	.word	0x24000000
 80028b0:	24000024 	.word	0x24000024

080028b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	@ 0x24
 80028b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ba:	4bb3      	ldr	r3, [pc, #716]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028c2:	2b18      	cmp	r3, #24
 80028c4:	f200 8155 	bhi.w	8002b72 <HAL_RCC_GetSysClockFreq+0x2be>
 80028c8:	a201      	add	r2, pc, #4	@ (adr r2, 80028d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	08002935 	.word	0x08002935
 80028d4:	08002b73 	.word	0x08002b73
 80028d8:	08002b73 	.word	0x08002b73
 80028dc:	08002b73 	.word	0x08002b73
 80028e0:	08002b73 	.word	0x08002b73
 80028e4:	08002b73 	.word	0x08002b73
 80028e8:	08002b73 	.word	0x08002b73
 80028ec:	08002b73 	.word	0x08002b73
 80028f0:	0800295b 	.word	0x0800295b
 80028f4:	08002b73 	.word	0x08002b73
 80028f8:	08002b73 	.word	0x08002b73
 80028fc:	08002b73 	.word	0x08002b73
 8002900:	08002b73 	.word	0x08002b73
 8002904:	08002b73 	.word	0x08002b73
 8002908:	08002b73 	.word	0x08002b73
 800290c:	08002b73 	.word	0x08002b73
 8002910:	08002961 	.word	0x08002961
 8002914:	08002b73 	.word	0x08002b73
 8002918:	08002b73 	.word	0x08002b73
 800291c:	08002b73 	.word	0x08002b73
 8002920:	08002b73 	.word	0x08002b73
 8002924:	08002b73 	.word	0x08002b73
 8002928:	08002b73 	.word	0x08002b73
 800292c:	08002b73 	.word	0x08002b73
 8002930:	08002967 	.word	0x08002967
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002934:	4b94      	ldr	r3, [pc, #592]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d009      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002940:	4b91      	ldr	r3, [pc, #580]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	08db      	lsrs	r3, r3, #3
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	4a90      	ldr	r2, [pc, #576]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
 8002950:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002952:	e111      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002954:	4b8d      	ldr	r3, [pc, #564]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002956:	61bb      	str	r3, [r7, #24]
      break;
 8002958:	e10e      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800295a:	4b8d      	ldr	r3, [pc, #564]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800295c:	61bb      	str	r3, [r7, #24]
      break;
 800295e:	e10b      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002960:	4b8c      	ldr	r3, [pc, #560]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002962:	61bb      	str	r3, [r7, #24]
      break;
 8002964:	e108      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002966:	4b88      	ldr	r3, [pc, #544]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002970:	4b85      	ldr	r3, [pc, #532]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800297a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800297c:	4b82      	ldr	r3, [pc, #520]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002986:	4b80      	ldr	r3, [pc, #512]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	ee07 3a90 	vmov	s15, r3
 800299a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800299e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80e1 	beq.w	8002b6c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	f000 8083 	beq.w	8002ab8 <HAL_RCC_GetSysClockFreq+0x204>
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	f200 80a1 	bhi.w	8002afc <HAL_RCC_GetSysClockFreq+0x248>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x114>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d056      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029c6:	e099      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d02d      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	08db      	lsrs	r3, r3, #3
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	4a6b      	ldr	r2, [pc, #428]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029fe:	4b62      	ldr	r3, [pc, #392]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a12:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a2e:	e087      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002b9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a42:	4b51      	ldr	r3, [pc, #324]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4a:	ee07 3a90 	vmov	s15, r3
 8002a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a56:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a72:	e065      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ba0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a86:	4b40      	ldr	r3, [pc, #256]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8e:	ee07 3a90 	vmov	s15, r3
 8002a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a9a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ab6:	e043      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ba4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aca:	4b2f      	ldr	r3, [pc, #188]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ade:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002afa:	e021      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ba0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b22:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b40:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	0a5b      	lsrs	r3, r3, #9
 8002b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	ee07 3a90 	vmov	s15, r3
 8002b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b58:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b64:	ee17 3a90 	vmov	r3, s15
 8002b68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b6a:	e005      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
      break;
 8002b70:	e002      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b72:	4b07      	ldr	r3, [pc, #28]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b74:	61bb      	str	r3, [r7, #24]
      break;
 8002b76:	bf00      	nop
  }

  return sysclockfreq;
 8002b78:	69bb      	ldr	r3, [r7, #24]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	@ 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	58024400 	.word	0x58024400
 8002b8c:	03d09000 	.word	0x03d09000
 8002b90:	003d0900 	.word	0x003d0900
 8002b94:	017d7840 	.word	0x017d7840
 8002b98:	46000000 	.word	0x46000000
 8002b9c:	4c742400 	.word	0x4c742400
 8002ba0:	4a742400 	.word	0x4a742400
 8002ba4:	4bbebc20 	.word	0x4bbebc20

08002ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002bae:	f7ff fe81 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b10      	ldr	r3, [pc, #64]	@ (8002bf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	490f      	ldr	r1, [pc, #60]	@ (8002bfc <HAL_RCC_GetHCLKFreq+0x54>)
 8002bc0:	5ccb      	ldrb	r3, [r1, r3]
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <HAL_RCC_GetHCLKFreq+0x54>)
 8002bd6:	5cd3      	ldrb	r3, [r2, r3]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	4a07      	ldr	r2, [pc, #28]	@ (8002c00 <HAL_RCC_GetHCLKFreq+0x58>)
 8002be4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002be6:	4a07      	ldr	r2, [pc, #28]	@ (8002c04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <HAL_RCC_GetHCLKFreq+0x58>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	58024400 	.word	0x58024400
 8002bfc:	0800514c 	.word	0x0800514c
 8002c00:	24000004 	.word	0x24000004
 8002c04:	24000000 	.word	0x24000000

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c0c:	f7ff ffcc 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4904      	ldr	r1, [pc, #16]	@ (8002c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	0800514c 	.word	0x0800514c

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c38:	f7ff ffb6 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4904      	ldr	r1, [pc, #16]	@ (8002c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	0800514c 	.word	0x0800514c

08002c60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002c64:	f7ff ffa0 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4904      	ldr	r1, [pc, #16]	@ (8002c88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	58024400 	.word	0x58024400
 8002c88:	0800514c 	.word	0x0800514c

08002c8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	@ 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c94:	4ba1      	ldr	r3, [pc, #644]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002c9e:	4b9f      	ldr	r3, [pc, #636]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	0b1b      	lsrs	r3, r3, #12
 8002ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ca8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002caa:	4b9c      	ldr	r3, [pc, #624]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cae:	091b      	lsrs	r3, r3, #4
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002cb6:	4b99      	ldr	r3, [pc, #612]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cba:	08db      	lsrs	r3, r3, #3
 8002cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8111 	beq.w	8002efc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	f000 8083 	beq.w	8002de8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	f200 80a1 	bhi.w	8002e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d056      	beq.n	8002da4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002cf6:	e099      	b.n	8002e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cf8:	4b88      	ldr	r3, [pc, #544]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d02d      	beq.n	8002d60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d04:	4b85      	ldr	r3, [pc, #532]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	08db      	lsrs	r3, r3, #3
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	4a84      	ldr	r2, [pc, #528]	@ (8002f20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
 8002d14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002d5e:	e087      	b.n	8002e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002f28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d72:	4b6a      	ldr	r3, [pc, #424]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002da2:	e065      	b.n	8002e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db6:	4b59      	ldr	r3, [pc, #356]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002de6:	e043      	b.n	8002e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dfa:	4b48      	ldr	r3, [pc, #288]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e2a:	e021      	b.n	8002e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e3e:	4b37      	ldr	r3, [pc, #220]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002e70:	4b2a      	ldr	r3, [pc, #168]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	0a5b      	lsrs	r3, r3, #9
 8002e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e96:	ee17 2a90 	vmov	r2, s15
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea2:	0c1b      	lsrs	r3, r3, #16
 8002ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ea8:	ee07 3a90 	vmov	s15, r3
 8002eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ec4:	ee17 2a90 	vmov	r2, s15
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002ecc:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed0:	0e1b      	lsrs	r3, r3, #24
 8002ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef2:	ee17 2a90 	vmov	r2, s15
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002efa:	e008      	b.n	8002f0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
}
 8002f0e:	bf00      	nop
 8002f10:	3724      	adds	r7, #36	@ 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	03d09000 	.word	0x03d09000
 8002f24:	46000000 	.word	0x46000000
 8002f28:	4c742400 	.word	0x4c742400
 8002f2c:	4a742400 	.word	0x4a742400
 8002f30:	4bbebc20 	.word	0x4bbebc20

08002f34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	@ 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f3c:	4ba1      	ldr	r3, [pc, #644]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002f46:	4b9f      	ldr	r3, [pc, #636]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	0d1b      	lsrs	r3, r3, #20
 8002f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002f52:	4b9c      	ldr	r3, [pc, #624]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002f5e:	4b99      	ldr	r3, [pc, #612]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	08db      	lsrs	r3, r3, #3
 8002f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8111 	beq.w	80031a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	f000 8083 	beq.w	8003090 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	f200 80a1 	bhi.w	80030d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d056      	beq.n	800304c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002f9e:	e099      	b.n	80030d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fa0:	4b88      	ldr	r3, [pc, #544]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02d      	beq.n	8003008 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fac:	4b85      	ldr	r3, [pc, #532]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	08db      	lsrs	r3, r3, #3
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	4a84      	ldr	r2, [pc, #528]	@ (80031c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002fea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003006:	e087      	b.n	8003118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80031d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301a:	4b6a      	ldr	r3, [pc, #424]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302a:	ed97 6a03 	vldr	s12, [r7, #12]
 800302e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800303e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800304a:	e065      	b.n	8003118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80031d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800305a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305e:	4b59      	ldr	r3, [pc, #356]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003072:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800307a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800308e:	e043      	b.n	8003118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80031d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800309e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a2:	4b48      	ldr	r3, [pc, #288]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80030b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80030ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030d2:	e021      	b.n	8003118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80031d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80030e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e6:	4b37      	ldr	r3, [pc, #220]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80030fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80030fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800310a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003116:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003118:	4b2a      	ldr	r3, [pc, #168]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	0a5b      	lsrs	r3, r3, #9
 800311e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800312e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003132:	edd7 6a07 	vldr	s13, [r7, #28]
 8003136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800313a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313e:	ee17 2a90 	vmov	r2, s15
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003146:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	0c1b      	lsrs	r3, r3, #16
 800314c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003150:	ee07 3a90 	vmov	s15, r3
 8003154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800315c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003160:	edd7 6a07 	vldr	s13, [r7, #28]
 8003164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800316c:	ee17 2a90 	vmov	r2, s15
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003174:	4b13      	ldr	r3, [pc, #76]	@ (80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	0e1b      	lsrs	r3, r3, #24
 800317a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800318a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800318e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800319a:	ee17 2a90 	vmov	r2, s15
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80031a2:	e008      	b.n	80031b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
}
 80031b6:	bf00      	nop
 80031b8:	3724      	adds	r7, #36	@ 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	58024400 	.word	0x58024400
 80031c8:	03d09000 	.word	0x03d09000
 80031cc:	46000000 	.word	0x46000000
 80031d0:	4c742400 	.word	0x4c742400
 80031d4:	4a742400 	.word	0x4a742400
 80031d8:	4bbebc20 	.word	0x4bbebc20

080031dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e042      	b.n	8003274 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f83b 	bl	800327c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2224      	movs	r2, #36	@ 0x24
 800320a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fe28 	bl	8003e7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f8bd 	bl	80033ac <UART_SetConfig>
 8003232:	4603      	mov	r3, r0
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e01b      	b.n	8003274 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800324a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800325a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fea7 	bl	8003fc0 <UART_CheckIdleState>
 8003272:	4603      	mov	r3, r0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	@ 0x28
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d17b      	bne.n	80033a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_UART_Transmit+0x26>
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e074      	b.n	80033a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2221      	movs	r2, #33	@ 0x21
 80032c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032ca:	f7fe f8ab 	bl	8001424 <HAL_GetTick>
 80032ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	88fa      	ldrh	r2, [r7, #6]
 80032d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e8:	d108      	bne.n	80032fc <HAL_UART_Transmit+0x6c>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	e003      	b.n	8003304 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003304:	e030      	b.n	8003368 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	2180      	movs	r1, #128	@ 0x80
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 feff 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e03d      	b.n	80033a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800333c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	3302      	adds	r3, #2
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	e007      	b.n	8003356 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	781a      	ldrb	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3301      	adds	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1c8      	bne.n	8003306 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2200      	movs	r2, #0
 800337c:	2140      	movs	r1, #64	@ 0x40
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fec8 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e006      	b.n	80033a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
  }
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b092      	sub	sp, #72	@ 0x48
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4bbe      	ldr	r3, [pc, #760]	@ (80036d4 <UART_SetConfig+0x328>)
 80033dc:	4013      	ands	r3, r2
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4ab3      	ldr	r2, [pc, #716]	@ (80036d8 <UART_SetConfig+0x32c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003414:	4313      	orrs	r3, r2
 8003416:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	4baf      	ldr	r3, [pc, #700]	@ (80036dc <UART_SetConfig+0x330>)
 8003420:	4013      	ands	r3, r2
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003428:	430b      	orrs	r3, r1
 800342a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003432:	f023 010f 	bic.w	r1, r3, #15
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4aa6      	ldr	r2, [pc, #664]	@ (80036e0 <UART_SetConfig+0x334>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d177      	bne.n	800353c <UART_SetConfig+0x190>
 800344c:	4ba5      	ldr	r3, [pc, #660]	@ (80036e4 <UART_SetConfig+0x338>)
 800344e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003450:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003454:	2b28      	cmp	r3, #40	@ 0x28
 8003456:	d86d      	bhi.n	8003534 <UART_SetConfig+0x188>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <UART_SetConfig+0xb4>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003505 	.word	0x08003505
 8003464:	08003535 	.word	0x08003535
 8003468:	08003535 	.word	0x08003535
 800346c:	08003535 	.word	0x08003535
 8003470:	08003535 	.word	0x08003535
 8003474:	08003535 	.word	0x08003535
 8003478:	08003535 	.word	0x08003535
 800347c:	08003535 	.word	0x08003535
 8003480:	0800350d 	.word	0x0800350d
 8003484:	08003535 	.word	0x08003535
 8003488:	08003535 	.word	0x08003535
 800348c:	08003535 	.word	0x08003535
 8003490:	08003535 	.word	0x08003535
 8003494:	08003535 	.word	0x08003535
 8003498:	08003535 	.word	0x08003535
 800349c:	08003535 	.word	0x08003535
 80034a0:	08003515 	.word	0x08003515
 80034a4:	08003535 	.word	0x08003535
 80034a8:	08003535 	.word	0x08003535
 80034ac:	08003535 	.word	0x08003535
 80034b0:	08003535 	.word	0x08003535
 80034b4:	08003535 	.word	0x08003535
 80034b8:	08003535 	.word	0x08003535
 80034bc:	08003535 	.word	0x08003535
 80034c0:	0800351d 	.word	0x0800351d
 80034c4:	08003535 	.word	0x08003535
 80034c8:	08003535 	.word	0x08003535
 80034cc:	08003535 	.word	0x08003535
 80034d0:	08003535 	.word	0x08003535
 80034d4:	08003535 	.word	0x08003535
 80034d8:	08003535 	.word	0x08003535
 80034dc:	08003535 	.word	0x08003535
 80034e0:	08003525 	.word	0x08003525
 80034e4:	08003535 	.word	0x08003535
 80034e8:	08003535 	.word	0x08003535
 80034ec:	08003535 	.word	0x08003535
 80034f0:	08003535 	.word	0x08003535
 80034f4:	08003535 	.word	0x08003535
 80034f8:	08003535 	.word	0x08003535
 80034fc:	08003535 	.word	0x08003535
 8003500:	0800352d 	.word	0x0800352d
 8003504:	2301      	movs	r3, #1
 8003506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800350a:	e222      	b.n	8003952 <UART_SetConfig+0x5a6>
 800350c:	2304      	movs	r3, #4
 800350e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003512:	e21e      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003514:	2308      	movs	r3, #8
 8003516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800351a:	e21a      	b.n	8003952 <UART_SetConfig+0x5a6>
 800351c:	2310      	movs	r3, #16
 800351e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003522:	e216      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003524:	2320      	movs	r3, #32
 8003526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800352a:	e212      	b.n	8003952 <UART_SetConfig+0x5a6>
 800352c:	2340      	movs	r3, #64	@ 0x40
 800352e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003532:	e20e      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003534:	2380      	movs	r3, #128	@ 0x80
 8003536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800353a:	e20a      	b.n	8003952 <UART_SetConfig+0x5a6>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a69      	ldr	r2, [pc, #420]	@ (80036e8 <UART_SetConfig+0x33c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d130      	bne.n	80035a8 <UART_SetConfig+0x1fc>
 8003546:	4b67      	ldr	r3, [pc, #412]	@ (80036e4 <UART_SetConfig+0x338>)
 8003548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	2b05      	cmp	r3, #5
 8003550:	d826      	bhi.n	80035a0 <UART_SetConfig+0x1f4>
 8003552:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <UART_SetConfig+0x1ac>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	08003571 	.word	0x08003571
 800355c:	08003579 	.word	0x08003579
 8003560:	08003581 	.word	0x08003581
 8003564:	08003589 	.word	0x08003589
 8003568:	08003591 	.word	0x08003591
 800356c:	08003599 	.word	0x08003599
 8003570:	2300      	movs	r3, #0
 8003572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003576:	e1ec      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003578:	2304      	movs	r3, #4
 800357a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800357e:	e1e8      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003580:	2308      	movs	r3, #8
 8003582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003586:	e1e4      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003588:	2310      	movs	r3, #16
 800358a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800358e:	e1e0      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003590:	2320      	movs	r3, #32
 8003592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003596:	e1dc      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003598:	2340      	movs	r3, #64	@ 0x40
 800359a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800359e:	e1d8      	b.n	8003952 <UART_SetConfig+0x5a6>
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035a6:	e1d4      	b.n	8003952 <UART_SetConfig+0x5a6>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a4f      	ldr	r2, [pc, #316]	@ (80036ec <UART_SetConfig+0x340>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d130      	bne.n	8003614 <UART_SetConfig+0x268>
 80035b2:	4b4c      	ldr	r3, [pc, #304]	@ (80036e4 <UART_SetConfig+0x338>)
 80035b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	2b05      	cmp	r3, #5
 80035bc:	d826      	bhi.n	800360c <UART_SetConfig+0x260>
 80035be:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <UART_SetConfig+0x218>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	080035dd 	.word	0x080035dd
 80035c8:	080035e5 	.word	0x080035e5
 80035cc:	080035ed 	.word	0x080035ed
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	080035fd 	.word	0x080035fd
 80035d8:	08003605 	.word	0x08003605
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035e2:	e1b6      	b.n	8003952 <UART_SetConfig+0x5a6>
 80035e4:	2304      	movs	r3, #4
 80035e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035ea:	e1b2      	b.n	8003952 <UART_SetConfig+0x5a6>
 80035ec:	2308      	movs	r3, #8
 80035ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035f2:	e1ae      	b.n	8003952 <UART_SetConfig+0x5a6>
 80035f4:	2310      	movs	r3, #16
 80035f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035fa:	e1aa      	b.n	8003952 <UART_SetConfig+0x5a6>
 80035fc:	2320      	movs	r3, #32
 80035fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003602:	e1a6      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003604:	2340      	movs	r3, #64	@ 0x40
 8003606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800360a:	e1a2      	b.n	8003952 <UART_SetConfig+0x5a6>
 800360c:	2380      	movs	r3, #128	@ 0x80
 800360e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003612:	e19e      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a35      	ldr	r2, [pc, #212]	@ (80036f0 <UART_SetConfig+0x344>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d130      	bne.n	8003680 <UART_SetConfig+0x2d4>
 800361e:	4b31      	ldr	r3, [pc, #196]	@ (80036e4 <UART_SetConfig+0x338>)
 8003620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	2b05      	cmp	r3, #5
 8003628:	d826      	bhi.n	8003678 <UART_SetConfig+0x2cc>
 800362a:	a201      	add	r2, pc, #4	@ (adr r2, 8003630 <UART_SetConfig+0x284>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003649 	.word	0x08003649
 8003634:	08003651 	.word	0x08003651
 8003638:	08003659 	.word	0x08003659
 800363c:	08003661 	.word	0x08003661
 8003640:	08003669 	.word	0x08003669
 8003644:	08003671 	.word	0x08003671
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800364e:	e180      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003650:	2304      	movs	r3, #4
 8003652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003656:	e17c      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003658:	2308      	movs	r3, #8
 800365a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800365e:	e178      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003660:	2310      	movs	r3, #16
 8003662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003666:	e174      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003668:	2320      	movs	r3, #32
 800366a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800366e:	e170      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003670:	2340      	movs	r3, #64	@ 0x40
 8003672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003676:	e16c      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003678:	2380      	movs	r3, #128	@ 0x80
 800367a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800367e:	e168      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <UART_SetConfig+0x348>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d142      	bne.n	8003710 <UART_SetConfig+0x364>
 800368a:	4b16      	ldr	r3, [pc, #88]	@ (80036e4 <UART_SetConfig+0x338>)
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	2b05      	cmp	r3, #5
 8003694:	d838      	bhi.n	8003708 <UART_SetConfig+0x35c>
 8003696:	a201      	add	r2, pc, #4	@ (adr r2, 800369c <UART_SetConfig+0x2f0>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	080036b5 	.word	0x080036b5
 80036a0:	080036bd 	.word	0x080036bd
 80036a4:	080036c5 	.word	0x080036c5
 80036a8:	080036cd 	.word	0x080036cd
 80036ac:	080036f9 	.word	0x080036f9
 80036b0:	08003701 	.word	0x08003701
 80036b4:	2300      	movs	r3, #0
 80036b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036ba:	e14a      	b.n	8003952 <UART_SetConfig+0x5a6>
 80036bc:	2304      	movs	r3, #4
 80036be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036c2:	e146      	b.n	8003952 <UART_SetConfig+0x5a6>
 80036c4:	2308      	movs	r3, #8
 80036c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036ca:	e142      	b.n	8003952 <UART_SetConfig+0x5a6>
 80036cc:	2310      	movs	r3, #16
 80036ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036d2:	e13e      	b.n	8003952 <UART_SetConfig+0x5a6>
 80036d4:	cfff69f3 	.word	0xcfff69f3
 80036d8:	58000c00 	.word	0x58000c00
 80036dc:	11fff4ff 	.word	0x11fff4ff
 80036e0:	40011000 	.word	0x40011000
 80036e4:	58024400 	.word	0x58024400
 80036e8:	40004400 	.word	0x40004400
 80036ec:	40004800 	.word	0x40004800
 80036f0:	40004c00 	.word	0x40004c00
 80036f4:	40005000 	.word	0x40005000
 80036f8:	2320      	movs	r3, #32
 80036fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036fe:	e128      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003700:	2340      	movs	r3, #64	@ 0x40
 8003702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003706:	e124      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003708:	2380      	movs	r3, #128	@ 0x80
 800370a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800370e:	e120      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4acb      	ldr	r2, [pc, #812]	@ (8003a44 <UART_SetConfig+0x698>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d176      	bne.n	8003808 <UART_SetConfig+0x45c>
 800371a:	4bcb      	ldr	r3, [pc, #812]	@ (8003a48 <UART_SetConfig+0x69c>)
 800371c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003722:	2b28      	cmp	r3, #40	@ 0x28
 8003724:	d86c      	bhi.n	8003800 <UART_SetConfig+0x454>
 8003726:	a201      	add	r2, pc, #4	@ (adr r2, 800372c <UART_SetConfig+0x380>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	080037d1 	.word	0x080037d1
 8003730:	08003801 	.word	0x08003801
 8003734:	08003801 	.word	0x08003801
 8003738:	08003801 	.word	0x08003801
 800373c:	08003801 	.word	0x08003801
 8003740:	08003801 	.word	0x08003801
 8003744:	08003801 	.word	0x08003801
 8003748:	08003801 	.word	0x08003801
 800374c:	080037d9 	.word	0x080037d9
 8003750:	08003801 	.word	0x08003801
 8003754:	08003801 	.word	0x08003801
 8003758:	08003801 	.word	0x08003801
 800375c:	08003801 	.word	0x08003801
 8003760:	08003801 	.word	0x08003801
 8003764:	08003801 	.word	0x08003801
 8003768:	08003801 	.word	0x08003801
 800376c:	080037e1 	.word	0x080037e1
 8003770:	08003801 	.word	0x08003801
 8003774:	08003801 	.word	0x08003801
 8003778:	08003801 	.word	0x08003801
 800377c:	08003801 	.word	0x08003801
 8003780:	08003801 	.word	0x08003801
 8003784:	08003801 	.word	0x08003801
 8003788:	08003801 	.word	0x08003801
 800378c:	080037e9 	.word	0x080037e9
 8003790:	08003801 	.word	0x08003801
 8003794:	08003801 	.word	0x08003801
 8003798:	08003801 	.word	0x08003801
 800379c:	08003801 	.word	0x08003801
 80037a0:	08003801 	.word	0x08003801
 80037a4:	08003801 	.word	0x08003801
 80037a8:	08003801 	.word	0x08003801
 80037ac:	080037f1 	.word	0x080037f1
 80037b0:	08003801 	.word	0x08003801
 80037b4:	08003801 	.word	0x08003801
 80037b8:	08003801 	.word	0x08003801
 80037bc:	08003801 	.word	0x08003801
 80037c0:	08003801 	.word	0x08003801
 80037c4:	08003801 	.word	0x08003801
 80037c8:	08003801 	.word	0x08003801
 80037cc:	080037f9 	.word	0x080037f9
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037d6:	e0bc      	b.n	8003952 <UART_SetConfig+0x5a6>
 80037d8:	2304      	movs	r3, #4
 80037da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037de:	e0b8      	b.n	8003952 <UART_SetConfig+0x5a6>
 80037e0:	2308      	movs	r3, #8
 80037e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037e6:	e0b4      	b.n	8003952 <UART_SetConfig+0x5a6>
 80037e8:	2310      	movs	r3, #16
 80037ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037ee:	e0b0      	b.n	8003952 <UART_SetConfig+0x5a6>
 80037f0:	2320      	movs	r3, #32
 80037f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037f6:	e0ac      	b.n	8003952 <UART_SetConfig+0x5a6>
 80037f8:	2340      	movs	r3, #64	@ 0x40
 80037fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037fe:	e0a8      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003800:	2380      	movs	r3, #128	@ 0x80
 8003802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003806:	e0a4      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a8f      	ldr	r2, [pc, #572]	@ (8003a4c <UART_SetConfig+0x6a0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d130      	bne.n	8003874 <UART_SetConfig+0x4c8>
 8003812:	4b8d      	ldr	r3, [pc, #564]	@ (8003a48 <UART_SetConfig+0x69c>)
 8003814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	2b05      	cmp	r3, #5
 800381c:	d826      	bhi.n	800386c <UART_SetConfig+0x4c0>
 800381e:	a201      	add	r2, pc, #4	@ (adr r2, 8003824 <UART_SetConfig+0x478>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	0800383d 	.word	0x0800383d
 8003828:	08003845 	.word	0x08003845
 800382c:	0800384d 	.word	0x0800384d
 8003830:	08003855 	.word	0x08003855
 8003834:	0800385d 	.word	0x0800385d
 8003838:	08003865 	.word	0x08003865
 800383c:	2300      	movs	r3, #0
 800383e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003842:	e086      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003844:	2304      	movs	r3, #4
 8003846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800384a:	e082      	b.n	8003952 <UART_SetConfig+0x5a6>
 800384c:	2308      	movs	r3, #8
 800384e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003852:	e07e      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003854:	2310      	movs	r3, #16
 8003856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800385a:	e07a      	b.n	8003952 <UART_SetConfig+0x5a6>
 800385c:	2320      	movs	r3, #32
 800385e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003862:	e076      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003864:	2340      	movs	r3, #64	@ 0x40
 8003866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800386a:	e072      	b.n	8003952 <UART_SetConfig+0x5a6>
 800386c:	2380      	movs	r3, #128	@ 0x80
 800386e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003872:	e06e      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a75      	ldr	r2, [pc, #468]	@ (8003a50 <UART_SetConfig+0x6a4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d130      	bne.n	80038e0 <UART_SetConfig+0x534>
 800387e:	4b72      	ldr	r3, [pc, #456]	@ (8003a48 <UART_SetConfig+0x69c>)
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	2b05      	cmp	r3, #5
 8003888:	d826      	bhi.n	80038d8 <UART_SetConfig+0x52c>
 800388a:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <UART_SetConfig+0x4e4>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038a9 	.word	0x080038a9
 8003894:	080038b1 	.word	0x080038b1
 8003898:	080038b9 	.word	0x080038b9
 800389c:	080038c1 	.word	0x080038c1
 80038a0:	080038c9 	.word	0x080038c9
 80038a4:	080038d1 	.word	0x080038d1
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038ae:	e050      	b.n	8003952 <UART_SetConfig+0x5a6>
 80038b0:	2304      	movs	r3, #4
 80038b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038b6:	e04c      	b.n	8003952 <UART_SetConfig+0x5a6>
 80038b8:	2308      	movs	r3, #8
 80038ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038be:	e048      	b.n	8003952 <UART_SetConfig+0x5a6>
 80038c0:	2310      	movs	r3, #16
 80038c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038c6:	e044      	b.n	8003952 <UART_SetConfig+0x5a6>
 80038c8:	2320      	movs	r3, #32
 80038ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038ce:	e040      	b.n	8003952 <UART_SetConfig+0x5a6>
 80038d0:	2340      	movs	r3, #64	@ 0x40
 80038d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038d6:	e03c      	b.n	8003952 <UART_SetConfig+0x5a6>
 80038d8:	2380      	movs	r3, #128	@ 0x80
 80038da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038de:	e038      	b.n	8003952 <UART_SetConfig+0x5a6>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5b      	ldr	r2, [pc, #364]	@ (8003a54 <UART_SetConfig+0x6a8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d130      	bne.n	800394c <UART_SetConfig+0x5a0>
 80038ea:	4b57      	ldr	r3, [pc, #348]	@ (8003a48 <UART_SetConfig+0x69c>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d826      	bhi.n	8003944 <UART_SetConfig+0x598>
 80038f6:	a201      	add	r2, pc, #4	@ (adr r2, 80038fc <UART_SetConfig+0x550>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003915 	.word	0x08003915
 8003900:	0800391d 	.word	0x0800391d
 8003904:	08003925 	.word	0x08003925
 8003908:	0800392d 	.word	0x0800392d
 800390c:	08003935 	.word	0x08003935
 8003910:	0800393d 	.word	0x0800393d
 8003914:	2302      	movs	r3, #2
 8003916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800391a:	e01a      	b.n	8003952 <UART_SetConfig+0x5a6>
 800391c:	2304      	movs	r3, #4
 800391e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003922:	e016      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003924:	2308      	movs	r3, #8
 8003926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800392a:	e012      	b.n	8003952 <UART_SetConfig+0x5a6>
 800392c:	2310      	movs	r3, #16
 800392e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003932:	e00e      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003934:	2320      	movs	r3, #32
 8003936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800393a:	e00a      	b.n	8003952 <UART_SetConfig+0x5a6>
 800393c:	2340      	movs	r3, #64	@ 0x40
 800393e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003942:	e006      	b.n	8003952 <UART_SetConfig+0x5a6>
 8003944:	2380      	movs	r3, #128	@ 0x80
 8003946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800394a:	e002      	b.n	8003952 <UART_SetConfig+0x5a6>
 800394c:	2380      	movs	r3, #128	@ 0x80
 800394e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3f      	ldr	r2, [pc, #252]	@ (8003a54 <UART_SetConfig+0x6a8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	f040 80f8 	bne.w	8003b4e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800395e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003962:	2b20      	cmp	r3, #32
 8003964:	dc46      	bgt.n	80039f4 <UART_SetConfig+0x648>
 8003966:	2b02      	cmp	r3, #2
 8003968:	f2c0 8082 	blt.w	8003a70 <UART_SetConfig+0x6c4>
 800396c:	3b02      	subs	r3, #2
 800396e:	2b1e      	cmp	r3, #30
 8003970:	d87e      	bhi.n	8003a70 <UART_SetConfig+0x6c4>
 8003972:	a201      	add	r2, pc, #4	@ (adr r2, 8003978 <UART_SetConfig+0x5cc>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	080039fb 	.word	0x080039fb
 800397c:	08003a71 	.word	0x08003a71
 8003980:	08003a03 	.word	0x08003a03
 8003984:	08003a71 	.word	0x08003a71
 8003988:	08003a71 	.word	0x08003a71
 800398c:	08003a71 	.word	0x08003a71
 8003990:	08003a13 	.word	0x08003a13
 8003994:	08003a71 	.word	0x08003a71
 8003998:	08003a71 	.word	0x08003a71
 800399c:	08003a71 	.word	0x08003a71
 80039a0:	08003a71 	.word	0x08003a71
 80039a4:	08003a71 	.word	0x08003a71
 80039a8:	08003a71 	.word	0x08003a71
 80039ac:	08003a71 	.word	0x08003a71
 80039b0:	08003a23 	.word	0x08003a23
 80039b4:	08003a71 	.word	0x08003a71
 80039b8:	08003a71 	.word	0x08003a71
 80039bc:	08003a71 	.word	0x08003a71
 80039c0:	08003a71 	.word	0x08003a71
 80039c4:	08003a71 	.word	0x08003a71
 80039c8:	08003a71 	.word	0x08003a71
 80039cc:	08003a71 	.word	0x08003a71
 80039d0:	08003a71 	.word	0x08003a71
 80039d4:	08003a71 	.word	0x08003a71
 80039d8:	08003a71 	.word	0x08003a71
 80039dc:	08003a71 	.word	0x08003a71
 80039e0:	08003a71 	.word	0x08003a71
 80039e4:	08003a71 	.word	0x08003a71
 80039e8:	08003a71 	.word	0x08003a71
 80039ec:	08003a71 	.word	0x08003a71
 80039f0:	08003a63 	.word	0x08003a63
 80039f4:	2b40      	cmp	r3, #64	@ 0x40
 80039f6:	d037      	beq.n	8003a68 <UART_SetConfig+0x6bc>
 80039f8:	e03a      	b.n	8003a70 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80039fa:	f7ff f931 	bl	8002c60 <HAL_RCCEx_GetD3PCLK1Freq>
 80039fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003a00:	e03c      	b.n	8003a7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f940 	bl	8002c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a10:	e034      	b.n	8003a7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a12:	f107 0318 	add.w	r3, r7, #24
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fa8c 	bl	8002f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a20:	e02c      	b.n	8003a7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a22:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <UART_SetConfig+0x69c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003a2e:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <UART_SetConfig+0x69c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	08db      	lsrs	r3, r3, #3
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	4a07      	ldr	r2, [pc, #28]	@ (8003a58 <UART_SetConfig+0x6ac>)
 8003a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a40:	e01c      	b.n	8003a7c <UART_SetConfig+0x6d0>
 8003a42:	bf00      	nop
 8003a44:	40011400 	.word	0x40011400
 8003a48:	58024400 	.word	0x58024400
 8003a4c:	40007800 	.word	0x40007800
 8003a50:	40007c00 	.word	0x40007c00
 8003a54:	58000c00 	.word	0x58000c00
 8003a58:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8003a5c:	4b9d      	ldr	r3, [pc, #628]	@ (8003cd4 <UART_SetConfig+0x928>)
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a60:	e00c      	b.n	8003a7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003a62:	4b9d      	ldr	r3, [pc, #628]	@ (8003cd8 <UART_SetConfig+0x92c>)
 8003a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a66:	e009      	b.n	8003a7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a6e:	e005      	b.n	8003a7c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003a7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 81de 	beq.w	8003e40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	4a94      	ldr	r2, [pc, #592]	@ (8003cdc <UART_SetConfig+0x930>)
 8003a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a96:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4413      	add	r3, r2
 8003aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d305      	bcc.n	8003ab4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d903      	bls.n	8003abc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003aba:	e1c1      	b.n	8003e40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003abe:	2200      	movs	r2, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	60fa      	str	r2, [r7, #12]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	4a84      	ldr	r2, [pc, #528]	@ (8003cdc <UART_SetConfig+0x930>)
 8003aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ade:	f7fc fc4f 	bl	8000380 <__aeabi_uldivmod>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	020b      	lsls	r3, r1, #8
 8003af4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003af8:	0202      	lsls	r2, r0, #8
 8003afa:	6979      	ldr	r1, [r7, #20]
 8003afc:	6849      	ldr	r1, [r1, #4]
 8003afe:	0849      	lsrs	r1, r1, #1
 8003b00:	2000      	movs	r0, #0
 8003b02:	460c      	mov	r4, r1
 8003b04:	4605      	mov	r5, r0
 8003b06:	eb12 0804 	adds.w	r8, r2, r4
 8003b0a:	eb43 0905 	adc.w	r9, r3, r5
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	469a      	mov	sl, r3
 8003b16:	4693      	mov	fp, r2
 8003b18:	4652      	mov	r2, sl
 8003b1a:	465b      	mov	r3, fp
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	4649      	mov	r1, r9
 8003b20:	f7fc fc2e 	bl	8000380 <__aeabi_uldivmod>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4613      	mov	r3, r2
 8003b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b32:	d308      	bcc.n	8003b46 <UART_SetConfig+0x79a>
 8003b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b3a:	d204      	bcs.n	8003b46 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b42:	60da      	str	r2, [r3, #12]
 8003b44:	e17c      	b.n	8003e40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003b4c:	e178      	b.n	8003e40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b56:	f040 80c5 	bne.w	8003ce4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8003b5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	dc48      	bgt.n	8003bf4 <UART_SetConfig+0x848>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	db7b      	blt.n	8003c5e <UART_SetConfig+0x8b2>
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d879      	bhi.n	8003c5e <UART_SetConfig+0x8b2>
 8003b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b70 <UART_SetConfig+0x7c4>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003bfb 	.word	0x08003bfb
 8003b74:	08003c03 	.word	0x08003c03
 8003b78:	08003c5f 	.word	0x08003c5f
 8003b7c:	08003c5f 	.word	0x08003c5f
 8003b80:	08003c0b 	.word	0x08003c0b
 8003b84:	08003c5f 	.word	0x08003c5f
 8003b88:	08003c5f 	.word	0x08003c5f
 8003b8c:	08003c5f 	.word	0x08003c5f
 8003b90:	08003c1b 	.word	0x08003c1b
 8003b94:	08003c5f 	.word	0x08003c5f
 8003b98:	08003c5f 	.word	0x08003c5f
 8003b9c:	08003c5f 	.word	0x08003c5f
 8003ba0:	08003c5f 	.word	0x08003c5f
 8003ba4:	08003c5f 	.word	0x08003c5f
 8003ba8:	08003c5f 	.word	0x08003c5f
 8003bac:	08003c5f 	.word	0x08003c5f
 8003bb0:	08003c2b 	.word	0x08003c2b
 8003bb4:	08003c5f 	.word	0x08003c5f
 8003bb8:	08003c5f 	.word	0x08003c5f
 8003bbc:	08003c5f 	.word	0x08003c5f
 8003bc0:	08003c5f 	.word	0x08003c5f
 8003bc4:	08003c5f 	.word	0x08003c5f
 8003bc8:	08003c5f 	.word	0x08003c5f
 8003bcc:	08003c5f 	.word	0x08003c5f
 8003bd0:	08003c5f 	.word	0x08003c5f
 8003bd4:	08003c5f 	.word	0x08003c5f
 8003bd8:	08003c5f 	.word	0x08003c5f
 8003bdc:	08003c5f 	.word	0x08003c5f
 8003be0:	08003c5f 	.word	0x08003c5f
 8003be4:	08003c5f 	.word	0x08003c5f
 8003be8:	08003c5f 	.word	0x08003c5f
 8003bec:	08003c5f 	.word	0x08003c5f
 8003bf0:	08003c51 	.word	0x08003c51
 8003bf4:	2b40      	cmp	r3, #64	@ 0x40
 8003bf6:	d02e      	beq.n	8003c56 <UART_SetConfig+0x8aa>
 8003bf8:	e031      	b.n	8003c5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bfa:	f7ff f805 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8003bfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003c00:	e033      	b.n	8003c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c02:	f7ff f817 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8003c06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003c08:	e02f      	b.n	8003c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff f83c 	bl	8002c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c18:	e027      	b.n	8003c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c1a:	f107 0318 	add.w	r3, r7, #24
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff f988 	bl	8002f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c28:	e01f      	b.n	8003c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce0 <UART_SetConfig+0x934>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003c36:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce0 <UART_SetConfig+0x934>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	08db      	lsrs	r3, r3, #3
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	4a24      	ldr	r2, [pc, #144]	@ (8003cd4 <UART_SetConfig+0x928>)
 8003c42:	fa22 f303 	lsr.w	r3, r2, r3
 8003c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c48:	e00f      	b.n	8003c6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8003c4a:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <UART_SetConfig+0x928>)
 8003c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c4e:	e00c      	b.n	8003c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003c50:	4b21      	ldr	r3, [pc, #132]	@ (8003cd8 <UART_SetConfig+0x92c>)
 8003c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c54:	e009      	b.n	8003c6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c5c:	e005      	b.n	8003c6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003c68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80e7 	beq.w	8003e40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	4a19      	ldr	r2, [pc, #100]	@ (8003cdc <UART_SetConfig+0x930>)
 8003c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c84:	005a      	lsls	r2, r3, #1
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	085b      	lsrs	r3, r3, #1
 8003c8c:	441a      	add	r2, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c96:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9a:	2b0f      	cmp	r3, #15
 8003c9c:	d916      	bls.n	8003ccc <UART_SetConfig+0x920>
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca4:	d212      	bcs.n	8003ccc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f023 030f 	bic.w	r3, r3, #15
 8003cae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003cc8:	60da      	str	r2, [r3, #12]
 8003cca:	e0b9      	b.n	8003e40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003cd2:	e0b5      	b.n	8003e40 <UART_SetConfig+0xa94>
 8003cd4:	03d09000 	.word	0x03d09000
 8003cd8:	003d0900 	.word	0x003d0900
 8003cdc:	08005168 	.word	0x08005168
 8003ce0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ce4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	dc49      	bgt.n	8003d80 <UART_SetConfig+0x9d4>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	db7c      	blt.n	8003dea <UART_SetConfig+0xa3e>
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d87a      	bhi.n	8003dea <UART_SetConfig+0xa3e>
 8003cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cfc <UART_SetConfig+0x950>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d87 	.word	0x08003d87
 8003d00:	08003d8f 	.word	0x08003d8f
 8003d04:	08003deb 	.word	0x08003deb
 8003d08:	08003deb 	.word	0x08003deb
 8003d0c:	08003d97 	.word	0x08003d97
 8003d10:	08003deb 	.word	0x08003deb
 8003d14:	08003deb 	.word	0x08003deb
 8003d18:	08003deb 	.word	0x08003deb
 8003d1c:	08003da7 	.word	0x08003da7
 8003d20:	08003deb 	.word	0x08003deb
 8003d24:	08003deb 	.word	0x08003deb
 8003d28:	08003deb 	.word	0x08003deb
 8003d2c:	08003deb 	.word	0x08003deb
 8003d30:	08003deb 	.word	0x08003deb
 8003d34:	08003deb 	.word	0x08003deb
 8003d38:	08003deb 	.word	0x08003deb
 8003d3c:	08003db7 	.word	0x08003db7
 8003d40:	08003deb 	.word	0x08003deb
 8003d44:	08003deb 	.word	0x08003deb
 8003d48:	08003deb 	.word	0x08003deb
 8003d4c:	08003deb 	.word	0x08003deb
 8003d50:	08003deb 	.word	0x08003deb
 8003d54:	08003deb 	.word	0x08003deb
 8003d58:	08003deb 	.word	0x08003deb
 8003d5c:	08003deb 	.word	0x08003deb
 8003d60:	08003deb 	.word	0x08003deb
 8003d64:	08003deb 	.word	0x08003deb
 8003d68:	08003deb 	.word	0x08003deb
 8003d6c:	08003deb 	.word	0x08003deb
 8003d70:	08003deb 	.word	0x08003deb
 8003d74:	08003deb 	.word	0x08003deb
 8003d78:	08003deb 	.word	0x08003deb
 8003d7c:	08003ddd 	.word	0x08003ddd
 8003d80:	2b40      	cmp	r3, #64	@ 0x40
 8003d82:	d02e      	beq.n	8003de2 <UART_SetConfig+0xa36>
 8003d84:	e031      	b.n	8003dea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d86:	f7fe ff3f 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8003d8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003d8c:	e033      	b.n	8003df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d8e:	f7fe ff51 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8003d92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003d94:	e02f      	b.n	8003df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe ff76 	bl	8002c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003da4:	e027      	b.n	8003df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003da6:	f107 0318 	add.w	r3, r7, #24
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff f8c2 	bl	8002f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003db4:	e01f      	b.n	8003df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003db6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e6c <UART_SetConfig+0xac0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e6c <UART_SetConfig+0xac0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	08db      	lsrs	r3, r3, #3
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	4a28      	ldr	r2, [pc, #160]	@ (8003e70 <UART_SetConfig+0xac4>)
 8003dce:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003dd4:	e00f      	b.n	8003df6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8003dd6:	4b26      	ldr	r3, [pc, #152]	@ (8003e70 <UART_SetConfig+0xac4>)
 8003dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003dda:	e00c      	b.n	8003df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003ddc:	4b25      	ldr	r3, [pc, #148]	@ (8003e74 <UART_SetConfig+0xac8>)
 8003dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003de0:	e009      	b.n	8003df6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003de8:	e005      	b.n	8003df6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003df4:	bf00      	nop
    }

    if (pclk != 0U)
 8003df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d021      	beq.n	8003e40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	4a1d      	ldr	r2, [pc, #116]	@ (8003e78 <UART_SetConfig+0xacc>)
 8003e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e06:	461a      	mov	r2, r3
 8003e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	441a      	add	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	d909      	bls.n	8003e3a <UART_SetConfig+0xa8e>
 8003e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e2c:	d205      	bcs.n	8003e3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60da      	str	r2, [r3, #12]
 8003e38:	e002      	b.n	8003e40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2200      	movs	r2, #0
 8003e54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e5c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3748      	adds	r7, #72	@ 0x48
 8003e64:	46bd      	mov	sp, r7
 8003e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e6a:	bf00      	nop
 8003e6c:	58024400 	.word	0x58024400
 8003e70:	03d09000 	.word	0x03d09000
 8003e74:	003d0900 	.word	0x003d0900
 8003e78:	08005168 	.word	0x08005168

08003e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01a      	beq.n	8003f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f7a:	d10a      	bne.n	8003f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b098      	sub	sp, #96	@ 0x60
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fd0:	f7fd fa28 	bl	8001424 <HAL_GetTick>
 8003fd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d12f      	bne.n	8004044 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fec:	2200      	movs	r2, #0
 8003fee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f88e 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d022      	beq.n	8004044 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800400c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004012:	653b      	str	r3, [r7, #80]	@ 0x50
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800401c:	647b      	str	r3, [r7, #68]	@ 0x44
 800401e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800402a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e6      	bne.n	8003ffe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e063      	b.n	800410c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b04      	cmp	r3, #4
 8004050:	d149      	bne.n	80040e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004052:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800405a:	2200      	movs	r2, #0
 800405c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f857 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d03c      	beq.n	80040e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	623b      	str	r3, [r7, #32]
   return(result);
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800408a:	633b      	str	r3, [r7, #48]	@ 0x30
 800408c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e6      	bne.n	800406c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3308      	adds	r3, #8
 80040bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040be:	61fa      	str	r2, [r7, #28]
 80040c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	69b9      	ldr	r1, [r7, #24]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	617b      	str	r3, [r7, #20]
   return(result);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e5      	bne.n	800409e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e012      	b.n	800410c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3758      	adds	r7, #88	@ 0x58
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004124:	e04f      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d04b      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fd f979 	bl	8001424 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <UART_WaitOnFlagUntilTimeout+0x30>
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e04e      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d037      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b80      	cmp	r3, #128	@ 0x80
 800415a:	d034      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b40      	cmp	r3, #64	@ 0x40
 8004160:	d031      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b08      	cmp	r3, #8
 800416e:	d110      	bne.n	8004192 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2208      	movs	r2, #8
 8004176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f839 	bl	80041f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2208      	movs	r2, #8
 8004182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e029      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800419c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a0:	d111      	bne.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f81f 	bl	80041f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e00f      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d0a0      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b095      	sub	sp, #84	@ 0x54
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004208:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800420c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004216:	643b      	str	r3, [r7, #64]	@ 0x40
 8004218:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800421c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e6      	bne.n	80041f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3308      	adds	r3, #8
 8004230:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	61fb      	str	r3, [r7, #28]
   return(result);
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	4b1e      	ldr	r3, [pc, #120]	@ (80042b8 <UART_EndRxTransfer+0xc8>)
 800423e:	4013      	ands	r3, r2
 8004240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3308      	adds	r3, #8
 8004248:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800424a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800424c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e5      	bne.n	800422a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004262:	2b01      	cmp	r3, #1
 8004264:	d118      	bne.n	8004298 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	60bb      	str	r3, [r7, #8]
   return(result);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f023 0310 	bic.w	r3, r3, #16
 800427a:	647b      	str	r3, [r7, #68]	@ 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6979      	ldr	r1, [r7, #20]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	613b      	str	r3, [r7, #16]
   return(result);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e6      	bne.n	8004266 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042ac:	bf00      	nop
 80042ae:	3754      	adds	r7, #84	@ 0x54
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	effffffe 	.word	0xeffffffe

080042bc <std>:
 80042bc:	2300      	movs	r3, #0
 80042be:	b510      	push	{r4, lr}
 80042c0:	4604      	mov	r4, r0
 80042c2:	e9c0 3300 	strd	r3, r3, [r0]
 80042c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042ca:	6083      	str	r3, [r0, #8]
 80042cc:	8181      	strh	r1, [r0, #12]
 80042ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80042d0:	81c2      	strh	r2, [r0, #14]
 80042d2:	6183      	str	r3, [r0, #24]
 80042d4:	4619      	mov	r1, r3
 80042d6:	2208      	movs	r2, #8
 80042d8:	305c      	adds	r0, #92	@ 0x5c
 80042da:	f000 f906 	bl	80044ea <memset>
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <std+0x58>)
 80042e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <std+0x5c>)
 80042e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <std+0x60>)
 80042e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <std+0x64>)
 80042ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <std+0x68>)
 80042f0:	6224      	str	r4, [r4, #32]
 80042f2:	429c      	cmp	r4, r3
 80042f4:	d006      	beq.n	8004304 <std+0x48>
 80042f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042fa:	4294      	cmp	r4, r2
 80042fc:	d002      	beq.n	8004304 <std+0x48>
 80042fe:	33d0      	adds	r3, #208	@ 0xd0
 8004300:	429c      	cmp	r4, r3
 8004302:	d105      	bne.n	8004310 <std+0x54>
 8004304:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800430c:	f000 b966 	b.w	80045dc <__retarget_lock_init_recursive>
 8004310:	bd10      	pop	{r4, pc}
 8004312:	bf00      	nop
 8004314:	08004465 	.word	0x08004465
 8004318:	08004487 	.word	0x08004487
 800431c:	080044bf 	.word	0x080044bf
 8004320:	080044e3 	.word	0x080044e3
 8004324:	24000164 	.word	0x24000164

08004328 <stdio_exit_handler>:
 8004328:	4a02      	ldr	r2, [pc, #8]	@ (8004334 <stdio_exit_handler+0xc>)
 800432a:	4903      	ldr	r1, [pc, #12]	@ (8004338 <stdio_exit_handler+0x10>)
 800432c:	4803      	ldr	r0, [pc, #12]	@ (800433c <stdio_exit_handler+0x14>)
 800432e:	f000 b869 	b.w	8004404 <_fwalk_sglue>
 8004332:	bf00      	nop
 8004334:	2400002c 	.word	0x2400002c
 8004338:	08004e79 	.word	0x08004e79
 800433c:	2400003c 	.word	0x2400003c

08004340 <cleanup_stdio>:
 8004340:	6841      	ldr	r1, [r0, #4]
 8004342:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <cleanup_stdio+0x34>)
 8004344:	4299      	cmp	r1, r3
 8004346:	b510      	push	{r4, lr}
 8004348:	4604      	mov	r4, r0
 800434a:	d001      	beq.n	8004350 <cleanup_stdio+0x10>
 800434c:	f000 fd94 	bl	8004e78 <_fflush_r>
 8004350:	68a1      	ldr	r1, [r4, #8]
 8004352:	4b09      	ldr	r3, [pc, #36]	@ (8004378 <cleanup_stdio+0x38>)
 8004354:	4299      	cmp	r1, r3
 8004356:	d002      	beq.n	800435e <cleanup_stdio+0x1e>
 8004358:	4620      	mov	r0, r4
 800435a:	f000 fd8d 	bl	8004e78 <_fflush_r>
 800435e:	68e1      	ldr	r1, [r4, #12]
 8004360:	4b06      	ldr	r3, [pc, #24]	@ (800437c <cleanup_stdio+0x3c>)
 8004362:	4299      	cmp	r1, r3
 8004364:	d004      	beq.n	8004370 <cleanup_stdio+0x30>
 8004366:	4620      	mov	r0, r4
 8004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436c:	f000 bd84 	b.w	8004e78 <_fflush_r>
 8004370:	bd10      	pop	{r4, pc}
 8004372:	bf00      	nop
 8004374:	24000164 	.word	0x24000164
 8004378:	240001cc 	.word	0x240001cc
 800437c:	24000234 	.word	0x24000234

08004380 <global_stdio_init.part.0>:
 8004380:	b510      	push	{r4, lr}
 8004382:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <global_stdio_init.part.0+0x30>)
 8004384:	4c0b      	ldr	r4, [pc, #44]	@ (80043b4 <global_stdio_init.part.0+0x34>)
 8004386:	4a0c      	ldr	r2, [pc, #48]	@ (80043b8 <global_stdio_init.part.0+0x38>)
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	4620      	mov	r0, r4
 800438c:	2200      	movs	r2, #0
 800438e:	2104      	movs	r1, #4
 8004390:	f7ff ff94 	bl	80042bc <std>
 8004394:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004398:	2201      	movs	r2, #1
 800439a:	2109      	movs	r1, #9
 800439c:	f7ff ff8e 	bl	80042bc <std>
 80043a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043a4:	2202      	movs	r2, #2
 80043a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043aa:	2112      	movs	r1, #18
 80043ac:	f7ff bf86 	b.w	80042bc <std>
 80043b0:	2400029c 	.word	0x2400029c
 80043b4:	24000164 	.word	0x24000164
 80043b8:	08004329 	.word	0x08004329

080043bc <__sfp_lock_acquire>:
 80043bc:	4801      	ldr	r0, [pc, #4]	@ (80043c4 <__sfp_lock_acquire+0x8>)
 80043be:	f000 b90e 	b.w	80045de <__retarget_lock_acquire_recursive>
 80043c2:	bf00      	nop
 80043c4:	240002a5 	.word	0x240002a5

080043c8 <__sfp_lock_release>:
 80043c8:	4801      	ldr	r0, [pc, #4]	@ (80043d0 <__sfp_lock_release+0x8>)
 80043ca:	f000 b909 	b.w	80045e0 <__retarget_lock_release_recursive>
 80043ce:	bf00      	nop
 80043d0:	240002a5 	.word	0x240002a5

080043d4 <__sinit>:
 80043d4:	b510      	push	{r4, lr}
 80043d6:	4604      	mov	r4, r0
 80043d8:	f7ff fff0 	bl	80043bc <__sfp_lock_acquire>
 80043dc:	6a23      	ldr	r3, [r4, #32]
 80043de:	b11b      	cbz	r3, 80043e8 <__sinit+0x14>
 80043e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e4:	f7ff bff0 	b.w	80043c8 <__sfp_lock_release>
 80043e8:	4b04      	ldr	r3, [pc, #16]	@ (80043fc <__sinit+0x28>)
 80043ea:	6223      	str	r3, [r4, #32]
 80043ec:	4b04      	ldr	r3, [pc, #16]	@ (8004400 <__sinit+0x2c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f5      	bne.n	80043e0 <__sinit+0xc>
 80043f4:	f7ff ffc4 	bl	8004380 <global_stdio_init.part.0>
 80043f8:	e7f2      	b.n	80043e0 <__sinit+0xc>
 80043fa:	bf00      	nop
 80043fc:	08004341 	.word	0x08004341
 8004400:	2400029c 	.word	0x2400029c

08004404 <_fwalk_sglue>:
 8004404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004408:	4607      	mov	r7, r0
 800440a:	4688      	mov	r8, r1
 800440c:	4614      	mov	r4, r2
 800440e:	2600      	movs	r6, #0
 8004410:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004414:	f1b9 0901 	subs.w	r9, r9, #1
 8004418:	d505      	bpl.n	8004426 <_fwalk_sglue+0x22>
 800441a:	6824      	ldr	r4, [r4, #0]
 800441c:	2c00      	cmp	r4, #0
 800441e:	d1f7      	bne.n	8004410 <_fwalk_sglue+0xc>
 8004420:	4630      	mov	r0, r6
 8004422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004426:	89ab      	ldrh	r3, [r5, #12]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d907      	bls.n	800443c <_fwalk_sglue+0x38>
 800442c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004430:	3301      	adds	r3, #1
 8004432:	d003      	beq.n	800443c <_fwalk_sglue+0x38>
 8004434:	4629      	mov	r1, r5
 8004436:	4638      	mov	r0, r7
 8004438:	47c0      	blx	r8
 800443a:	4306      	orrs	r6, r0
 800443c:	3568      	adds	r5, #104	@ 0x68
 800443e:	e7e9      	b.n	8004414 <_fwalk_sglue+0x10>

08004440 <iprintf>:
 8004440:	b40f      	push	{r0, r1, r2, r3}
 8004442:	b507      	push	{r0, r1, r2, lr}
 8004444:	4906      	ldr	r1, [pc, #24]	@ (8004460 <iprintf+0x20>)
 8004446:	ab04      	add	r3, sp, #16
 8004448:	6808      	ldr	r0, [r1, #0]
 800444a:	f853 2b04 	ldr.w	r2, [r3], #4
 800444e:	6881      	ldr	r1, [r0, #8]
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	f000 f9e9 	bl	8004828 <_vfiprintf_r>
 8004456:	b003      	add	sp, #12
 8004458:	f85d eb04 	ldr.w	lr, [sp], #4
 800445c:	b004      	add	sp, #16
 800445e:	4770      	bx	lr
 8004460:	24000038 	.word	0x24000038

08004464 <__sread>:
 8004464:	b510      	push	{r4, lr}
 8004466:	460c      	mov	r4, r1
 8004468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800446c:	f000 f868 	bl	8004540 <_read_r>
 8004470:	2800      	cmp	r0, #0
 8004472:	bfab      	itete	ge
 8004474:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004476:	89a3      	ldrhlt	r3, [r4, #12]
 8004478:	181b      	addge	r3, r3, r0
 800447a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800447e:	bfac      	ite	ge
 8004480:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004482:	81a3      	strhlt	r3, [r4, #12]
 8004484:	bd10      	pop	{r4, pc}

08004486 <__swrite>:
 8004486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800448a:	461f      	mov	r7, r3
 800448c:	898b      	ldrh	r3, [r1, #12]
 800448e:	05db      	lsls	r3, r3, #23
 8004490:	4605      	mov	r5, r0
 8004492:	460c      	mov	r4, r1
 8004494:	4616      	mov	r6, r2
 8004496:	d505      	bpl.n	80044a4 <__swrite+0x1e>
 8004498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449c:	2302      	movs	r3, #2
 800449e:	2200      	movs	r2, #0
 80044a0:	f000 f83c 	bl	800451c <_lseek_r>
 80044a4:	89a3      	ldrh	r3, [r4, #12]
 80044a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044ae:	81a3      	strh	r3, [r4, #12]
 80044b0:	4632      	mov	r2, r6
 80044b2:	463b      	mov	r3, r7
 80044b4:	4628      	mov	r0, r5
 80044b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044ba:	f000 b853 	b.w	8004564 <_write_r>

080044be <__sseek>:
 80044be:	b510      	push	{r4, lr}
 80044c0:	460c      	mov	r4, r1
 80044c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c6:	f000 f829 	bl	800451c <_lseek_r>
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	bf15      	itete	ne
 80044d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044da:	81a3      	strheq	r3, [r4, #12]
 80044dc:	bf18      	it	ne
 80044de:	81a3      	strhne	r3, [r4, #12]
 80044e0:	bd10      	pop	{r4, pc}

080044e2 <__sclose>:
 80044e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e6:	f000 b809 	b.w	80044fc <_close_r>

080044ea <memset>:
 80044ea:	4402      	add	r2, r0
 80044ec:	4603      	mov	r3, r0
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d100      	bne.n	80044f4 <memset+0xa>
 80044f2:	4770      	bx	lr
 80044f4:	f803 1b01 	strb.w	r1, [r3], #1
 80044f8:	e7f9      	b.n	80044ee <memset+0x4>
	...

080044fc <_close_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	4d06      	ldr	r5, [pc, #24]	@ (8004518 <_close_r+0x1c>)
 8004500:	2300      	movs	r3, #0
 8004502:	4604      	mov	r4, r0
 8004504:	4608      	mov	r0, r1
 8004506:	602b      	str	r3, [r5, #0]
 8004508:	f7fc fc6d 	bl	8000de6 <_close>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d102      	bne.n	8004516 <_close_r+0x1a>
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	b103      	cbz	r3, 8004516 <_close_r+0x1a>
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	240002a0 	.word	0x240002a0

0800451c <_lseek_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	4d07      	ldr	r5, [pc, #28]	@ (800453c <_lseek_r+0x20>)
 8004520:	4604      	mov	r4, r0
 8004522:	4608      	mov	r0, r1
 8004524:	4611      	mov	r1, r2
 8004526:	2200      	movs	r2, #0
 8004528:	602a      	str	r2, [r5, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	f7fc fc82 	bl	8000e34 <_lseek>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_lseek_r+0x1e>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_lseek_r+0x1e>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	240002a0 	.word	0x240002a0

08004540 <_read_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4d07      	ldr	r5, [pc, #28]	@ (8004560 <_read_r+0x20>)
 8004544:	4604      	mov	r4, r0
 8004546:	4608      	mov	r0, r1
 8004548:	4611      	mov	r1, r2
 800454a:	2200      	movs	r2, #0
 800454c:	602a      	str	r2, [r5, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	f7fc fc10 	bl	8000d74 <_read>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d102      	bne.n	800455e <_read_r+0x1e>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	b103      	cbz	r3, 800455e <_read_r+0x1e>
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	240002a0 	.word	0x240002a0

08004564 <_write_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4d07      	ldr	r5, [pc, #28]	@ (8004584 <_write_r+0x20>)
 8004568:	4604      	mov	r4, r0
 800456a:	4608      	mov	r0, r1
 800456c:	4611      	mov	r1, r2
 800456e:	2200      	movs	r2, #0
 8004570:	602a      	str	r2, [r5, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	f7fc fc1b 	bl	8000dae <_write>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_write_r+0x1e>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b103      	cbz	r3, 8004582 <_write_r+0x1e>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	240002a0 	.word	0x240002a0

08004588 <__errno>:
 8004588:	4b01      	ldr	r3, [pc, #4]	@ (8004590 <__errno+0x8>)
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	24000038 	.word	0x24000038

08004594 <__libc_init_array>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4d0d      	ldr	r5, [pc, #52]	@ (80045cc <__libc_init_array+0x38>)
 8004598:	4c0d      	ldr	r4, [pc, #52]	@ (80045d0 <__libc_init_array+0x3c>)
 800459a:	1b64      	subs	r4, r4, r5
 800459c:	10a4      	asrs	r4, r4, #2
 800459e:	2600      	movs	r6, #0
 80045a0:	42a6      	cmp	r6, r4
 80045a2:	d109      	bne.n	80045b8 <__libc_init_array+0x24>
 80045a4:	4d0b      	ldr	r5, [pc, #44]	@ (80045d4 <__libc_init_array+0x40>)
 80045a6:	4c0c      	ldr	r4, [pc, #48]	@ (80045d8 <__libc_init_array+0x44>)
 80045a8:	f000 fdb6 	bl	8005118 <_init>
 80045ac:	1b64      	subs	r4, r4, r5
 80045ae:	10a4      	asrs	r4, r4, #2
 80045b0:	2600      	movs	r6, #0
 80045b2:	42a6      	cmp	r6, r4
 80045b4:	d105      	bne.n	80045c2 <__libc_init_array+0x2e>
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045bc:	4798      	blx	r3
 80045be:	3601      	adds	r6, #1
 80045c0:	e7ee      	b.n	80045a0 <__libc_init_array+0xc>
 80045c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c6:	4798      	blx	r3
 80045c8:	3601      	adds	r6, #1
 80045ca:	e7f2      	b.n	80045b2 <__libc_init_array+0x1e>
 80045cc:	080051bc 	.word	0x080051bc
 80045d0:	080051bc 	.word	0x080051bc
 80045d4:	080051bc 	.word	0x080051bc
 80045d8:	080051c0 	.word	0x080051c0

080045dc <__retarget_lock_init_recursive>:
 80045dc:	4770      	bx	lr

080045de <__retarget_lock_acquire_recursive>:
 80045de:	4770      	bx	lr

080045e0 <__retarget_lock_release_recursive>:
 80045e0:	4770      	bx	lr
	...

080045e4 <_free_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4605      	mov	r5, r0
 80045e8:	2900      	cmp	r1, #0
 80045ea:	d041      	beq.n	8004670 <_free_r+0x8c>
 80045ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f0:	1f0c      	subs	r4, r1, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bfb8      	it	lt
 80045f6:	18e4      	addlt	r4, r4, r3
 80045f8:	f000 f8e0 	bl	80047bc <__malloc_lock>
 80045fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004674 <_free_r+0x90>)
 80045fe:	6813      	ldr	r3, [r2, #0]
 8004600:	b933      	cbnz	r3, 8004610 <_free_r+0x2c>
 8004602:	6063      	str	r3, [r4, #4]
 8004604:	6014      	str	r4, [r2, #0]
 8004606:	4628      	mov	r0, r5
 8004608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800460c:	f000 b8dc 	b.w	80047c8 <__malloc_unlock>
 8004610:	42a3      	cmp	r3, r4
 8004612:	d908      	bls.n	8004626 <_free_r+0x42>
 8004614:	6820      	ldr	r0, [r4, #0]
 8004616:	1821      	adds	r1, r4, r0
 8004618:	428b      	cmp	r3, r1
 800461a:	bf01      	itttt	eq
 800461c:	6819      	ldreq	r1, [r3, #0]
 800461e:	685b      	ldreq	r3, [r3, #4]
 8004620:	1809      	addeq	r1, r1, r0
 8004622:	6021      	streq	r1, [r4, #0]
 8004624:	e7ed      	b.n	8004602 <_free_r+0x1e>
 8004626:	461a      	mov	r2, r3
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	b10b      	cbz	r3, 8004630 <_free_r+0x4c>
 800462c:	42a3      	cmp	r3, r4
 800462e:	d9fa      	bls.n	8004626 <_free_r+0x42>
 8004630:	6811      	ldr	r1, [r2, #0]
 8004632:	1850      	adds	r0, r2, r1
 8004634:	42a0      	cmp	r0, r4
 8004636:	d10b      	bne.n	8004650 <_free_r+0x6c>
 8004638:	6820      	ldr	r0, [r4, #0]
 800463a:	4401      	add	r1, r0
 800463c:	1850      	adds	r0, r2, r1
 800463e:	4283      	cmp	r3, r0
 8004640:	6011      	str	r1, [r2, #0]
 8004642:	d1e0      	bne.n	8004606 <_free_r+0x22>
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	6053      	str	r3, [r2, #4]
 800464a:	4408      	add	r0, r1
 800464c:	6010      	str	r0, [r2, #0]
 800464e:	e7da      	b.n	8004606 <_free_r+0x22>
 8004650:	d902      	bls.n	8004658 <_free_r+0x74>
 8004652:	230c      	movs	r3, #12
 8004654:	602b      	str	r3, [r5, #0]
 8004656:	e7d6      	b.n	8004606 <_free_r+0x22>
 8004658:	6820      	ldr	r0, [r4, #0]
 800465a:	1821      	adds	r1, r4, r0
 800465c:	428b      	cmp	r3, r1
 800465e:	bf04      	itt	eq
 8004660:	6819      	ldreq	r1, [r3, #0]
 8004662:	685b      	ldreq	r3, [r3, #4]
 8004664:	6063      	str	r3, [r4, #4]
 8004666:	bf04      	itt	eq
 8004668:	1809      	addeq	r1, r1, r0
 800466a:	6021      	streq	r1, [r4, #0]
 800466c:	6054      	str	r4, [r2, #4]
 800466e:	e7ca      	b.n	8004606 <_free_r+0x22>
 8004670:	bd38      	pop	{r3, r4, r5, pc}
 8004672:	bf00      	nop
 8004674:	240002ac 	.word	0x240002ac

08004678 <sbrk_aligned>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4e0f      	ldr	r6, [pc, #60]	@ (80046b8 <sbrk_aligned+0x40>)
 800467c:	460c      	mov	r4, r1
 800467e:	6831      	ldr	r1, [r6, #0]
 8004680:	4605      	mov	r5, r0
 8004682:	b911      	cbnz	r1, 800468a <sbrk_aligned+0x12>
 8004684:	f000 fcb4 	bl	8004ff0 <_sbrk_r>
 8004688:	6030      	str	r0, [r6, #0]
 800468a:	4621      	mov	r1, r4
 800468c:	4628      	mov	r0, r5
 800468e:	f000 fcaf 	bl	8004ff0 <_sbrk_r>
 8004692:	1c43      	adds	r3, r0, #1
 8004694:	d103      	bne.n	800469e <sbrk_aligned+0x26>
 8004696:	f04f 34ff 	mov.w	r4, #4294967295
 800469a:	4620      	mov	r0, r4
 800469c:	bd70      	pop	{r4, r5, r6, pc}
 800469e:	1cc4      	adds	r4, r0, #3
 80046a0:	f024 0403 	bic.w	r4, r4, #3
 80046a4:	42a0      	cmp	r0, r4
 80046a6:	d0f8      	beq.n	800469a <sbrk_aligned+0x22>
 80046a8:	1a21      	subs	r1, r4, r0
 80046aa:	4628      	mov	r0, r5
 80046ac:	f000 fca0 	bl	8004ff0 <_sbrk_r>
 80046b0:	3001      	adds	r0, #1
 80046b2:	d1f2      	bne.n	800469a <sbrk_aligned+0x22>
 80046b4:	e7ef      	b.n	8004696 <sbrk_aligned+0x1e>
 80046b6:	bf00      	nop
 80046b8:	240002a8 	.word	0x240002a8

080046bc <_malloc_r>:
 80046bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046c0:	1ccd      	adds	r5, r1, #3
 80046c2:	f025 0503 	bic.w	r5, r5, #3
 80046c6:	3508      	adds	r5, #8
 80046c8:	2d0c      	cmp	r5, #12
 80046ca:	bf38      	it	cc
 80046cc:	250c      	movcc	r5, #12
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	4606      	mov	r6, r0
 80046d2:	db01      	blt.n	80046d8 <_malloc_r+0x1c>
 80046d4:	42a9      	cmp	r1, r5
 80046d6:	d904      	bls.n	80046e2 <_malloc_r+0x26>
 80046d8:	230c      	movs	r3, #12
 80046da:	6033      	str	r3, [r6, #0]
 80046dc:	2000      	movs	r0, #0
 80046de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047b8 <_malloc_r+0xfc>
 80046e6:	f000 f869 	bl	80047bc <__malloc_lock>
 80046ea:	f8d8 3000 	ldr.w	r3, [r8]
 80046ee:	461c      	mov	r4, r3
 80046f0:	bb44      	cbnz	r4, 8004744 <_malloc_r+0x88>
 80046f2:	4629      	mov	r1, r5
 80046f4:	4630      	mov	r0, r6
 80046f6:	f7ff ffbf 	bl	8004678 <sbrk_aligned>
 80046fa:	1c43      	adds	r3, r0, #1
 80046fc:	4604      	mov	r4, r0
 80046fe:	d158      	bne.n	80047b2 <_malloc_r+0xf6>
 8004700:	f8d8 4000 	ldr.w	r4, [r8]
 8004704:	4627      	mov	r7, r4
 8004706:	2f00      	cmp	r7, #0
 8004708:	d143      	bne.n	8004792 <_malloc_r+0xd6>
 800470a:	2c00      	cmp	r4, #0
 800470c:	d04b      	beq.n	80047a6 <_malloc_r+0xea>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	4639      	mov	r1, r7
 8004712:	4630      	mov	r0, r6
 8004714:	eb04 0903 	add.w	r9, r4, r3
 8004718:	f000 fc6a 	bl	8004ff0 <_sbrk_r>
 800471c:	4581      	cmp	r9, r0
 800471e:	d142      	bne.n	80047a6 <_malloc_r+0xea>
 8004720:	6821      	ldr	r1, [r4, #0]
 8004722:	1a6d      	subs	r5, r5, r1
 8004724:	4629      	mov	r1, r5
 8004726:	4630      	mov	r0, r6
 8004728:	f7ff ffa6 	bl	8004678 <sbrk_aligned>
 800472c:	3001      	adds	r0, #1
 800472e:	d03a      	beq.n	80047a6 <_malloc_r+0xea>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	442b      	add	r3, r5
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	f8d8 3000 	ldr.w	r3, [r8]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	bb62      	cbnz	r2, 8004798 <_malloc_r+0xdc>
 800473e:	f8c8 7000 	str.w	r7, [r8]
 8004742:	e00f      	b.n	8004764 <_malloc_r+0xa8>
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	1b52      	subs	r2, r2, r5
 8004748:	d420      	bmi.n	800478c <_malloc_r+0xd0>
 800474a:	2a0b      	cmp	r2, #11
 800474c:	d917      	bls.n	800477e <_malloc_r+0xc2>
 800474e:	1961      	adds	r1, r4, r5
 8004750:	42a3      	cmp	r3, r4
 8004752:	6025      	str	r5, [r4, #0]
 8004754:	bf18      	it	ne
 8004756:	6059      	strne	r1, [r3, #4]
 8004758:	6863      	ldr	r3, [r4, #4]
 800475a:	bf08      	it	eq
 800475c:	f8c8 1000 	streq.w	r1, [r8]
 8004760:	5162      	str	r2, [r4, r5]
 8004762:	604b      	str	r3, [r1, #4]
 8004764:	4630      	mov	r0, r6
 8004766:	f000 f82f 	bl	80047c8 <__malloc_unlock>
 800476a:	f104 000b 	add.w	r0, r4, #11
 800476e:	1d23      	adds	r3, r4, #4
 8004770:	f020 0007 	bic.w	r0, r0, #7
 8004774:	1ac2      	subs	r2, r0, r3
 8004776:	bf1c      	itt	ne
 8004778:	1a1b      	subne	r3, r3, r0
 800477a:	50a3      	strne	r3, [r4, r2]
 800477c:	e7af      	b.n	80046de <_malloc_r+0x22>
 800477e:	6862      	ldr	r2, [r4, #4]
 8004780:	42a3      	cmp	r3, r4
 8004782:	bf0c      	ite	eq
 8004784:	f8c8 2000 	streq.w	r2, [r8]
 8004788:	605a      	strne	r2, [r3, #4]
 800478a:	e7eb      	b.n	8004764 <_malloc_r+0xa8>
 800478c:	4623      	mov	r3, r4
 800478e:	6864      	ldr	r4, [r4, #4]
 8004790:	e7ae      	b.n	80046f0 <_malloc_r+0x34>
 8004792:	463c      	mov	r4, r7
 8004794:	687f      	ldr	r7, [r7, #4]
 8004796:	e7b6      	b.n	8004706 <_malloc_r+0x4a>
 8004798:	461a      	mov	r2, r3
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	42a3      	cmp	r3, r4
 800479e:	d1fb      	bne.n	8004798 <_malloc_r+0xdc>
 80047a0:	2300      	movs	r3, #0
 80047a2:	6053      	str	r3, [r2, #4]
 80047a4:	e7de      	b.n	8004764 <_malloc_r+0xa8>
 80047a6:	230c      	movs	r3, #12
 80047a8:	6033      	str	r3, [r6, #0]
 80047aa:	4630      	mov	r0, r6
 80047ac:	f000 f80c 	bl	80047c8 <__malloc_unlock>
 80047b0:	e794      	b.n	80046dc <_malloc_r+0x20>
 80047b2:	6005      	str	r5, [r0, #0]
 80047b4:	e7d6      	b.n	8004764 <_malloc_r+0xa8>
 80047b6:	bf00      	nop
 80047b8:	240002ac 	.word	0x240002ac

080047bc <__malloc_lock>:
 80047bc:	4801      	ldr	r0, [pc, #4]	@ (80047c4 <__malloc_lock+0x8>)
 80047be:	f7ff bf0e 	b.w	80045de <__retarget_lock_acquire_recursive>
 80047c2:	bf00      	nop
 80047c4:	240002a4 	.word	0x240002a4

080047c8 <__malloc_unlock>:
 80047c8:	4801      	ldr	r0, [pc, #4]	@ (80047d0 <__malloc_unlock+0x8>)
 80047ca:	f7ff bf09 	b.w	80045e0 <__retarget_lock_release_recursive>
 80047ce:	bf00      	nop
 80047d0:	240002a4 	.word	0x240002a4

080047d4 <__sfputc_r>:
 80047d4:	6893      	ldr	r3, [r2, #8]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	b410      	push	{r4}
 80047dc:	6093      	str	r3, [r2, #8]
 80047de:	da08      	bge.n	80047f2 <__sfputc_r+0x1e>
 80047e0:	6994      	ldr	r4, [r2, #24]
 80047e2:	42a3      	cmp	r3, r4
 80047e4:	db01      	blt.n	80047ea <__sfputc_r+0x16>
 80047e6:	290a      	cmp	r1, #10
 80047e8:	d103      	bne.n	80047f2 <__sfputc_r+0x1e>
 80047ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ee:	f000 bb6b 	b.w	8004ec8 <__swbuf_r>
 80047f2:	6813      	ldr	r3, [r2, #0]
 80047f4:	1c58      	adds	r0, r3, #1
 80047f6:	6010      	str	r0, [r2, #0]
 80047f8:	7019      	strb	r1, [r3, #0]
 80047fa:	4608      	mov	r0, r1
 80047fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004800:	4770      	bx	lr

08004802 <__sfputs_r>:
 8004802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004804:	4606      	mov	r6, r0
 8004806:	460f      	mov	r7, r1
 8004808:	4614      	mov	r4, r2
 800480a:	18d5      	adds	r5, r2, r3
 800480c:	42ac      	cmp	r4, r5
 800480e:	d101      	bne.n	8004814 <__sfputs_r+0x12>
 8004810:	2000      	movs	r0, #0
 8004812:	e007      	b.n	8004824 <__sfputs_r+0x22>
 8004814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004818:	463a      	mov	r2, r7
 800481a:	4630      	mov	r0, r6
 800481c:	f7ff ffda 	bl	80047d4 <__sfputc_r>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d1f3      	bne.n	800480c <__sfputs_r+0xa>
 8004824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004828 <_vfiprintf_r>:
 8004828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482c:	460d      	mov	r5, r1
 800482e:	b09d      	sub	sp, #116	@ 0x74
 8004830:	4614      	mov	r4, r2
 8004832:	4698      	mov	r8, r3
 8004834:	4606      	mov	r6, r0
 8004836:	b118      	cbz	r0, 8004840 <_vfiprintf_r+0x18>
 8004838:	6a03      	ldr	r3, [r0, #32]
 800483a:	b90b      	cbnz	r3, 8004840 <_vfiprintf_r+0x18>
 800483c:	f7ff fdca 	bl	80043d4 <__sinit>
 8004840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004842:	07d9      	lsls	r1, r3, #31
 8004844:	d405      	bmi.n	8004852 <_vfiprintf_r+0x2a>
 8004846:	89ab      	ldrh	r3, [r5, #12]
 8004848:	059a      	lsls	r2, r3, #22
 800484a:	d402      	bmi.n	8004852 <_vfiprintf_r+0x2a>
 800484c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800484e:	f7ff fec6 	bl	80045de <__retarget_lock_acquire_recursive>
 8004852:	89ab      	ldrh	r3, [r5, #12]
 8004854:	071b      	lsls	r3, r3, #28
 8004856:	d501      	bpl.n	800485c <_vfiprintf_r+0x34>
 8004858:	692b      	ldr	r3, [r5, #16]
 800485a:	b99b      	cbnz	r3, 8004884 <_vfiprintf_r+0x5c>
 800485c:	4629      	mov	r1, r5
 800485e:	4630      	mov	r0, r6
 8004860:	f000 fb70 	bl	8004f44 <__swsetup_r>
 8004864:	b170      	cbz	r0, 8004884 <_vfiprintf_r+0x5c>
 8004866:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004868:	07dc      	lsls	r4, r3, #31
 800486a:	d504      	bpl.n	8004876 <_vfiprintf_r+0x4e>
 800486c:	f04f 30ff 	mov.w	r0, #4294967295
 8004870:	b01d      	add	sp, #116	@ 0x74
 8004872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004876:	89ab      	ldrh	r3, [r5, #12]
 8004878:	0598      	lsls	r0, r3, #22
 800487a:	d4f7      	bmi.n	800486c <_vfiprintf_r+0x44>
 800487c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800487e:	f7ff feaf 	bl	80045e0 <__retarget_lock_release_recursive>
 8004882:	e7f3      	b.n	800486c <_vfiprintf_r+0x44>
 8004884:	2300      	movs	r3, #0
 8004886:	9309      	str	r3, [sp, #36]	@ 0x24
 8004888:	2320      	movs	r3, #32
 800488a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800488e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004892:	2330      	movs	r3, #48	@ 0x30
 8004894:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a44 <_vfiprintf_r+0x21c>
 8004898:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800489c:	f04f 0901 	mov.w	r9, #1
 80048a0:	4623      	mov	r3, r4
 80048a2:	469a      	mov	sl, r3
 80048a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048a8:	b10a      	cbz	r2, 80048ae <_vfiprintf_r+0x86>
 80048aa:	2a25      	cmp	r2, #37	@ 0x25
 80048ac:	d1f9      	bne.n	80048a2 <_vfiprintf_r+0x7a>
 80048ae:	ebba 0b04 	subs.w	fp, sl, r4
 80048b2:	d00b      	beq.n	80048cc <_vfiprintf_r+0xa4>
 80048b4:	465b      	mov	r3, fp
 80048b6:	4622      	mov	r2, r4
 80048b8:	4629      	mov	r1, r5
 80048ba:	4630      	mov	r0, r6
 80048bc:	f7ff ffa1 	bl	8004802 <__sfputs_r>
 80048c0:	3001      	adds	r0, #1
 80048c2:	f000 80a7 	beq.w	8004a14 <_vfiprintf_r+0x1ec>
 80048c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048c8:	445a      	add	r2, fp
 80048ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80048cc:	f89a 3000 	ldrb.w	r3, [sl]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 809f 	beq.w	8004a14 <_vfiprintf_r+0x1ec>
 80048d6:	2300      	movs	r3, #0
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048e0:	f10a 0a01 	add.w	sl, sl, #1
 80048e4:	9304      	str	r3, [sp, #16]
 80048e6:	9307      	str	r3, [sp, #28]
 80048e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80048ee:	4654      	mov	r4, sl
 80048f0:	2205      	movs	r2, #5
 80048f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f6:	4853      	ldr	r0, [pc, #332]	@ (8004a44 <_vfiprintf_r+0x21c>)
 80048f8:	f7fb fcf2 	bl	80002e0 <memchr>
 80048fc:	9a04      	ldr	r2, [sp, #16]
 80048fe:	b9d8      	cbnz	r0, 8004938 <_vfiprintf_r+0x110>
 8004900:	06d1      	lsls	r1, r2, #27
 8004902:	bf44      	itt	mi
 8004904:	2320      	movmi	r3, #32
 8004906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800490a:	0713      	lsls	r3, r2, #28
 800490c:	bf44      	itt	mi
 800490e:	232b      	movmi	r3, #43	@ 0x2b
 8004910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004914:	f89a 3000 	ldrb.w	r3, [sl]
 8004918:	2b2a      	cmp	r3, #42	@ 0x2a
 800491a:	d015      	beq.n	8004948 <_vfiprintf_r+0x120>
 800491c:	9a07      	ldr	r2, [sp, #28]
 800491e:	4654      	mov	r4, sl
 8004920:	2000      	movs	r0, #0
 8004922:	f04f 0c0a 	mov.w	ip, #10
 8004926:	4621      	mov	r1, r4
 8004928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800492c:	3b30      	subs	r3, #48	@ 0x30
 800492e:	2b09      	cmp	r3, #9
 8004930:	d94b      	bls.n	80049ca <_vfiprintf_r+0x1a2>
 8004932:	b1b0      	cbz	r0, 8004962 <_vfiprintf_r+0x13a>
 8004934:	9207      	str	r2, [sp, #28]
 8004936:	e014      	b.n	8004962 <_vfiprintf_r+0x13a>
 8004938:	eba0 0308 	sub.w	r3, r0, r8
 800493c:	fa09 f303 	lsl.w	r3, r9, r3
 8004940:	4313      	orrs	r3, r2
 8004942:	9304      	str	r3, [sp, #16]
 8004944:	46a2      	mov	sl, r4
 8004946:	e7d2      	b.n	80048ee <_vfiprintf_r+0xc6>
 8004948:	9b03      	ldr	r3, [sp, #12]
 800494a:	1d19      	adds	r1, r3, #4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	9103      	str	r1, [sp, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	bfbb      	ittet	lt
 8004954:	425b      	neglt	r3, r3
 8004956:	f042 0202 	orrlt.w	r2, r2, #2
 800495a:	9307      	strge	r3, [sp, #28]
 800495c:	9307      	strlt	r3, [sp, #28]
 800495e:	bfb8      	it	lt
 8004960:	9204      	strlt	r2, [sp, #16]
 8004962:	7823      	ldrb	r3, [r4, #0]
 8004964:	2b2e      	cmp	r3, #46	@ 0x2e
 8004966:	d10a      	bne.n	800497e <_vfiprintf_r+0x156>
 8004968:	7863      	ldrb	r3, [r4, #1]
 800496a:	2b2a      	cmp	r3, #42	@ 0x2a
 800496c:	d132      	bne.n	80049d4 <_vfiprintf_r+0x1ac>
 800496e:	9b03      	ldr	r3, [sp, #12]
 8004970:	1d1a      	adds	r2, r3, #4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	9203      	str	r2, [sp, #12]
 8004976:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800497a:	3402      	adds	r4, #2
 800497c:	9305      	str	r3, [sp, #20]
 800497e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a54 <_vfiprintf_r+0x22c>
 8004982:	7821      	ldrb	r1, [r4, #0]
 8004984:	2203      	movs	r2, #3
 8004986:	4650      	mov	r0, sl
 8004988:	f7fb fcaa 	bl	80002e0 <memchr>
 800498c:	b138      	cbz	r0, 800499e <_vfiprintf_r+0x176>
 800498e:	9b04      	ldr	r3, [sp, #16]
 8004990:	eba0 000a 	sub.w	r0, r0, sl
 8004994:	2240      	movs	r2, #64	@ 0x40
 8004996:	4082      	lsls	r2, r0
 8004998:	4313      	orrs	r3, r2
 800499a:	3401      	adds	r4, #1
 800499c:	9304      	str	r3, [sp, #16]
 800499e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a2:	4829      	ldr	r0, [pc, #164]	@ (8004a48 <_vfiprintf_r+0x220>)
 80049a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049a8:	2206      	movs	r2, #6
 80049aa:	f7fb fc99 	bl	80002e0 <memchr>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d03f      	beq.n	8004a32 <_vfiprintf_r+0x20a>
 80049b2:	4b26      	ldr	r3, [pc, #152]	@ (8004a4c <_vfiprintf_r+0x224>)
 80049b4:	bb1b      	cbnz	r3, 80049fe <_vfiprintf_r+0x1d6>
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	3307      	adds	r3, #7
 80049ba:	f023 0307 	bic.w	r3, r3, #7
 80049be:	3308      	adds	r3, #8
 80049c0:	9303      	str	r3, [sp, #12]
 80049c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049c4:	443b      	add	r3, r7
 80049c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80049c8:	e76a      	b.n	80048a0 <_vfiprintf_r+0x78>
 80049ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ce:	460c      	mov	r4, r1
 80049d0:	2001      	movs	r0, #1
 80049d2:	e7a8      	b.n	8004926 <_vfiprintf_r+0xfe>
 80049d4:	2300      	movs	r3, #0
 80049d6:	3401      	adds	r4, #1
 80049d8:	9305      	str	r3, [sp, #20]
 80049da:	4619      	mov	r1, r3
 80049dc:	f04f 0c0a 	mov.w	ip, #10
 80049e0:	4620      	mov	r0, r4
 80049e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049e6:	3a30      	subs	r2, #48	@ 0x30
 80049e8:	2a09      	cmp	r2, #9
 80049ea:	d903      	bls.n	80049f4 <_vfiprintf_r+0x1cc>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0c6      	beq.n	800497e <_vfiprintf_r+0x156>
 80049f0:	9105      	str	r1, [sp, #20]
 80049f2:	e7c4      	b.n	800497e <_vfiprintf_r+0x156>
 80049f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80049f8:	4604      	mov	r4, r0
 80049fa:	2301      	movs	r3, #1
 80049fc:	e7f0      	b.n	80049e0 <_vfiprintf_r+0x1b8>
 80049fe:	ab03      	add	r3, sp, #12
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	462a      	mov	r2, r5
 8004a04:	4b12      	ldr	r3, [pc, #72]	@ (8004a50 <_vfiprintf_r+0x228>)
 8004a06:	a904      	add	r1, sp, #16
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f3af 8000 	nop.w
 8004a0e:	4607      	mov	r7, r0
 8004a10:	1c78      	adds	r0, r7, #1
 8004a12:	d1d6      	bne.n	80049c2 <_vfiprintf_r+0x19a>
 8004a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a16:	07d9      	lsls	r1, r3, #31
 8004a18:	d405      	bmi.n	8004a26 <_vfiprintf_r+0x1fe>
 8004a1a:	89ab      	ldrh	r3, [r5, #12]
 8004a1c:	059a      	lsls	r2, r3, #22
 8004a1e:	d402      	bmi.n	8004a26 <_vfiprintf_r+0x1fe>
 8004a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a22:	f7ff fddd 	bl	80045e0 <__retarget_lock_release_recursive>
 8004a26:	89ab      	ldrh	r3, [r5, #12]
 8004a28:	065b      	lsls	r3, r3, #25
 8004a2a:	f53f af1f 	bmi.w	800486c <_vfiprintf_r+0x44>
 8004a2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a30:	e71e      	b.n	8004870 <_vfiprintf_r+0x48>
 8004a32:	ab03      	add	r3, sp, #12
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	462a      	mov	r2, r5
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <_vfiprintf_r+0x228>)
 8004a3a:	a904      	add	r1, sp, #16
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	f000 f879 	bl	8004b34 <_printf_i>
 8004a42:	e7e4      	b.n	8004a0e <_vfiprintf_r+0x1e6>
 8004a44:	08005180 	.word	0x08005180
 8004a48:	0800518a 	.word	0x0800518a
 8004a4c:	00000000 	.word	0x00000000
 8004a50:	08004803 	.word	0x08004803
 8004a54:	08005186 	.word	0x08005186

08004a58 <_printf_common>:
 8004a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5c:	4616      	mov	r6, r2
 8004a5e:	4698      	mov	r8, r3
 8004a60:	688a      	ldr	r2, [r1, #8]
 8004a62:	690b      	ldr	r3, [r1, #16]
 8004a64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	bfb8      	it	lt
 8004a6c:	4613      	movlt	r3, r2
 8004a6e:	6033      	str	r3, [r6, #0]
 8004a70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a74:	4607      	mov	r7, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	b10a      	cbz	r2, 8004a7e <_printf_common+0x26>
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	6033      	str	r3, [r6, #0]
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	0699      	lsls	r1, r3, #26
 8004a82:	bf42      	ittt	mi
 8004a84:	6833      	ldrmi	r3, [r6, #0]
 8004a86:	3302      	addmi	r3, #2
 8004a88:	6033      	strmi	r3, [r6, #0]
 8004a8a:	6825      	ldr	r5, [r4, #0]
 8004a8c:	f015 0506 	ands.w	r5, r5, #6
 8004a90:	d106      	bne.n	8004aa0 <_printf_common+0x48>
 8004a92:	f104 0a19 	add.w	sl, r4, #25
 8004a96:	68e3      	ldr	r3, [r4, #12]
 8004a98:	6832      	ldr	r2, [r6, #0]
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	42ab      	cmp	r3, r5
 8004a9e:	dc26      	bgt.n	8004aee <_printf_common+0x96>
 8004aa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	3b00      	subs	r3, #0
 8004aa8:	bf18      	it	ne
 8004aaa:	2301      	movne	r3, #1
 8004aac:	0692      	lsls	r2, r2, #26
 8004aae:	d42b      	bmi.n	8004b08 <_printf_common+0xb0>
 8004ab0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	47c8      	blx	r9
 8004aba:	3001      	adds	r0, #1
 8004abc:	d01e      	beq.n	8004afc <_printf_common+0xa4>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	6922      	ldr	r2, [r4, #16]
 8004ac2:	f003 0306 	and.w	r3, r3, #6
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	bf02      	ittt	eq
 8004aca:	68e5      	ldreq	r5, [r4, #12]
 8004acc:	6833      	ldreq	r3, [r6, #0]
 8004ace:	1aed      	subeq	r5, r5, r3
 8004ad0:	68a3      	ldr	r3, [r4, #8]
 8004ad2:	bf0c      	ite	eq
 8004ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ad8:	2500      	movne	r5, #0
 8004ada:	4293      	cmp	r3, r2
 8004adc:	bfc4      	itt	gt
 8004ade:	1a9b      	subgt	r3, r3, r2
 8004ae0:	18ed      	addgt	r5, r5, r3
 8004ae2:	2600      	movs	r6, #0
 8004ae4:	341a      	adds	r4, #26
 8004ae6:	42b5      	cmp	r5, r6
 8004ae8:	d11a      	bne.n	8004b20 <_printf_common+0xc8>
 8004aea:	2000      	movs	r0, #0
 8004aec:	e008      	b.n	8004b00 <_printf_common+0xa8>
 8004aee:	2301      	movs	r3, #1
 8004af0:	4652      	mov	r2, sl
 8004af2:	4641      	mov	r1, r8
 8004af4:	4638      	mov	r0, r7
 8004af6:	47c8      	blx	r9
 8004af8:	3001      	adds	r0, #1
 8004afa:	d103      	bne.n	8004b04 <_printf_common+0xac>
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b04:	3501      	adds	r5, #1
 8004b06:	e7c6      	b.n	8004a96 <_printf_common+0x3e>
 8004b08:	18e1      	adds	r1, r4, r3
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	2030      	movs	r0, #48	@ 0x30
 8004b0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b12:	4422      	add	r2, r4
 8004b14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	e7c7      	b.n	8004ab0 <_printf_common+0x58>
 8004b20:	2301      	movs	r3, #1
 8004b22:	4622      	mov	r2, r4
 8004b24:	4641      	mov	r1, r8
 8004b26:	4638      	mov	r0, r7
 8004b28:	47c8      	blx	r9
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d0e6      	beq.n	8004afc <_printf_common+0xa4>
 8004b2e:	3601      	adds	r6, #1
 8004b30:	e7d9      	b.n	8004ae6 <_printf_common+0x8e>
	...

08004b34 <_printf_i>:
 8004b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b38:	7e0f      	ldrb	r7, [r1, #24]
 8004b3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b3c:	2f78      	cmp	r7, #120	@ 0x78
 8004b3e:	4691      	mov	r9, r2
 8004b40:	4680      	mov	r8, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	469a      	mov	sl, r3
 8004b46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b4a:	d807      	bhi.n	8004b5c <_printf_i+0x28>
 8004b4c:	2f62      	cmp	r7, #98	@ 0x62
 8004b4e:	d80a      	bhi.n	8004b66 <_printf_i+0x32>
 8004b50:	2f00      	cmp	r7, #0
 8004b52:	f000 80d1 	beq.w	8004cf8 <_printf_i+0x1c4>
 8004b56:	2f58      	cmp	r7, #88	@ 0x58
 8004b58:	f000 80b8 	beq.w	8004ccc <_printf_i+0x198>
 8004b5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b64:	e03a      	b.n	8004bdc <_printf_i+0xa8>
 8004b66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b6a:	2b15      	cmp	r3, #21
 8004b6c:	d8f6      	bhi.n	8004b5c <_printf_i+0x28>
 8004b6e:	a101      	add	r1, pc, #4	@ (adr r1, 8004b74 <_printf_i+0x40>)
 8004b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b74:	08004bcd 	.word	0x08004bcd
 8004b78:	08004be1 	.word	0x08004be1
 8004b7c:	08004b5d 	.word	0x08004b5d
 8004b80:	08004b5d 	.word	0x08004b5d
 8004b84:	08004b5d 	.word	0x08004b5d
 8004b88:	08004b5d 	.word	0x08004b5d
 8004b8c:	08004be1 	.word	0x08004be1
 8004b90:	08004b5d 	.word	0x08004b5d
 8004b94:	08004b5d 	.word	0x08004b5d
 8004b98:	08004b5d 	.word	0x08004b5d
 8004b9c:	08004b5d 	.word	0x08004b5d
 8004ba0:	08004cdf 	.word	0x08004cdf
 8004ba4:	08004c0b 	.word	0x08004c0b
 8004ba8:	08004c99 	.word	0x08004c99
 8004bac:	08004b5d 	.word	0x08004b5d
 8004bb0:	08004b5d 	.word	0x08004b5d
 8004bb4:	08004d01 	.word	0x08004d01
 8004bb8:	08004b5d 	.word	0x08004b5d
 8004bbc:	08004c0b 	.word	0x08004c0b
 8004bc0:	08004b5d 	.word	0x08004b5d
 8004bc4:	08004b5d 	.word	0x08004b5d
 8004bc8:	08004ca1 	.word	0x08004ca1
 8004bcc:	6833      	ldr	r3, [r6, #0]
 8004bce:	1d1a      	adds	r2, r3, #4
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6032      	str	r2, [r6, #0]
 8004bd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e09c      	b.n	8004d1a <_printf_i+0x1e6>
 8004be0:	6833      	ldr	r3, [r6, #0]
 8004be2:	6820      	ldr	r0, [r4, #0]
 8004be4:	1d19      	adds	r1, r3, #4
 8004be6:	6031      	str	r1, [r6, #0]
 8004be8:	0606      	lsls	r6, r0, #24
 8004bea:	d501      	bpl.n	8004bf0 <_printf_i+0xbc>
 8004bec:	681d      	ldr	r5, [r3, #0]
 8004bee:	e003      	b.n	8004bf8 <_printf_i+0xc4>
 8004bf0:	0645      	lsls	r5, r0, #25
 8004bf2:	d5fb      	bpl.n	8004bec <_printf_i+0xb8>
 8004bf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	da03      	bge.n	8004c04 <_printf_i+0xd0>
 8004bfc:	232d      	movs	r3, #45	@ 0x2d
 8004bfe:	426d      	negs	r5, r5
 8004c00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c04:	4858      	ldr	r0, [pc, #352]	@ (8004d68 <_printf_i+0x234>)
 8004c06:	230a      	movs	r3, #10
 8004c08:	e011      	b.n	8004c2e <_printf_i+0xfa>
 8004c0a:	6821      	ldr	r1, [r4, #0]
 8004c0c:	6833      	ldr	r3, [r6, #0]
 8004c0e:	0608      	lsls	r0, r1, #24
 8004c10:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c14:	d402      	bmi.n	8004c1c <_printf_i+0xe8>
 8004c16:	0649      	lsls	r1, r1, #25
 8004c18:	bf48      	it	mi
 8004c1a:	b2ad      	uxthmi	r5, r5
 8004c1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c1e:	4852      	ldr	r0, [pc, #328]	@ (8004d68 <_printf_i+0x234>)
 8004c20:	6033      	str	r3, [r6, #0]
 8004c22:	bf14      	ite	ne
 8004c24:	230a      	movne	r3, #10
 8004c26:	2308      	moveq	r3, #8
 8004c28:	2100      	movs	r1, #0
 8004c2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c2e:	6866      	ldr	r6, [r4, #4]
 8004c30:	60a6      	str	r6, [r4, #8]
 8004c32:	2e00      	cmp	r6, #0
 8004c34:	db05      	blt.n	8004c42 <_printf_i+0x10e>
 8004c36:	6821      	ldr	r1, [r4, #0]
 8004c38:	432e      	orrs	r6, r5
 8004c3a:	f021 0104 	bic.w	r1, r1, #4
 8004c3e:	6021      	str	r1, [r4, #0]
 8004c40:	d04b      	beq.n	8004cda <_printf_i+0x1a6>
 8004c42:	4616      	mov	r6, r2
 8004c44:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c48:	fb03 5711 	mls	r7, r3, r1, r5
 8004c4c:	5dc7      	ldrb	r7, [r0, r7]
 8004c4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c52:	462f      	mov	r7, r5
 8004c54:	42bb      	cmp	r3, r7
 8004c56:	460d      	mov	r5, r1
 8004c58:	d9f4      	bls.n	8004c44 <_printf_i+0x110>
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d10b      	bne.n	8004c76 <_printf_i+0x142>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	07df      	lsls	r7, r3, #31
 8004c62:	d508      	bpl.n	8004c76 <_printf_i+0x142>
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	6861      	ldr	r1, [r4, #4]
 8004c68:	4299      	cmp	r1, r3
 8004c6a:	bfde      	ittt	le
 8004c6c:	2330      	movle	r3, #48	@ 0x30
 8004c6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c76:	1b92      	subs	r2, r2, r6
 8004c78:	6122      	str	r2, [r4, #16]
 8004c7a:	f8cd a000 	str.w	sl, [sp]
 8004c7e:	464b      	mov	r3, r9
 8004c80:	aa03      	add	r2, sp, #12
 8004c82:	4621      	mov	r1, r4
 8004c84:	4640      	mov	r0, r8
 8004c86:	f7ff fee7 	bl	8004a58 <_printf_common>
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d14a      	bne.n	8004d24 <_printf_i+0x1f0>
 8004c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c92:	b004      	add	sp, #16
 8004c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	f043 0320 	orr.w	r3, r3, #32
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	4832      	ldr	r0, [pc, #200]	@ (8004d6c <_printf_i+0x238>)
 8004ca2:	2778      	movs	r7, #120	@ 0x78
 8004ca4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	6831      	ldr	r1, [r6, #0]
 8004cac:	061f      	lsls	r7, r3, #24
 8004cae:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cb2:	d402      	bmi.n	8004cba <_printf_i+0x186>
 8004cb4:	065f      	lsls	r7, r3, #25
 8004cb6:	bf48      	it	mi
 8004cb8:	b2ad      	uxthmi	r5, r5
 8004cba:	6031      	str	r1, [r6, #0]
 8004cbc:	07d9      	lsls	r1, r3, #31
 8004cbe:	bf44      	itt	mi
 8004cc0:	f043 0320 	orrmi.w	r3, r3, #32
 8004cc4:	6023      	strmi	r3, [r4, #0]
 8004cc6:	b11d      	cbz	r5, 8004cd0 <_printf_i+0x19c>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	e7ad      	b.n	8004c28 <_printf_i+0xf4>
 8004ccc:	4826      	ldr	r0, [pc, #152]	@ (8004d68 <_printf_i+0x234>)
 8004cce:	e7e9      	b.n	8004ca4 <_printf_i+0x170>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	f023 0320 	bic.w	r3, r3, #32
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	e7f6      	b.n	8004cc8 <_printf_i+0x194>
 8004cda:	4616      	mov	r6, r2
 8004cdc:	e7bd      	b.n	8004c5a <_printf_i+0x126>
 8004cde:	6833      	ldr	r3, [r6, #0]
 8004ce0:	6825      	ldr	r5, [r4, #0]
 8004ce2:	6961      	ldr	r1, [r4, #20]
 8004ce4:	1d18      	adds	r0, r3, #4
 8004ce6:	6030      	str	r0, [r6, #0]
 8004ce8:	062e      	lsls	r6, r5, #24
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	d501      	bpl.n	8004cf2 <_printf_i+0x1be>
 8004cee:	6019      	str	r1, [r3, #0]
 8004cf0:	e002      	b.n	8004cf8 <_printf_i+0x1c4>
 8004cf2:	0668      	lsls	r0, r5, #25
 8004cf4:	d5fb      	bpl.n	8004cee <_printf_i+0x1ba>
 8004cf6:	8019      	strh	r1, [r3, #0]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	6123      	str	r3, [r4, #16]
 8004cfc:	4616      	mov	r6, r2
 8004cfe:	e7bc      	b.n	8004c7a <_printf_i+0x146>
 8004d00:	6833      	ldr	r3, [r6, #0]
 8004d02:	1d1a      	adds	r2, r3, #4
 8004d04:	6032      	str	r2, [r6, #0]
 8004d06:	681e      	ldr	r6, [r3, #0]
 8004d08:	6862      	ldr	r2, [r4, #4]
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f7fb fae7 	bl	80002e0 <memchr>
 8004d12:	b108      	cbz	r0, 8004d18 <_printf_i+0x1e4>
 8004d14:	1b80      	subs	r0, r0, r6
 8004d16:	6060      	str	r0, [r4, #4]
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	6123      	str	r3, [r4, #16]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d22:	e7aa      	b.n	8004c7a <_printf_i+0x146>
 8004d24:	6923      	ldr	r3, [r4, #16]
 8004d26:	4632      	mov	r2, r6
 8004d28:	4649      	mov	r1, r9
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	47d0      	blx	sl
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d0ad      	beq.n	8004c8e <_printf_i+0x15a>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	079b      	lsls	r3, r3, #30
 8004d36:	d413      	bmi.n	8004d60 <_printf_i+0x22c>
 8004d38:	68e0      	ldr	r0, [r4, #12]
 8004d3a:	9b03      	ldr	r3, [sp, #12]
 8004d3c:	4298      	cmp	r0, r3
 8004d3e:	bfb8      	it	lt
 8004d40:	4618      	movlt	r0, r3
 8004d42:	e7a6      	b.n	8004c92 <_printf_i+0x15e>
 8004d44:	2301      	movs	r3, #1
 8004d46:	4632      	mov	r2, r6
 8004d48:	4649      	mov	r1, r9
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	47d0      	blx	sl
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d09d      	beq.n	8004c8e <_printf_i+0x15a>
 8004d52:	3501      	adds	r5, #1
 8004d54:	68e3      	ldr	r3, [r4, #12]
 8004d56:	9903      	ldr	r1, [sp, #12]
 8004d58:	1a5b      	subs	r3, r3, r1
 8004d5a:	42ab      	cmp	r3, r5
 8004d5c:	dcf2      	bgt.n	8004d44 <_printf_i+0x210>
 8004d5e:	e7eb      	b.n	8004d38 <_printf_i+0x204>
 8004d60:	2500      	movs	r5, #0
 8004d62:	f104 0619 	add.w	r6, r4, #25
 8004d66:	e7f5      	b.n	8004d54 <_printf_i+0x220>
 8004d68:	08005191 	.word	0x08005191
 8004d6c:	080051a2 	.word	0x080051a2

08004d70 <__sflush_r>:
 8004d70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d78:	0716      	lsls	r6, r2, #28
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	d454      	bmi.n	8004e2a <__sflush_r+0xba>
 8004d80:	684b      	ldr	r3, [r1, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	dc02      	bgt.n	8004d8c <__sflush_r+0x1c>
 8004d86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	dd48      	ble.n	8004e1e <__sflush_r+0xae>
 8004d8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	d045      	beq.n	8004e1e <__sflush_r+0xae>
 8004d92:	2300      	movs	r3, #0
 8004d94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d98:	682f      	ldr	r7, [r5, #0]
 8004d9a:	6a21      	ldr	r1, [r4, #32]
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	d030      	beq.n	8004e02 <__sflush_r+0x92>
 8004da0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	0759      	lsls	r1, r3, #29
 8004da6:	d505      	bpl.n	8004db4 <__sflush_r+0x44>
 8004da8:	6863      	ldr	r3, [r4, #4]
 8004daa:	1ad2      	subs	r2, r2, r3
 8004dac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dae:	b10b      	cbz	r3, 8004db4 <__sflush_r+0x44>
 8004db0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004db2:	1ad2      	subs	r2, r2, r3
 8004db4:	2300      	movs	r3, #0
 8004db6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004db8:	6a21      	ldr	r1, [r4, #32]
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b0      	blx	r6
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	d106      	bne.n	8004dd2 <__sflush_r+0x62>
 8004dc4:	6829      	ldr	r1, [r5, #0]
 8004dc6:	291d      	cmp	r1, #29
 8004dc8:	d82b      	bhi.n	8004e22 <__sflush_r+0xb2>
 8004dca:	4a2a      	ldr	r2, [pc, #168]	@ (8004e74 <__sflush_r+0x104>)
 8004dcc:	40ca      	lsrs	r2, r1
 8004dce:	07d6      	lsls	r6, r2, #31
 8004dd0:	d527      	bpl.n	8004e22 <__sflush_r+0xb2>
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	6062      	str	r2, [r4, #4]
 8004dd6:	04d9      	lsls	r1, r3, #19
 8004dd8:	6922      	ldr	r2, [r4, #16]
 8004dda:	6022      	str	r2, [r4, #0]
 8004ddc:	d504      	bpl.n	8004de8 <__sflush_r+0x78>
 8004dde:	1c42      	adds	r2, r0, #1
 8004de0:	d101      	bne.n	8004de6 <__sflush_r+0x76>
 8004de2:	682b      	ldr	r3, [r5, #0]
 8004de4:	b903      	cbnz	r3, 8004de8 <__sflush_r+0x78>
 8004de6:	6560      	str	r0, [r4, #84]	@ 0x54
 8004de8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dea:	602f      	str	r7, [r5, #0]
 8004dec:	b1b9      	cbz	r1, 8004e1e <__sflush_r+0xae>
 8004dee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004df2:	4299      	cmp	r1, r3
 8004df4:	d002      	beq.n	8004dfc <__sflush_r+0x8c>
 8004df6:	4628      	mov	r0, r5
 8004df8:	f7ff fbf4 	bl	80045e4 <_free_r>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e00:	e00d      	b.n	8004e1e <__sflush_r+0xae>
 8004e02:	2301      	movs	r3, #1
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b0      	blx	r6
 8004e08:	4602      	mov	r2, r0
 8004e0a:	1c50      	adds	r0, r2, #1
 8004e0c:	d1c9      	bne.n	8004da2 <__sflush_r+0x32>
 8004e0e:	682b      	ldr	r3, [r5, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0c6      	beq.n	8004da2 <__sflush_r+0x32>
 8004e14:	2b1d      	cmp	r3, #29
 8004e16:	d001      	beq.n	8004e1c <__sflush_r+0xac>
 8004e18:	2b16      	cmp	r3, #22
 8004e1a:	d11e      	bne.n	8004e5a <__sflush_r+0xea>
 8004e1c:	602f      	str	r7, [r5, #0]
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e022      	b.n	8004e68 <__sflush_r+0xf8>
 8004e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e26:	b21b      	sxth	r3, r3
 8004e28:	e01b      	b.n	8004e62 <__sflush_r+0xf2>
 8004e2a:	690f      	ldr	r7, [r1, #16]
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	d0f6      	beq.n	8004e1e <__sflush_r+0xae>
 8004e30:	0793      	lsls	r3, r2, #30
 8004e32:	680e      	ldr	r6, [r1, #0]
 8004e34:	bf08      	it	eq
 8004e36:	694b      	ldreq	r3, [r1, #20]
 8004e38:	600f      	str	r7, [r1, #0]
 8004e3a:	bf18      	it	ne
 8004e3c:	2300      	movne	r3, #0
 8004e3e:	eba6 0807 	sub.w	r8, r6, r7
 8004e42:	608b      	str	r3, [r1, #8]
 8004e44:	f1b8 0f00 	cmp.w	r8, #0
 8004e48:	dde9      	ble.n	8004e1e <__sflush_r+0xae>
 8004e4a:	6a21      	ldr	r1, [r4, #32]
 8004e4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e4e:	4643      	mov	r3, r8
 8004e50:	463a      	mov	r2, r7
 8004e52:	4628      	mov	r0, r5
 8004e54:	47b0      	blx	r6
 8004e56:	2800      	cmp	r0, #0
 8004e58:	dc08      	bgt.n	8004e6c <__sflush_r+0xfc>
 8004e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	f04f 30ff 	mov.w	r0, #4294967295
 8004e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e6c:	4407      	add	r7, r0
 8004e6e:	eba8 0800 	sub.w	r8, r8, r0
 8004e72:	e7e7      	b.n	8004e44 <__sflush_r+0xd4>
 8004e74:	20400001 	.word	0x20400001

08004e78 <_fflush_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	690b      	ldr	r3, [r1, #16]
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	b913      	cbnz	r3, 8004e88 <_fflush_r+0x10>
 8004e82:	2500      	movs	r5, #0
 8004e84:	4628      	mov	r0, r5
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	b118      	cbz	r0, 8004e92 <_fflush_r+0x1a>
 8004e8a:	6a03      	ldr	r3, [r0, #32]
 8004e8c:	b90b      	cbnz	r3, 8004e92 <_fflush_r+0x1a>
 8004e8e:	f7ff faa1 	bl	80043d4 <__sinit>
 8004e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f3      	beq.n	8004e82 <_fflush_r+0xa>
 8004e9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e9c:	07d0      	lsls	r0, r2, #31
 8004e9e:	d404      	bmi.n	8004eaa <_fflush_r+0x32>
 8004ea0:	0599      	lsls	r1, r3, #22
 8004ea2:	d402      	bmi.n	8004eaa <_fflush_r+0x32>
 8004ea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ea6:	f7ff fb9a 	bl	80045de <__retarget_lock_acquire_recursive>
 8004eaa:	4628      	mov	r0, r5
 8004eac:	4621      	mov	r1, r4
 8004eae:	f7ff ff5f 	bl	8004d70 <__sflush_r>
 8004eb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004eb4:	07da      	lsls	r2, r3, #31
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	d4e4      	bmi.n	8004e84 <_fflush_r+0xc>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	059b      	lsls	r3, r3, #22
 8004ebe:	d4e1      	bmi.n	8004e84 <_fflush_r+0xc>
 8004ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ec2:	f7ff fb8d 	bl	80045e0 <__retarget_lock_release_recursive>
 8004ec6:	e7dd      	b.n	8004e84 <_fflush_r+0xc>

08004ec8 <__swbuf_r>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	460e      	mov	r6, r1
 8004ecc:	4614      	mov	r4, r2
 8004ece:	4605      	mov	r5, r0
 8004ed0:	b118      	cbz	r0, 8004eda <__swbuf_r+0x12>
 8004ed2:	6a03      	ldr	r3, [r0, #32]
 8004ed4:	b90b      	cbnz	r3, 8004eda <__swbuf_r+0x12>
 8004ed6:	f7ff fa7d 	bl	80043d4 <__sinit>
 8004eda:	69a3      	ldr	r3, [r4, #24]
 8004edc:	60a3      	str	r3, [r4, #8]
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	071a      	lsls	r2, r3, #28
 8004ee2:	d501      	bpl.n	8004ee8 <__swbuf_r+0x20>
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	b943      	cbnz	r3, 8004efa <__swbuf_r+0x32>
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4628      	mov	r0, r5
 8004eec:	f000 f82a 	bl	8004f44 <__swsetup_r>
 8004ef0:	b118      	cbz	r0, 8004efa <__swbuf_r+0x32>
 8004ef2:	f04f 37ff 	mov.w	r7, #4294967295
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	6922      	ldr	r2, [r4, #16]
 8004efe:	1a98      	subs	r0, r3, r2
 8004f00:	6963      	ldr	r3, [r4, #20]
 8004f02:	b2f6      	uxtb	r6, r6
 8004f04:	4283      	cmp	r3, r0
 8004f06:	4637      	mov	r7, r6
 8004f08:	dc05      	bgt.n	8004f16 <__swbuf_r+0x4e>
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f7ff ffb3 	bl	8004e78 <_fflush_r>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d1ed      	bne.n	8004ef2 <__swbuf_r+0x2a>
 8004f16:	68a3      	ldr	r3, [r4, #8]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	60a3      	str	r3, [r4, #8]
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	6022      	str	r2, [r4, #0]
 8004f22:	701e      	strb	r6, [r3, #0]
 8004f24:	6962      	ldr	r2, [r4, #20]
 8004f26:	1c43      	adds	r3, r0, #1
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d004      	beq.n	8004f36 <__swbuf_r+0x6e>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	07db      	lsls	r3, r3, #31
 8004f30:	d5e1      	bpl.n	8004ef6 <__swbuf_r+0x2e>
 8004f32:	2e0a      	cmp	r6, #10
 8004f34:	d1df      	bne.n	8004ef6 <__swbuf_r+0x2e>
 8004f36:	4621      	mov	r1, r4
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f7ff ff9d 	bl	8004e78 <_fflush_r>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d0d9      	beq.n	8004ef6 <__swbuf_r+0x2e>
 8004f42:	e7d6      	b.n	8004ef2 <__swbuf_r+0x2a>

08004f44 <__swsetup_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4b29      	ldr	r3, [pc, #164]	@ (8004fec <__swsetup_r+0xa8>)
 8004f48:	4605      	mov	r5, r0
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	b118      	cbz	r0, 8004f58 <__swsetup_r+0x14>
 8004f50:	6a03      	ldr	r3, [r0, #32]
 8004f52:	b90b      	cbnz	r3, 8004f58 <__swsetup_r+0x14>
 8004f54:	f7ff fa3e 	bl	80043d4 <__sinit>
 8004f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f5c:	0719      	lsls	r1, r3, #28
 8004f5e:	d422      	bmi.n	8004fa6 <__swsetup_r+0x62>
 8004f60:	06da      	lsls	r2, r3, #27
 8004f62:	d407      	bmi.n	8004f74 <__swsetup_r+0x30>
 8004f64:	2209      	movs	r2, #9
 8004f66:	602a      	str	r2, [r5, #0]
 8004f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f72:	e033      	b.n	8004fdc <__swsetup_r+0x98>
 8004f74:	0758      	lsls	r0, r3, #29
 8004f76:	d512      	bpl.n	8004f9e <__swsetup_r+0x5a>
 8004f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f7a:	b141      	cbz	r1, 8004f8e <__swsetup_r+0x4a>
 8004f7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f80:	4299      	cmp	r1, r3
 8004f82:	d002      	beq.n	8004f8a <__swsetup_r+0x46>
 8004f84:	4628      	mov	r0, r5
 8004f86:	f7ff fb2d 	bl	80045e4 <_free_r>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f8e:	89a3      	ldrh	r3, [r4, #12]
 8004f90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f94:	81a3      	strh	r3, [r4, #12]
 8004f96:	2300      	movs	r3, #0
 8004f98:	6063      	str	r3, [r4, #4]
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	89a3      	ldrh	r3, [r4, #12]
 8004fa0:	f043 0308 	orr.w	r3, r3, #8
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	b94b      	cbnz	r3, 8004fbe <__swsetup_r+0x7a>
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb4:	d003      	beq.n	8004fbe <__swsetup_r+0x7a>
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f000 f84f 	bl	800505c <__smakebuf_r>
 8004fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc2:	f013 0201 	ands.w	r2, r3, #1
 8004fc6:	d00a      	beq.n	8004fde <__swsetup_r+0x9a>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	60a2      	str	r2, [r4, #8]
 8004fcc:	6962      	ldr	r2, [r4, #20]
 8004fce:	4252      	negs	r2, r2
 8004fd0:	61a2      	str	r2, [r4, #24]
 8004fd2:	6922      	ldr	r2, [r4, #16]
 8004fd4:	b942      	cbnz	r2, 8004fe8 <__swsetup_r+0xa4>
 8004fd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004fda:	d1c5      	bne.n	8004f68 <__swsetup_r+0x24>
 8004fdc:	bd38      	pop	{r3, r4, r5, pc}
 8004fde:	0799      	lsls	r1, r3, #30
 8004fe0:	bf58      	it	pl
 8004fe2:	6962      	ldrpl	r2, [r4, #20]
 8004fe4:	60a2      	str	r2, [r4, #8]
 8004fe6:	e7f4      	b.n	8004fd2 <__swsetup_r+0x8e>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	e7f7      	b.n	8004fdc <__swsetup_r+0x98>
 8004fec:	24000038 	.word	0x24000038

08004ff0 <_sbrk_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4d06      	ldr	r5, [pc, #24]	@ (800500c <_sbrk_r+0x1c>)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	602b      	str	r3, [r5, #0]
 8004ffc:	f7fb ff28 	bl	8000e50 <_sbrk>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d102      	bne.n	800500a <_sbrk_r+0x1a>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	b103      	cbz	r3, 800500a <_sbrk_r+0x1a>
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	240002a0 	.word	0x240002a0

08005010 <__swhatbuf_r>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	460c      	mov	r4, r1
 8005014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005018:	2900      	cmp	r1, #0
 800501a:	b096      	sub	sp, #88	@ 0x58
 800501c:	4615      	mov	r5, r2
 800501e:	461e      	mov	r6, r3
 8005020:	da0d      	bge.n	800503e <__swhatbuf_r+0x2e>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	bf14      	ite	ne
 800502e:	2340      	movne	r3, #64	@ 0x40
 8005030:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005034:	2000      	movs	r0, #0
 8005036:	6031      	str	r1, [r6, #0]
 8005038:	602b      	str	r3, [r5, #0]
 800503a:	b016      	add	sp, #88	@ 0x58
 800503c:	bd70      	pop	{r4, r5, r6, pc}
 800503e:	466a      	mov	r2, sp
 8005040:	f000 f848 	bl	80050d4 <_fstat_r>
 8005044:	2800      	cmp	r0, #0
 8005046:	dbec      	blt.n	8005022 <__swhatbuf_r+0x12>
 8005048:	9901      	ldr	r1, [sp, #4]
 800504a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800504e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005052:	4259      	negs	r1, r3
 8005054:	4159      	adcs	r1, r3
 8005056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800505a:	e7eb      	b.n	8005034 <__swhatbuf_r+0x24>

0800505c <__smakebuf_r>:
 800505c:	898b      	ldrh	r3, [r1, #12]
 800505e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005060:	079d      	lsls	r5, r3, #30
 8005062:	4606      	mov	r6, r0
 8005064:	460c      	mov	r4, r1
 8005066:	d507      	bpl.n	8005078 <__smakebuf_r+0x1c>
 8005068:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	6123      	str	r3, [r4, #16]
 8005070:	2301      	movs	r3, #1
 8005072:	6163      	str	r3, [r4, #20]
 8005074:	b003      	add	sp, #12
 8005076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005078:	ab01      	add	r3, sp, #4
 800507a:	466a      	mov	r2, sp
 800507c:	f7ff ffc8 	bl	8005010 <__swhatbuf_r>
 8005080:	9f00      	ldr	r7, [sp, #0]
 8005082:	4605      	mov	r5, r0
 8005084:	4639      	mov	r1, r7
 8005086:	4630      	mov	r0, r6
 8005088:	f7ff fb18 	bl	80046bc <_malloc_r>
 800508c:	b948      	cbnz	r0, 80050a2 <__smakebuf_r+0x46>
 800508e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005092:	059a      	lsls	r2, r3, #22
 8005094:	d4ee      	bmi.n	8005074 <__smakebuf_r+0x18>
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	f043 0302 	orr.w	r3, r3, #2
 800509e:	81a3      	strh	r3, [r4, #12]
 80050a0:	e7e2      	b.n	8005068 <__smakebuf_r+0xc>
 80050a2:	89a3      	ldrh	r3, [r4, #12]
 80050a4:	6020      	str	r0, [r4, #0]
 80050a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050aa:	81a3      	strh	r3, [r4, #12]
 80050ac:	9b01      	ldr	r3, [sp, #4]
 80050ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050b2:	b15b      	cbz	r3, 80050cc <__smakebuf_r+0x70>
 80050b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050b8:	4630      	mov	r0, r6
 80050ba:	f000 f81d 	bl	80050f8 <_isatty_r>
 80050be:	b128      	cbz	r0, 80050cc <__smakebuf_r+0x70>
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	f023 0303 	bic.w	r3, r3, #3
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	81a3      	strh	r3, [r4, #12]
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	431d      	orrs	r5, r3
 80050d0:	81a5      	strh	r5, [r4, #12]
 80050d2:	e7cf      	b.n	8005074 <__smakebuf_r+0x18>

080050d4 <_fstat_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d07      	ldr	r5, [pc, #28]	@ (80050f4 <_fstat_r+0x20>)
 80050d8:	2300      	movs	r3, #0
 80050da:	4604      	mov	r4, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	4611      	mov	r1, r2
 80050e0:	602b      	str	r3, [r5, #0]
 80050e2:	f7fb fe8c 	bl	8000dfe <_fstat>
 80050e6:	1c43      	adds	r3, r0, #1
 80050e8:	d102      	bne.n	80050f0 <_fstat_r+0x1c>
 80050ea:	682b      	ldr	r3, [r5, #0]
 80050ec:	b103      	cbz	r3, 80050f0 <_fstat_r+0x1c>
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	bd38      	pop	{r3, r4, r5, pc}
 80050f2:	bf00      	nop
 80050f4:	240002a0 	.word	0x240002a0

080050f8 <_isatty_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	4d06      	ldr	r5, [pc, #24]	@ (8005114 <_isatty_r+0x1c>)
 80050fc:	2300      	movs	r3, #0
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
 8005102:	602b      	str	r3, [r5, #0]
 8005104:	f7fb fe8b 	bl	8000e1e <_isatty>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d102      	bne.n	8005112 <_isatty_r+0x1a>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	b103      	cbz	r3, 8005112 <_isatty_r+0x1a>
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	240002a0 	.word	0x240002a0

08005118 <_init>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr

08005124 <_fini>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr
